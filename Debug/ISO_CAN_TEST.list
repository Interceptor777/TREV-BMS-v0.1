
ISO_CAN_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007754  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080078e4  080078e4  000088e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007928  08007928  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007928  08007928  0000905c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007928  08007928  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007928  08007928  00008928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800792c  0800792c  0000892c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007930  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000005c  0800798c  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800798c  000092e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011860  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d3b  00000000  00000000  0001a8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  0001d628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c30  00000000  00000000  0001e638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023074  00000000  00000000  0001f268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143f1  00000000  00000000  000422dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2a7a  00000000  00000000  000566cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129147  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004604  00000000  00000000  0012918c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0012d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078cc 	.word	0x080078cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080078cc 	.word	0x080078cc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <ADC_ReadValue>:
/**
  * @brief  Read ADC value from PA0 (ADC channel 5)
  * @retval ADC value (0-4095 for 12-bit resolution)
  */
uint16_t ADC_ReadValue(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  uint16_t adc_value = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	80fb      	strh	r3, [r7, #6]
  
  // Start ADC conversion
  if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <ADC_ReadValue+0x40>)
 8000b28:	f002 fcf0 	bl	800350c <HAL_ADC_Start>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10f      	bne.n	8000b52 <ADC_ReadValue+0x36>
    // Wait for conversion to complete
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000b32:	f04f 31ff 	mov.w	r1, #4294967295
 8000b36:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <ADC_ReadValue+0x40>)
 8000b38:	f002 fd7e 	bl	8003638 <HAL_ADC_PollForConversion>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <ADC_ReadValue+0x30>
      // Get ADC value
      adc_value = HAL_ADC_GetValue(&hadc1);
 8000b42:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <ADC_ReadValue+0x40>)
 8000b44:	f002 fe07 	bl	8003756 <HAL_ADC_GetValue>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	80fb      	strh	r3, [r7, #6]
    }
    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 8000b4c:	4803      	ldr	r0, [pc, #12]	@ (8000b5c <ADC_ReadValue+0x40>)
 8000b4e:	f002 fd40 	bl	80035d2 <HAL_ADC_Stop>
  }
  
  return adc_value;
 8000b52:	88fb      	ldrh	r3, [r7, #6]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000090 	.word	0x20000090

08000b60 <MUX_SetChannel>:
  * @brief  Set MUX channel using 3-bit digital control signals
  * @param  channel: MUX channel to select (0-7)
  * @retval None
  */
void MUX_SetChannel(uint8_t channel)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  // Validate channel range
  if (channel > 7) {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b07      	cmp	r3, #7
 8000b6e:	d837      	bhi.n	8000be0 <MUX_SetChannel+0x80>
  // Set MUX control signals based on 3-bit channel value
  // MUX_SIG1 (PB1) = bit 0
  // MUX_SIG2 (PA8) = bit 1  
  // MUX_SIG3 (PB5) = bit 2
  
  if (channel & 0x01) {
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d005      	beq.n	8000b86 <MUX_SetChannel+0x26>
    HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	481a      	ldr	r0, [pc, #104]	@ (8000be8 <MUX_SetChannel+0x88>)
 8000b80:	f004 fdc4 	bl	800570c <HAL_GPIO_WritePin>
 8000b84:	e004      	b.n	8000b90 <MUX_SetChannel+0x30>
  } else {
    HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2102      	movs	r1, #2
 8000b8a:	4817      	ldr	r0, [pc, #92]	@ (8000be8 <MUX_SetChannel+0x88>)
 8000b8c:	f004 fdbe 	bl	800570c <HAL_GPIO_WritePin>
  }
  
  if (channel & 0x02) {
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <MUX_SetChannel+0x4a>
    HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba4:	f004 fdb2 	bl	800570c <HAL_GPIO_WritePin>
 8000ba8:	e006      	b.n	8000bb8 <MUX_SetChannel+0x58>
  } else {
    HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb4:	f004 fdaa 	bl	800570c <HAL_GPIO_WritePin>
  }
  
  if (channel & 0x04) {
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d005      	beq.n	8000bce <MUX_SetChannel+0x6e>
    HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	4808      	ldr	r0, [pc, #32]	@ (8000be8 <MUX_SetChannel+0x88>)
 8000bc8:	f004 fda0 	bl	800570c <HAL_GPIO_WritePin>
 8000bcc:	e004      	b.n	8000bd8 <MUX_SetChannel+0x78>
  } else {
    HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MUX_SetChannel+0x88>)
 8000bd4:	f004 fd9a 	bl	800570c <HAL_GPIO_WritePin>
  }
  
  // Allow time for MUX to settle
  HAL_Delay(2);
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f002 f91b 	bl	8002e14 <HAL_Delay>
 8000bde:	e000      	b.n	8000be2 <MUX_SetChannel+0x82>
    return;
 8000be0:	bf00      	nop
}
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	48000400 	.word	0x48000400

08000bec <MUX_ReadChannel>:
  * @brief  Read ADC value from specific MUX channel
  * @param  channel: MUX channel to read (0-7)
  * @retval ADC value (0-4095 for 12-bit resolution)
  */
uint16_t MUX_ReadChannel(uint8_t channel)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  // Set MUX to desired channel
  MUX_SetChannel(channel);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffb1 	bl	8000b60 <MUX_SetChannel>
  
  // Read ADC value
  return ADC_ReadValue();
 8000bfe:	f7ff ff8d 	bl	8000b1c <ADC_ReadValue>
 8000c02:	4603      	mov	r3, r0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	0000      	movs	r0, r0
	...

08000c10 <ADC_CalculateThermistorTemp>:
  * @brief  Calculate temperature from thermistor ADC reading using B-parameter equation
  * @param  adc_value: Raw ADC value (0-4095)
  * @retval Temperature in degrees Celsius
  */
float ADC_CalculateThermistorTemp(uint16_t adc_value)
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	80fb      	strh	r3, [r7, #6]
  // Convert ADC value to voltage
  float voltage = ((float)adc_value / ADC_RESOLUTION) * ADC_VREF;
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	ee07 3a90 	vmov	s15, r3
 8000c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c24:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000d80 <ADC_CalculateThermistorTemp+0x170>
 8000c28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000c2c:	ee16 0a90 	vmov	r0, s13
 8000c30:	f7ff fc32 	bl	8000498 <__aeabi_f2d>
 8000c34:	a34c      	add	r3, pc, #304	@ (adr r3, 8000d68 <ADC_CalculateThermistorTemp+0x158>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fc85 	bl	8000548 <__aeabi_dmul>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	4610      	mov	r0, r2
 8000c44:	4619      	mov	r1, r3
 8000c46:	f7ff ff19 	bl	8000a7c <__aeabi_d2f>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	617b      	str	r3, [r7, #20]
  // Solving for R_thermistor: R_thermistor = (V_adc * R_pullup) / (5V - V_adc)
  // 
  // However, if the actual voltage would exceed 3.3V, we need to account for clamping
  float r_thermistor;
  
  if (voltage >= 3.29) {  // Close to 3.3V limit, assume clamped
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff fc22 	bl	8000498 <__aeabi_f2d>
 8000c54:	a346      	add	r3, pc, #280	@ (adr r3, 8000d70 <ADC_CalculateThermistorTemp+0x160>)
 8000c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5a:	f7ff fefb 	bl	8000a54 <__aeabi_dcmpge>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <ADC_CalculateThermistorTemp+0x5a>
    // When clamped, we know the actual voltage divider would give higher voltage
    // This happens when thermistor resistance is very high (cold temperatures)
    // Use a minimum resistance calculation
    r_thermistor = PULLUP_RESISTOR * 100;  // Assume very high resistance for cold temps
 8000c64:	4b47      	ldr	r3, [pc, #284]	@ (8000d84 <ADC_CalculateThermistorTemp+0x174>)
 8000c66:	61fb      	str	r3, [r7, #28]
 8000c68:	e023      	b.n	8000cb2 <ADC_CalculateThermistorTemp+0xa2>
  } else {
    // Normal calculation - assume 5V supply for voltage divider
    r_thermistor = (voltage * PULLUP_RESISTOR) / (5.0 - voltage);
 8000c6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c6e:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8000d88 <ADC_CalculateThermistorTemp+0x178>
 8000c72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c76:	ee17 0a90 	vmov	r0, s15
 8000c7a:	f7ff fc0d 	bl	8000498 <__aeabi_f2d>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff fc08 	bl	8000498 <__aeabi_f2d>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	f04f 0000 	mov.w	r0, #0
 8000c90:	493e      	ldr	r1, [pc, #248]	@ (8000d8c <ADC_CalculateThermistorTemp+0x17c>)
 8000c92:	f7ff faa1 	bl	80001d8 <__aeabi_dsub>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	4629      	mov	r1, r5
 8000c9e:	f7ff fd7d 	bl	800079c <__aeabi_ddiv>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	4610      	mov	r0, r2
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f7ff fee7 	bl	8000a7c <__aeabi_d2f>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	61fb      	str	r3, [r7, #28]
  }
  
  // Handle edge cases
  if (r_thermistor <= 0) {
 8000cb2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cbe:	d801      	bhi.n	8000cc4 <ADC_CalculateThermistorTemp+0xb4>
    return 125.0; // Return maximum temperature for very low resistance
 8000cc0:	4b33      	ldr	r3, [pc, #204]	@ (8000d90 <ADC_CalculateThermistorTemp+0x180>)
 8000cc2:	e049      	b.n	8000d58 <ADC_CalculateThermistorTemp+0x148>
  }
  
  // Calculate temperature using B-parameter equation (derived from Steinhart-Hart)
  // 1/T = 1/T0 + (1/B) * ln(R/R0)
  // Where T0 = 298.15K (25°C), R0 = resistance at 25°C, B = B-value
  float ln_ratio = logf(r_thermistor / THERMISTOR_R25);
 8000cc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cc8:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000d88 <ADC_CalculateThermistorTemp+0x178>
 8000ccc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000cd0:	eeb0 0a47 	vmov.f32	s0, s14
 8000cd4:	f006 fcd4 	bl	8007680 <logf>
 8000cd8:	ed87 0a04 	vstr	s0, [r7, #16]
  float temp_kelvin = 1.0f / ((1.0f / REFERENCE_TEMP_K) + (ln_ratio / THERMISTOR_B_VALUE));
 8000cdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ce0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d94 <ADC_CalculateThermistorTemp+0x184>
 8000ce4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ce8:	ee16 0a90 	vmov	r0, s13
 8000cec:	f7ff fbd4 	bl	8000498 <__aeabi_f2d>
 8000cf0:	a321      	add	r3, pc, #132	@ (adr r3, 8000d78 <ADC_CalculateThermistorTemp+0x168>)
 8000cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf6:	f7ff fa71 	bl	80001dc <__adddf3>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	4925      	ldr	r1, [pc, #148]	@ (8000d98 <ADC_CalculateThermistorTemp+0x188>)
 8000d04:	f7ff fd4a 	bl	800079c <__aeabi_ddiv>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f7ff feb4 	bl	8000a7c <__aeabi_d2f>
 8000d14:	4603      	mov	r3, r0
 8000d16:	60fb      	str	r3, [r7, #12]
  
  // Convert to Celsius
  float temp_celsius = temp_kelvin - 273.15f;
 8000d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d1c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000d9c <ADC_CalculateThermistorTemp+0x18c>
 8000d20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d24:	edc7 7a06 	vstr	s15, [r7, #24]
  
  // Clamp to reasonable range
  if (temp_celsius < -40.0f) {
 8000d28:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d2c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000da0 <ADC_CalculateThermistorTemp+0x190>
 8000d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d38:	d502      	bpl.n	8000d40 <ADC_CalculateThermistorTemp+0x130>
    temp_celsius = -40.0f;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <ADC_CalculateThermistorTemp+0x194>)
 8000d3c:	61bb      	str	r3, [r7, #24]
 8000d3e:	e00a      	b.n	8000d56 <ADC_CalculateThermistorTemp+0x146>
  } else if (temp_celsius > 125.0f) {
 8000d40:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d44:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000da8 <ADC_CalculateThermistorTemp+0x198>
 8000d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d50:	dd01      	ble.n	8000d56 <ADC_CalculateThermistorTemp+0x146>
    temp_celsius = 125.0f;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <ADC_CalculateThermistorTemp+0x180>)
 8000d54:	61bb      	str	r3, [r7, #24]
  }
  
  return temp_celsius;
 8000d56:	69bb      	ldr	r3, [r7, #24]
}
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d60:	3720      	adds	r7, #32
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bdb0      	pop	{r4, r5, r7, pc}
 8000d66:	bf00      	nop
 8000d68:	66666666 	.word	0x66666666
 8000d6c:	400a6666 	.word	0x400a6666
 8000d70:	851eb852 	.word	0x851eb852
 8000d74:	400a51eb 	.word	0x400a51eb
 8000d78:	dcb5db83 	.word	0xdcb5db83
 8000d7c:	3f6b79e1 	.word	0x3f6b79e1
 8000d80:	457ff000 	.word	0x457ff000
 8000d84:	49742400 	.word	0x49742400
 8000d88:	461c4000 	.word	0x461c4000
 8000d8c:	40140000 	.word	0x40140000
 8000d90:	42fa0000 	.word	0x42fa0000
 8000d94:	45866000 	.word	0x45866000
 8000d98:	3ff00000 	.word	0x3ff00000
 8000d9c:	43889333 	.word	0x43889333
 8000da0:	c2200000 	.word	0xc2200000
 8000da4:	c2200000 	.word	0xc2200000
 8000da8:	42fa0000 	.word	0x42fa0000

08000dac <ADC_ReadAllThermistors>:
  * @brief  Read temperatures from all 8 MUX channels
  * @param  temperatures: Array to store 8 temperature readings
  * @retval None
  */
void ADC_ReadAllThermistors(float *temperatures)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  for (uint8_t channel = 0; channel < MUX_CHANNELS; channel++) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e017      	b.n	8000dea <ADC_ReadAllThermistors+0x3e>
    // Read ADC value for this channel
    uint16_t adc_value = MUX_ReadChannel(channel);
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff15 	bl	8000bec <MUX_ReadChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	81bb      	strh	r3, [r7, #12]
    
    // Calculate temperature
    temperatures[channel] = ADC_CalculateThermistorTemp(adc_value);
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	18d4      	adds	r4, r2, r3
 8000dce:	89bb      	ldrh	r3, [r7, #12]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff1d 	bl	8000c10 <ADC_CalculateThermistorTemp>
 8000dd6:	eef0 7a40 	vmov.f32	s15, s0
 8000dda:	edc4 7a00 	vstr	s15, [r4]
    
    // Small delay between readings
    HAL_Delay(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f002 f818 	bl	8002e14 <HAL_Delay>
  for (uint8_t channel = 0; channel < MUX_CHANNELS; channel++) {
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	3301      	adds	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	d9e4      	bls.n	8000dba <ADC_ReadAllThermistors+0xe>
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd90      	pop	{r4, r7, pc}
 8000dfa:	0000      	movs	r0, r0
 8000dfc:	0000      	movs	r0, r0
	...

08000e00 <ADC_ConvertToVoltage>:
  * @brief  Convert ADC value to voltage
  * @param  adc_value: Raw ADC value (0-4095)
  * @retval Voltage in volts
  */
float ADC_ConvertToVoltage(uint16_t adc_value)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
  return ((float)adc_value / ADC_RESOLUTION) * ADC_VREF;
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e14:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000e58 <ADC_ConvertToVoltage+0x58>
 8000e18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e1c:	ee16 0a90 	vmov	r0, s13
 8000e20:	f7ff fb3a 	bl	8000498 <__aeabi_f2d>
 8000e24:	a30a      	add	r3, pc, #40	@ (adr r3, 8000e50 <ADC_ConvertToVoltage+0x50>)
 8000e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2a:	f7ff fb8d 	bl	8000548 <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fe21 	bl	8000a7c <__aeabi_d2f>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	ee07 3a90 	vmov	s15, r3
}
 8000e40:	eeb0 0a67 	vmov.f32	s0, s15
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	f3af 8000 	nop.w
 8000e50:	66666666 	.word	0x66666666
 8000e54:	400a6666 	.word	0x400a6666
 8000e58:	457ff000 	.word	0x457ff000

08000e5c <ADC_ReadAllVoltages>:
  * @brief  Read voltages from all 8 MUX channels
  * @param  voltages: Array to store 8 voltage readings
  * @retval None
  */
void ADC_ReadAllVoltages(float *voltages)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  for (uint8_t channel = 0; channel < MUX_CHANNELS; channel++) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e017      	b.n	8000e9a <ADC_ReadAllVoltages+0x3e>
    // Read ADC value for this channel
    uint16_t adc_value = MUX_ReadChannel(channel);
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff febd 	bl	8000bec <MUX_ReadChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	81bb      	strh	r3, [r7, #12]
    
    // Convert to voltage
    voltages[channel] = ADC_ConvertToVoltage(adc_value);
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	18d4      	adds	r4, r2, r3
 8000e7e:	89bb      	ldrh	r3, [r7, #12]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ffbd 	bl	8000e00 <ADC_ConvertToVoltage>
 8000e86:	eef0 7a40 	vmov.f32	s15, s0
 8000e8a:	edc4 7a00 	vstr	s15, [r4]
    
    // Small delay between readings
    HAL_Delay(1);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f001 ffc0 	bl	8002e14 <HAL_Delay>
  for (uint8_t channel = 0; channel < MUX_CHANNELS; channel++) {
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	3301      	adds	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	2b07      	cmp	r3, #7
 8000e9e:	d9e4      	bls.n	8000e6a <ADC_ReadAllVoltages+0xe>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd90      	pop	{r4, r7, pc}
	...

08000eac <BQ76952_ReadStackVoltage>:
/**
  * @brief  Read stack voltage from BQ76952 via I2C
  * @retval Stack voltage in millivolts (0 if communication failed)
  */
uint16_t BQ76952_ReadStackVoltage(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af04      	add	r7, sp, #16
  uint8_t reg_addr = BQ76952_STACK_VOLTAGE;
 8000eb2:	2334      	movs	r3, #52	@ 0x34
 8000eb4:	717b      	strb	r3, [r7, #5]
  uint8_t rx_data[2] = {0};
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	803b      	strh	r3, [r7, #0]
  uint16_t stack_voltage_mv = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	80fb      	strh	r3, [r7, #6]
  
  // Read 2 bytes from BQ76952 stack voltage register
  if (HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), reg_addr, 1, rx_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 8000ebe:	797b      	ldrb	r3, [r7, #5]
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	2302      	movs	r3, #2
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	463b      	mov	r3, r7
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	2110      	movs	r1, #16
 8000ed4:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <BQ76952_ReadStackVoltage+0x5c>)
 8000ed6:	f004 fde1 	bl	8005a9c <HAL_I2C_Mem_Read>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10e      	bne.n	8000efe <BQ76952_ReadStackVoltage+0x52>
    // Convert to millivolts (BQ76952 returns voltage in 0.01V units)
    // Combine low and high bytes (little endian)
    stack_voltage_mv = ((uint16_t)rx_data[1] << 8) | rx_data[0];
 8000ee0:	787b      	ldrb	r3, [r7, #1]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	783b      	ldrb	r3, [r7, #0]
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	80fb      	strh	r3, [r7, #6]
    stack_voltage_mv *= 10; // Convert from 0.01V to mV
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	80fb      	strh	r3, [r7, #6]
  }
  
  return stack_voltage_mv;
 8000efe:	88fb      	ldrh	r3, [r7, #6]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000140 	.word	0x20000140

08000f0c <BQ76952_ReadCellVoltage>:
  * @brief  Read individual cell voltage from BQ76952 via I2C
  * @param  cell_number: Cell number (1-16)
  * @retval Cell voltage in millivolts (0 if communication failed)
  */
uint16_t BQ76952_ReadCellVoltage(uint8_t cell_number)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af04      	add	r7, sp, #16
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  uint8_t reg_addr;
  uint8_t rx_data[2] = {0};
 8000f16:	2300      	movs	r3, #0
 8000f18:	813b      	strh	r3, [r7, #8]
  uint16_t cell_voltage_mv = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	81fb      	strh	r3, [r7, #14]
  
  // Validate cell number
  if (cell_number < 1 || cell_number > BQ76952_MAX_CELLS) {
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <BQ76952_ReadCellVoltage+0x1e>
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b10      	cmp	r3, #16
 8000f28:	d901      	bls.n	8000f2e <BQ76952_ReadCellVoltage+0x22>
    return 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e020      	b.n	8000f70 <BQ76952_ReadCellVoltage+0x64>
  }
  
  // Calculate register address for the cell (Cell 1 starts at 0x14, increment by 2 for each cell)
  reg_addr = BQ76952_CELL1_VOLTAGE + ((cell_number - 1) * 2);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	3309      	adds	r3, #9
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	737b      	strb	r3, [r7, #13]
  
  // Read 2 bytes from BQ76952 cell voltage register
  if (HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), reg_addr, 1, rx_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 8000f38:	7b7b      	ldrb	r3, [r7, #13]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f40:	9302      	str	r3, [sp, #8]
 8000f42:	2302      	movs	r3, #2
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	2110      	movs	r1, #16
 8000f50:	4809      	ldr	r0, [pc, #36]	@ (8000f78 <BQ76952_ReadCellVoltage+0x6c>)
 8000f52:	f004 fda3 	bl	8005a9c <HAL_I2C_Mem_Read>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d108      	bne.n	8000f6e <BQ76952_ReadCellVoltage+0x62>
    // Convert to millivolts (BQ76952 returns voltage in 1mV units)
    // Combine low and high bytes (little endian)
    cell_voltage_mv = ((uint16_t)rx_data[1] << 8) | rx_data[0];
 8000f5c:	7a7b      	ldrb	r3, [r7, #9]
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	7a3b      	ldrb	r3, [r7, #8]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	81fb      	strh	r3, [r7, #14]
  }
  
  return cell_voltage_mv;
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000140 	.word	0x20000140

08000f7c <BQ76952_WriteDataMemory>:
  * @param  data: Pointer to data to write
  * @param  length: Number of bytes to write (max 32)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76952_WriteDataMemory(uint16_t address, uint8_t *data, uint8_t length)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af04      	add	r7, sp, #16
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	80fb      	strh	r3, [r7, #6]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	717b      	strb	r3, [r7, #5]
  uint8_t subcommand[2];
  uint8_t checksum = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	75fb      	strb	r3, [r7, #23]
  uint8_t data_length;
  uint8_t verify_bytes[2];
  uint8_t i;
  uint8_t retry_count = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	757b      	strb	r3, [r7, #21]
  
  if (length > 32 || data == NULL) {
 8000f94:	797b      	ldrb	r3, [r7, #5]
 8000f96:	2b20      	cmp	r3, #32
 8000f98:	d802      	bhi.n	8000fa0 <BQ76952_WriteDataMemory+0x24>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <BQ76952_WriteDataMemory+0x28>
    return HAL_ERROR;  // Maximum block size is 32 bytes
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e0e9      	b.n	8001178 <BQ76952_WriteDataMemory+0x1fc>
  }
  
  // Add substantial delay before starting new data memory operation
  HAL_Delay(200);  // Give BMS time to finish any previous operations
 8000fa4:	20c8      	movs	r0, #200	@ 0xc8
 8000fa6:	f001 ff35 	bl	8002e14 <HAL_Delay>
  
  // Step 1: Write subcommand address to 0x3E and 0x3F
  subcommand[0] = (uint8_t)(address & 0xFF);        // Low byte to 0x3E
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	743b      	strb	r3, [r7, #16]
  subcommand[1] = (uint8_t)((address >> 8) & 0xFF); // High byte to 0x3F
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	747b      	strb	r3, [r7, #17]
  
  if (HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_LOW, 1, &subcommand[0], 1, HAL_MAX_DELAY) != HAL_OK) {
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	223e      	movs	r2, #62	@ 0x3e
 8000fce:	2110      	movs	r1, #16
 8000fd0:	486b      	ldr	r0, [pc, #428]	@ (8001180 <BQ76952_WriteDataMemory+0x204>)
 8000fd2:	f004 fc4f 	bl	8005874 <HAL_I2C_Mem_Write>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <BQ76952_WriteDataMemory+0x6a>
    System_SendErrorMessage(ERROR_I2C_COMMUNICATION);
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f001 fe5b 	bl	8002c98 <System_SendErrorMessage>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e0c8      	b.n	8001178 <BQ76952_WriteDataMemory+0x1fc>
  }
  HAL_Delay(10);  // Delay between subcommand writes
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f001 ff14 	bl	8002e14 <HAL_Delay>
  
  if (HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_HIGH, 1, &subcommand[1], 1, HAL_MAX_DELAY) != HAL_OK) {
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2301      	movs	r3, #1
 8001000:	223f      	movs	r2, #63	@ 0x3f
 8001002:	2110      	movs	r1, #16
 8001004:	485e      	ldr	r0, [pc, #376]	@ (8001180 <BQ76952_WriteDataMemory+0x204>)
 8001006:	f004 fc35 	bl	8005874 <HAL_I2C_Mem_Write>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <BQ76952_WriteDataMemory+0x9e>
    System_SendErrorMessage(ERROR_I2C_COMMUNICATION);
 8001010:	2002      	movs	r0, #2
 8001012:	f001 fe41 	bl	8002c98 <System_SendErrorMessage>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0ae      	b.n	8001178 <BQ76952_WriteDataMemory+0x1fc>
  }
  
  // Step 2: Wait for subcommand completion (per datasheet page 13)
  // Read 0x3E and 0x3F until they return original values (not 0xFF)
  HAL_Delay(50);  // Initial delay for subcommand processing
 800101a:	2032      	movs	r0, #50	@ 0x32
 800101c:	f001 fefa 	bl	8002e14 <HAL_Delay>
  
  for (retry_count = 0; retry_count < 10; retry_count++) {
 8001020:	2300      	movs	r3, #0
 8001022:	757b      	strb	r3, [r7, #21]
 8001024:	e03a      	b.n	800109c <BQ76952_WriteDataMemory+0x120>
    if (HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_LOW, 1, &verify_bytes[0], 1, HAL_MAX_DELAY) != HAL_OK) {
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	2301      	movs	r3, #1
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	223e      	movs	r2, #62	@ 0x3e
 800103a:	2110      	movs	r1, #16
 800103c:	4850      	ldr	r0, [pc, #320]	@ (8001180 <BQ76952_WriteDataMemory+0x204>)
 800103e:	f004 fd2d 	bl	8005a9c <HAL_I2C_Mem_Read>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <BQ76952_WriteDataMemory+0xd6>
      System_SendErrorMessage(ERROR_I2C_COMMUNICATION);
 8001048:	2002      	movs	r0, #2
 800104a:	f001 fe25 	bl	8002c98 <System_SendErrorMessage>
      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e092      	b.n	8001178 <BQ76952_WriteDataMemory+0x1fc>
    }
    if (HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_HIGH, 1, &verify_bytes[1], 1, HAL_MAX_DELAY) != HAL_OK) {
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2301      	movs	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	3301      	adds	r3, #1
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	223f      	movs	r2, #63	@ 0x3f
 8001068:	2110      	movs	r1, #16
 800106a:	4845      	ldr	r0, [pc, #276]	@ (8001180 <BQ76952_WriteDataMemory+0x204>)
 800106c:	f004 fd16 	bl	8005a9c <HAL_I2C_Mem_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d004      	beq.n	8001080 <BQ76952_WriteDataMemory+0x104>
      System_SendErrorMessage(ERROR_I2C_COMMUNICATION);
 8001076:	2002      	movs	r0, #2
 8001078:	f001 fe0e 	bl	8002c98 <System_SendErrorMessage>
      return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e07b      	b.n	8001178 <BQ76952_WriteDataMemory+0x1fc>
    }
    
    // Check if subcommand completed (returns original values, not 0xFF)
    if (verify_bytes[0] == subcommand[0] && verify_bytes[1] == subcommand[1]) {
 8001080:	7b3a      	ldrb	r2, [r7, #12]
 8001082:	7c3b      	ldrb	r3, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d103      	bne.n	8001090 <BQ76952_WriteDataMemory+0x114>
 8001088:	7b7a      	ldrb	r2, [r7, #13]
 800108a:	7c7b      	ldrb	r3, [r7, #17]
 800108c:	429a      	cmp	r2, r3
 800108e:	d009      	beq.n	80010a4 <BQ76952_WriteDataMemory+0x128>
      break;  // Subcommand completed successfully
    }
    
    HAL_Delay(20);  // Wait before retry
 8001090:	2014      	movs	r0, #20
 8001092:	f001 febf 	bl	8002e14 <HAL_Delay>
  for (retry_count = 0; retry_count < 10; retry_count++) {
 8001096:	7d7b      	ldrb	r3, [r7, #21]
 8001098:	3301      	adds	r3, #1
 800109a:	757b      	strb	r3, [r7, #21]
 800109c:	7d7b      	ldrb	r3, [r7, #21]
 800109e:	2b09      	cmp	r3, #9
 80010a0:	d9c1      	bls.n	8001026 <BQ76952_WriteDataMemory+0xaa>
 80010a2:	e000      	b.n	80010a6 <BQ76952_WriteDataMemory+0x12a>
      break;  // Subcommand completed successfully
 80010a4:	bf00      	nop
  }
  
  if (retry_count >= 10) {
 80010a6:	7d7b      	ldrb	r3, [r7, #21]
 80010a8:	2b09      	cmp	r3, #9
 80010aa:	d904      	bls.n	80010b6 <BQ76952_WriteDataMemory+0x13a>
    System_SendErrorMessage(ERROR_DATA_MEMORY_WRITE);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f001 fdf3 	bl	8002c98 <System_SendErrorMessage>
    return HAL_ERROR;  // Subcommand did not complete
 80010b2:	2301      	movs	r3, #1
 80010b4:	e060      	b.n	8001178 <BQ76952_WriteDataMemory+0x1fc>
  }
  
  // Step 3: Write data to transfer buffer (0x40-0x5F)
  for (i = 0; i < length; i++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	75bb      	strb	r3, [r7, #22]
 80010ba:	e020      	b.n	80010fe <BQ76952_WriteDataMemory+0x182>
    if (HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_BLOCK_DATA_BASE + i, 1, &data[i], 1, HAL_MAX_DELAY) != HAL_OK) {
 80010bc:	7dbb      	ldrb	r3, [r7, #22]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	3340      	adds	r3, #64	@ 0x40
 80010c2:	b299      	uxth	r1, r3
 80010c4:	7dbb      	ldrb	r3, [r7, #22]
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	f04f 32ff 	mov.w	r2, #4294967295
 80010ce:	9202      	str	r2, [sp, #8]
 80010d0:	2201      	movs	r2, #1
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	460a      	mov	r2, r1
 80010da:	2110      	movs	r1, #16
 80010dc:	4828      	ldr	r0, [pc, #160]	@ (8001180 <BQ76952_WriteDataMemory+0x204>)
 80010de:	f004 fbc9 	bl	8005874 <HAL_I2C_Mem_Write>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <BQ76952_WriteDataMemory+0x176>
      System_SendErrorMessage(ERROR_I2C_COMMUNICATION);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f001 fdd5 	bl	8002c98 <System_SendErrorMessage>
      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e042      	b.n	8001178 <BQ76952_WriteDataMemory+0x1fc>
    }
    HAL_Delay(5);  // Increased delay between each data byte
 80010f2:	2005      	movs	r0, #5
 80010f4:	f001 fe8e 	bl	8002e14 <HAL_Delay>
  for (i = 0; i < length; i++) {
 80010f8:	7dbb      	ldrb	r3, [r7, #22]
 80010fa:	3301      	adds	r3, #1
 80010fc:	75bb      	strb	r3, [r7, #22]
 80010fe:	7dba      	ldrb	r2, [r7, #22]
 8001100:	797b      	ldrb	r3, [r7, #5]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3da      	bcc.n	80010bc <BQ76952_WriteDataMemory+0x140>
  }
  
  // Step 4: Calculate checksum (sum of subcommand bytes + data bytes, then bitwise inverted)
  checksum = subcommand[0] + subcommand[1];
 8001106:	7c3a      	ldrb	r2, [r7, #16]
 8001108:	7c7b      	ldrb	r3, [r7, #17]
 800110a:	4413      	add	r3, r2
 800110c:	75fb      	strb	r3, [r7, #23]
  for (i = 0; i < length; i++) {
 800110e:	2300      	movs	r3, #0
 8001110:	75bb      	strb	r3, [r7, #22]
 8001112:	e009      	b.n	8001128 <BQ76952_WriteDataMemory+0x1ac>
    checksum += data[i];
 8001114:	7dbb      	ldrb	r3, [r7, #22]
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	4413      	add	r3, r2
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	4413      	add	r3, r2
 8001120:	75fb      	strb	r3, [r7, #23]
  for (i = 0; i < length; i++) {
 8001122:	7dbb      	ldrb	r3, [r7, #22]
 8001124:	3301      	adds	r3, #1
 8001126:	75bb      	strb	r3, [r7, #22]
 8001128:	7dba      	ldrb	r2, [r7, #22]
 800112a:	797b      	ldrb	r3, [r7, #5]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3f1      	bcc.n	8001114 <BQ76952_WriteDataMemory+0x198>
  }
  checksum = ~checksum;  // Bitwise invert (per datasheet)
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	43db      	mvns	r3, r3
 8001134:	75fb      	strb	r3, [r7, #23]
  
  // Step 5: Calculate data length (includes 0x3E, 0x3F, 0x60, 0x61 + buffer length)
  data_length = length + 4;
 8001136:	797b      	ldrb	r3, [r7, #5]
 8001138:	3304      	adds	r3, #4
 800113a:	753b      	strb	r3, [r7, #20]
  
  // Step 6: Write checksum and length together as a word to 0x60 and 0x61
  uint8_t checksum_length[2] = {checksum, data_length};
 800113c:	7dfb      	ldrb	r3, [r7, #23]
 800113e:	723b      	strb	r3, [r7, #8]
 8001140:	7d3b      	ldrb	r3, [r7, #20]
 8001142:	727b      	strb	r3, [r7, #9]
  if (HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_BLOCK_DATA_CHECKSUM, 1, checksum_length, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2302      	movs	r3, #2
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	2260      	movs	r2, #96	@ 0x60
 8001158:	2110      	movs	r1, #16
 800115a:	4809      	ldr	r0, [pc, #36]	@ (8001180 <BQ76952_WriteDataMemory+0x204>)
 800115c:	f004 fb8a 	bl	8005874 <HAL_I2C_Mem_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <BQ76952_WriteDataMemory+0x1f4>
    System_SendErrorMessage(ERROR_I2C_COMMUNICATION);
 8001166:	2002      	movs	r0, #2
 8001168:	f001 fd96 	bl	8002c98 <System_SendErrorMessage>
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e003      	b.n	8001178 <BQ76952_WriteDataMemory+0x1fc>
  }
  
  // Step 7: Extended delay to allow BMS to process the complete transaction
  HAL_Delay(250);  // Substantial delay for data memory write completion
 8001170:	20fa      	movs	r0, #250	@ 0xfa
 8001172:	f001 fe4f 	bl	8002e14 <HAL_Delay>
  
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000140 	.word	0x20000140

08001184 <BQ76952_SetTemperatureThresholds>:
  * @param  min_temp_c: Minimum temperature in Celsius (-40 to 120)
  * @param  max_temp_c: Maximum temperature in Celsius (-40 to 120)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76952_SetTemperatureThresholds(int8_t min_temp_c, int8_t max_temp_c)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
  uint8_t temp_data;
  
  // Validate temperature range
  if (min_temp_c < -40 || min_temp_c > 120 || max_temp_c < -40 || max_temp_c > 120) {
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	f113 0f28 	cmn.w	r3, #40	@ 0x28
 800119c:	db0c      	blt.n	80011b8 <BQ76952_SetTemperatureThresholds+0x34>
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b78      	cmp	r3, #120	@ 0x78
 80011a4:	dc08      	bgt.n	80011b8 <BQ76952_SetTemperatureThresholds+0x34>
 80011a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011aa:	f113 0f28 	cmn.w	r3, #40	@ 0x28
 80011ae:	db03      	blt.n	80011b8 <BQ76952_SetTemperatureThresholds+0x34>
 80011b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011b4:	2b78      	cmp	r3, #120	@ 0x78
 80011b6:	dd04      	ble.n	80011c2 <BQ76952_SetTemperatureThresholds+0x3e>
    System_SendErrorMessage(ERROR_TEMP_RANGE_INVALID);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f001 fd6d 	bl	8002c98 <System_SendErrorMessage>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e032      	b.n	8001228 <BQ76952_SetTemperatureThresholds+0xa4>
  }
  
  // Debug: Send what we're about to write for minimum temp
  temp_data = (uint8_t)min_temp_c;
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	73fb      	strb	r3, [r7, #15]
  System_SendErrorMessage(temp_data);  // Debug: Show what we're writing for min temp
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fd65 	bl	8002c98 <System_SendErrorMessage>
  
  // Set UTC (Under Temperature Charge) threshold - minimum temperature
  if (BQ76952_WriteDataMemory(BQ76952_UTC_THRESHOLD, &temp_data, 1) != HAL_OK) {
 80011ce:	f107 030f 	add.w	r3, r7, #15
 80011d2:	2201      	movs	r2, #1
 80011d4:	4619      	mov	r1, r3
 80011d6:	f249 20a6 	movw	r0, #37542	@ 0x92a6
 80011da:	f7ff fecf 	bl	8000f7c <BQ76952_WriteDataMemory>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <BQ76952_SetTemperatureThresholds+0x6a>
    System_SendErrorMessage(ERROR_DATA_MEMORY_WRITE);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f001 fd57 	bl	8002c98 <System_SendErrorMessage>
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e01c      	b.n	8001228 <BQ76952_SetTemperatureThresholds+0xa4>
  }
  
  // Extended delay between consecutive data memory writes
  HAL_Delay(500);  // Give BMS substantial time to process first write before second
 80011ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011f2:	f001 fe0f 	bl	8002e14 <HAL_Delay>
  
  // Debug: Send what we're about to write for maximum temp (with offset to distinguish)
  temp_data = (uint8_t)max_temp_c;
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	73fb      	strb	r3, [r7, #15]
  System_SendErrorMessage(temp_data + 0x40);  // Debug: Show what we're writing for max temp (offset)
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	3340      	adds	r3, #64	@ 0x40
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fd49 	bl	8002c98 <System_SendErrorMessage>
  
  // Set OTC (Over Temperature Charge) threshold - maximum temperature
  if (BQ76952_WriteDataMemory(BQ76952_OTC_THRESHOLD, &temp_data, 1) != HAL_OK) {
 8001206:	f107 030f 	add.w	r3, r7, #15
 800120a:	2201      	movs	r2, #1
 800120c:	4619      	mov	r1, r3
 800120e:	f249 209a 	movw	r0, #37530	@ 0x929a
 8001212:	f7ff feb3 	bl	8000f7c <BQ76952_WriteDataMemory>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <BQ76952_SetTemperatureThresholds+0xa2>
    System_SendErrorMessage(ERROR_DATA_MEMORY_WRITE);
 800121c:	2003      	movs	r0, #3
 800121e:	f001 fd3b 	bl	8002c98 <System_SendErrorMessage>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <BQ76952_SetTemperatureThresholds+0xa4>
  }
  
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <BQ76952_ResetCommState>:
/**
  * @brief  Reset BQ76952 communication state with multiple attempts
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76952_ResetCommState(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af04      	add	r7, sp, #16
  uint8_t dummy_data = 0x00;
 8001236:	2300      	movs	r3, #0
 8001238:	71bb      	strb	r3, [r7, #6]
  uint8_t retry_count;
  
  // Try multiple reset attempts to ensure state is cleared
  for (retry_count = 0; retry_count < 3; retry_count++) {
 800123a:	2300      	movs	r3, #0
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	e042      	b.n	80012c6 <BQ76952_ResetCommState+0x96>
    // Clear subcommand registers
    HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_LOW, 1, &dummy_data, 1, HAL_MAX_DELAY);
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	1dbb      	adds	r3, r7, #6
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2301      	movs	r3, #1
 8001250:	223e      	movs	r2, #62	@ 0x3e
 8001252:	2110      	movs	r1, #16
 8001254:	4820      	ldr	r0, [pc, #128]	@ (80012d8 <BQ76952_ResetCommState+0xa8>)
 8001256:	f004 fb0d 	bl	8005874 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 800125a:	200a      	movs	r0, #10
 800125c:	f001 fdda 	bl	8002e14 <HAL_Delay>
    HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_HIGH, 1, &dummy_data, 1, HAL_MAX_DELAY);
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	9302      	str	r3, [sp, #8]
 8001266:	2301      	movs	r3, #1
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	1dbb      	adds	r3, r7, #6
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	223f      	movs	r2, #63	@ 0x3f
 8001272:	2110      	movs	r1, #16
 8001274:	4818      	ldr	r0, [pc, #96]	@ (80012d8 <BQ76952_ResetCommState+0xa8>)
 8001276:	f004 fafd 	bl	8005874 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 800127a:	200a      	movs	r0, #10
 800127c:	f001 fdca 	bl	8002e14 <HAL_Delay>
    
    // Clear the data buffer control register
    HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_BLOCK_DATA_CONTROL, 1, &dummy_data, 1, HAL_MAX_DELAY);
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	1dbb      	adds	r3, r7, #6
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	2261      	movs	r2, #97	@ 0x61
 8001292:	2110      	movs	r1, #16
 8001294:	4810      	ldr	r0, [pc, #64]	@ (80012d8 <BQ76952_ResetCommState+0xa8>)
 8001296:	f004 faed 	bl	8005874 <HAL_I2C_Mem_Write>
    HAL_Delay(20);
 800129a:	2014      	movs	r0, #20
 800129c:	f001 fdba 	bl	8002e14 <HAL_Delay>
    
    // Clear checksum register as well
    HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_BLOCK_DATA_CHECKSUM, 1, &dummy_data, 1, HAL_MAX_DELAY);
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	2301      	movs	r3, #1
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	1dbb      	adds	r3, r7, #6
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	2260      	movs	r2, #96	@ 0x60
 80012b2:	2110      	movs	r1, #16
 80012b4:	4808      	ldr	r0, [pc, #32]	@ (80012d8 <BQ76952_ResetCommState+0xa8>)
 80012b6:	f004 fadd 	bl	8005874 <HAL_I2C_Mem_Write>
    HAL_Delay(30);  // Longer delay between reset attempts
 80012ba:	201e      	movs	r0, #30
 80012bc:	f001 fdaa 	bl	8002e14 <HAL_Delay>
  for (retry_count = 0; retry_count < 3; retry_count++) {
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	3301      	adds	r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d9b9      	bls.n	8001240 <BQ76952_ResetCommState+0x10>
  }
  
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000140 	.word	0x20000140

080012dc <BQ76952_ReadTemperatureThresholds>:
  * @param  min_temp_c: Pointer to store minimum temperature in Celsius
  * @param  max_temp_c: Pointer to store maximum temperature in Celsius
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76952_ReadTemperatureThresholds(int8_t *min_temp_c, int8_t *max_temp_c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af04      	add	r7, sp, #16
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint8_t test_data[2];
  uint8_t buffer_data = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	72fb      	strb	r3, [r7, #11]
  uint8_t subcommand[2];
  int result;
  uint8_t retry_attempt;
  uint8_t comm_test_passed = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75bb      	strb	r3, [r7, #22]
  
  if (min_temp_c == NULL || max_temp_c == NULL) {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <BQ76952_ReadTemperatureThresholds+0x1e>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <BQ76952_ReadTemperatureThresholds+0x22>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e14b      	b.n	8001596 <BQ76952_ReadTemperatureThresholds+0x2ba>
  }
  
  // Set default values
  *min_temp_c = -10;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	22f6      	movs	r2, #246	@ 0xf6
 8001302:	701a      	strb	r2, [r3, #0]
  *max_temp_c = 60;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	223c      	movs	r2, #60	@ 0x3c
 8001308:	701a      	strb	r2, [r3, #0]
  
  // Try communication test with retries
  for (retry_attempt = 0; retry_attempt < 3; retry_attempt++) {
 800130a:	2300      	movs	r3, #0
 800130c:	75fb      	strb	r3, [r7, #23]
 800130e:	e020      	b.n	8001352 <BQ76952_ReadTemperatureThresholds+0x76>
    // Always reset communication state first
    BQ76952_ResetCommState();
 8001310:	f7ff ff8e 	bl	8001230 <BQ76952_ResetCommState>
    HAL_Delay(100);  // Extra delay after reset
 8001314:	2064      	movs	r0, #100	@ 0x64
 8001316:	f001 fd7d 	bl	8002e14 <HAL_Delay>
    
    // Test basic I2C communication with stack voltage read
    result = HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_STACK_VOLTAGE, 1, test_data, 2, HAL_MAX_DELAY);
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	2302      	movs	r3, #2
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	2234      	movs	r2, #52	@ 0x34
 800132e:	2110      	movs	r1, #16
 8001330:	489b      	ldr	r0, [pc, #620]	@ (80015a0 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 8001332:	f004 fbb3 	bl	8005a9c <HAL_I2C_Mem_Read>
 8001336:	4603      	mov	r3, r0
 8001338:	613b      	str	r3, [r7, #16]
    if (result == HAL_OK) {
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <BQ76952_ReadTemperatureThresholds+0x6a>
      comm_test_passed = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	75bb      	strb	r3, [r7, #22]
      break;  // Communication works, proceed
 8001344:	e008      	b.n	8001358 <BQ76952_ReadTemperatureThresholds+0x7c>
    }
    
    HAL_Delay(200);  // Wait before retry
 8001346:	20c8      	movs	r0, #200	@ 0xc8
 8001348:	f001 fd64 	bl	8002e14 <HAL_Delay>
  for (retry_attempt = 0; retry_attempt < 3; retry_attempt++) {
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	3301      	adds	r3, #1
 8001350:	75fb      	strb	r3, [r7, #23]
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d9db      	bls.n	8001310 <BQ76952_ReadTemperatureThresholds+0x34>
  }
  
  if (!comm_test_passed) {
 8001358:	7dbb      	ldrb	r3, [r7, #22]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <BQ76952_ReadTemperatureThresholds+0x8c>
    System_SendErrorMessage(0xFF);  // Basic I2C failure after retries
 800135e:	20ff      	movs	r0, #255	@ 0xff
 8001360:	f001 fc9a 	bl	8002c98 <System_SendErrorMessage>
    return HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	e116      	b.n	8001596 <BQ76952_ReadTemperatureThresholds+0x2ba>
  }
  
  // === Read UTC Threshold (Min Temp) with retry logic ===
  for (retry_attempt = 0; retry_attempt < 2; retry_attempt++) {
 8001368:	2300      	movs	r3, #0
 800136a:	75fb      	strb	r3, [r7, #23]
 800136c:	e080      	b.n	8001470 <BQ76952_ReadTemperatureThresholds+0x194>
    subcommand[0] = (uint8_t)(BQ76952_UTC_THRESHOLD & 0xFF);        
 800136e:	23a6      	movs	r3, #166	@ 0xa6
 8001370:	723b      	strb	r3, [r7, #8]
    subcommand[1] = (uint8_t)((BQ76952_UTC_THRESHOLD >> 8) & 0xFF); 
 8001372:	2392      	movs	r3, #146	@ 0x92
 8001374:	727b      	strb	r3, [r7, #9]
    
    // Write subcommand with extended delays
    result = HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_LOW, 1, &subcommand[0], 1, HAL_MAX_DELAY);
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2301      	movs	r3, #1
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	223e      	movs	r2, #62	@ 0x3e
 800138a:	2110      	movs	r1, #16
 800138c:	4884      	ldr	r0, [pc, #528]	@ (80015a0 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 800138e:	f004 fa71 	bl	8005874 <HAL_I2C_Mem_Write>
 8001392:	4603      	mov	r3, r0
 8001394:	613b      	str	r3, [r7, #16]
    if (result != HAL_OK) {
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00f      	beq.n	80013bc <BQ76952_ReadTemperatureThresholds+0xe0>
      if (retry_attempt == 0) {
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d105      	bne.n	80013ae <BQ76952_ReadTemperatureThresholds+0xd2>
        BQ76952_ResetCommState();
 80013a2:	f7ff ff45 	bl	8001230 <BQ76952_ResetCommState>
        HAL_Delay(200);
 80013a6:	20c8      	movs	r0, #200	@ 0xc8
 80013a8:	f001 fd34 	bl	8002e14 <HAL_Delay>
        continue;  // Retry
 80013ac:	e05d      	b.n	800146a <BQ76952_ReadTemperatureThresholds+0x18e>
      } else {
        System_SendErrorMessage(0xFE);  // Final failure
 80013ae:	20fe      	movs	r0, #254	@ 0xfe
 80013b0:	f001 fc72 	bl	8002c98 <System_SendErrorMessage>
        BQ76952_ResetCommState();
 80013b4:	f7ff ff3c 	bl	8001230 <BQ76952_ResetCommState>
        return HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e0ec      	b.n	8001596 <BQ76952_ReadTemperatureThresholds+0x2ba>
      }
    }
    
    HAL_Delay(30);  // Longer delay between subcommand bytes
 80013bc:	201e      	movs	r0, #30
 80013be:	f001 fd29 	bl	8002e14 <HAL_Delay>
    
    result = HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_HIGH, 1, &subcommand[1], 1, HAL_MAX_DELAY);
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2301      	movs	r3, #1
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	3301      	adds	r3, #1
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	223f      	movs	r2, #63	@ 0x3f
 80013d8:	2110      	movs	r1, #16
 80013da:	4871      	ldr	r0, [pc, #452]	@ (80015a0 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 80013dc:	f004 fa4a 	bl	8005874 <HAL_I2C_Mem_Write>
 80013e0:	4603      	mov	r3, r0
 80013e2:	613b      	str	r3, [r7, #16]
    if (result != HAL_OK) {
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00f      	beq.n	800140a <BQ76952_ReadTemperatureThresholds+0x12e>
      if (retry_attempt == 0) {
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <BQ76952_ReadTemperatureThresholds+0x120>
        BQ76952_ResetCommState();
 80013f0:	f7ff ff1e 	bl	8001230 <BQ76952_ResetCommState>
        HAL_Delay(200);
 80013f4:	20c8      	movs	r0, #200	@ 0xc8
 80013f6:	f001 fd0d 	bl	8002e14 <HAL_Delay>
        continue;  // Retry
 80013fa:	e036      	b.n	800146a <BQ76952_ReadTemperatureThresholds+0x18e>
      } else {
        System_SendErrorMessage(0xFD);  // Final failure
 80013fc:	20fd      	movs	r0, #253	@ 0xfd
 80013fe:	f001 fc4b 	bl	8002c98 <System_SendErrorMessage>
        BQ76952_ResetCommState();
 8001402:	f7ff ff15 	bl	8001230 <BQ76952_ResetCommState>
        return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e0c5      	b.n	8001596 <BQ76952_ReadTemperatureThresholds+0x2ba>
      }
    }
    
    // Extended wait for BMS to process subcommand and populate buffer
    HAL_Delay(300);  // Longer processing delay
 800140a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800140e:	f001 fd01 	bl	8002e14 <HAL_Delay>
    
    // Read from buffer
    result = HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_BLOCK_DATA_BASE, 1, &buffer_data, 1, HAL_MAX_DELAY);
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	2301      	movs	r3, #1
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	f107 030b 	add.w	r3, r7, #11
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2301      	movs	r3, #1
 8001424:	2240      	movs	r2, #64	@ 0x40
 8001426:	2110      	movs	r1, #16
 8001428:	485d      	ldr	r0, [pc, #372]	@ (80015a0 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 800142a:	f004 fb37 	bl	8005a9c <HAL_I2C_Mem_Read>
 800142e:	4603      	mov	r3, r0
 8001430:	613b      	str	r3, [r7, #16]
    if (result == HAL_OK) {
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d108      	bne.n	800144a <BQ76952_ReadTemperatureThresholds+0x16e>
      System_SendErrorMessage(buffer_data);  // Show min temp data
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	4618      	mov	r0, r3
 800143c:	f001 fc2c 	bl	8002c98 <System_SendErrorMessage>
      *min_temp_c = (int8_t)buffer_data;
 8001440:	7afb      	ldrb	r3, [r7, #11]
 8001442:	b25a      	sxtb	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	701a      	strb	r2, [r3, #0]
      break;  // Success, exit retry loop
 8001448:	e016      	b.n	8001478 <BQ76952_ReadTemperatureThresholds+0x19c>
    } else if (retry_attempt == 0) {
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <BQ76952_ReadTemperatureThresholds+0x180>
      BQ76952_ResetCommState();
 8001450:	f7ff feee 	bl	8001230 <BQ76952_ResetCommState>
      HAL_Delay(200);
 8001454:	20c8      	movs	r0, #200	@ 0xc8
 8001456:	f001 fcdd 	bl	8002e14 <HAL_Delay>
 800145a:	e006      	b.n	800146a <BQ76952_ReadTemperatureThresholds+0x18e>
      // Continue to retry
    } else {
      System_SendErrorMessage(0xFC);  // Final buffer read failure
 800145c:	20fc      	movs	r0, #252	@ 0xfc
 800145e:	f001 fc1b 	bl	8002c98 <System_SendErrorMessage>
      BQ76952_ResetCommState();
 8001462:	f7ff fee5 	bl	8001230 <BQ76952_ResetCommState>
      return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e095      	b.n	8001596 <BQ76952_ReadTemperatureThresholds+0x2ba>
  for (retry_attempt = 0; retry_attempt < 2; retry_attempt++) {
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	3301      	adds	r3, #1
 800146e:	75fb      	strb	r3, [r7, #23]
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b01      	cmp	r3, #1
 8001474:	f67f af7b 	bls.w	800136e <BQ76952_ReadTemperatureThresholds+0x92>
    }
  }
  
  // Clear state and wait before next operation
  BQ76952_ResetCommState();
 8001478:	f7ff feda 	bl	8001230 <BQ76952_ResetCommState>
  HAL_Delay(800);  // Even longer delay between operations
 800147c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001480:	f001 fcc8 	bl	8002e14 <HAL_Delay>
  
  // === Read OTC Threshold (Max Temp) with same retry logic ===
  for (retry_attempt = 0; retry_attempt < 2; retry_attempt++) {
 8001484:	2300      	movs	r3, #0
 8001486:	75fb      	strb	r3, [r7, #23]
 8001488:	e07e      	b.n	8001588 <BQ76952_ReadTemperatureThresholds+0x2ac>
    subcommand[0] = (uint8_t)(BQ76952_OTC_THRESHOLD & 0xFF);        
 800148a:	239a      	movs	r3, #154	@ 0x9a
 800148c:	723b      	strb	r3, [r7, #8]
    subcommand[1] = (uint8_t)((BQ76952_OTC_THRESHOLD >> 8) & 0xFF); 
 800148e:	2392      	movs	r3, #146	@ 0x92
 8001490:	727b      	strb	r3, [r7, #9]
    
    result = HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_LOW, 1, &subcommand[0], 1, HAL_MAX_DELAY);
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	2301      	movs	r3, #1
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2301      	movs	r3, #1
 80014a4:	223e      	movs	r2, #62	@ 0x3e
 80014a6:	2110      	movs	r1, #16
 80014a8:	483d      	ldr	r0, [pc, #244]	@ (80015a0 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 80014aa:	f004 f9e3 	bl	8005874 <HAL_I2C_Mem_Write>
 80014ae:	4603      	mov	r3, r0
 80014b0:	613b      	str	r3, [r7, #16]
    if (result != HAL_OK) {
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00f      	beq.n	80014d8 <BQ76952_ReadTemperatureThresholds+0x1fc>
      if (retry_attempt == 0) {
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d105      	bne.n	80014ca <BQ76952_ReadTemperatureThresholds+0x1ee>
        BQ76952_ResetCommState();
 80014be:	f7ff feb7 	bl	8001230 <BQ76952_ResetCommState>
        HAL_Delay(200);
 80014c2:	20c8      	movs	r0, #200	@ 0xc8
 80014c4:	f001 fca6 	bl	8002e14 <HAL_Delay>
        continue;
 80014c8:	e05b      	b.n	8001582 <BQ76952_ReadTemperatureThresholds+0x2a6>
      } else {
        System_SendErrorMessage(0xFA);
 80014ca:	20fa      	movs	r0, #250	@ 0xfa
 80014cc:	f001 fbe4 	bl	8002c98 <System_SendErrorMessage>
        BQ76952_ResetCommState();
 80014d0:	f7ff feae 	bl	8001230 <BQ76952_ResetCommState>
        return HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e05e      	b.n	8001596 <BQ76952_ReadTemperatureThresholds+0x2ba>
      }
    }
    
    HAL_Delay(30);
 80014d8:	201e      	movs	r0, #30
 80014da:	f001 fc9b 	bl	8002e14 <HAL_Delay>
    
    result = HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_HIGH, 1, &subcommand[1], 1, HAL_MAX_DELAY);
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	9302      	str	r3, [sp, #8]
 80014e4:	2301      	movs	r3, #1
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	3301      	adds	r3, #1
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	223f      	movs	r2, #63	@ 0x3f
 80014f4:	2110      	movs	r1, #16
 80014f6:	482a      	ldr	r0, [pc, #168]	@ (80015a0 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 80014f8:	f004 f9bc 	bl	8005874 <HAL_I2C_Mem_Write>
 80014fc:	4603      	mov	r3, r0
 80014fe:	613b      	str	r3, [r7, #16]
    if (result != HAL_OK) {
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00f      	beq.n	8001526 <BQ76952_ReadTemperatureThresholds+0x24a>
      if (retry_attempt == 0) {
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d105      	bne.n	8001518 <BQ76952_ReadTemperatureThresholds+0x23c>
        BQ76952_ResetCommState();
 800150c:	f7ff fe90 	bl	8001230 <BQ76952_ResetCommState>
        HAL_Delay(200);
 8001510:	20c8      	movs	r0, #200	@ 0xc8
 8001512:	f001 fc7f 	bl	8002e14 <HAL_Delay>
        continue;
 8001516:	e034      	b.n	8001582 <BQ76952_ReadTemperatureThresholds+0x2a6>
      } else {
        System_SendErrorMessage(0xF9);
 8001518:	20f9      	movs	r0, #249	@ 0xf9
 800151a:	f001 fbbd 	bl	8002c98 <System_SendErrorMessage>
        BQ76952_ResetCommState();
 800151e:	f7ff fe87 	bl	8001230 <BQ76952_ResetCommState>
        return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e037      	b.n	8001596 <BQ76952_ReadTemperatureThresholds+0x2ba>
      }
    }
    
    HAL_Delay(300);
 8001526:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800152a:	f001 fc73 	bl	8002e14 <HAL_Delay>
    
    result = HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_BLOCK_DATA_BASE, 1, &buffer_data, 1, HAL_MAX_DELAY);
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	2301      	movs	r3, #1
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	f107 030b 	add.w	r3, r7, #11
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2301      	movs	r3, #1
 8001540:	2240      	movs	r2, #64	@ 0x40
 8001542:	2110      	movs	r1, #16
 8001544:	4816      	ldr	r0, [pc, #88]	@ (80015a0 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 8001546:	f004 faa9 	bl	8005a9c <HAL_I2C_Mem_Read>
 800154a:	4603      	mov	r3, r0
 800154c:	613b      	str	r3, [r7, #16]
    if (result == HAL_OK) {
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10a      	bne.n	800156a <BQ76952_ReadTemperatureThresholds+0x28e>
      System_SendErrorMessage(buffer_data + 0x80);  // Show max temp data (with offset)
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	3b80      	subs	r3, #128	@ 0x80
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f001 fb9c 	bl	8002c98 <System_SendErrorMessage>
      *max_temp_c = (int8_t)buffer_data;
 8001560:	7afb      	ldrb	r3, [r7, #11]
 8001562:	b25a      	sxtb	r2, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	701a      	strb	r2, [r3, #0]
      break;  // Success
 8001568:	e012      	b.n	8001590 <BQ76952_ReadTemperatureThresholds+0x2b4>
    } else if (retry_attempt == 0) {
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d105      	bne.n	800157c <BQ76952_ReadTemperatureThresholds+0x2a0>
      BQ76952_ResetCommState();
 8001570:	f7ff fe5e 	bl	8001230 <BQ76952_ResetCommState>
      HAL_Delay(200);
 8001574:	20c8      	movs	r0, #200	@ 0xc8
 8001576:	f001 fc4d 	bl	8002e14 <HAL_Delay>
 800157a:	e002      	b.n	8001582 <BQ76952_ReadTemperatureThresholds+0x2a6>
      // Continue to retry
    } else {
      System_SendErrorMessage(0xF8);  // Final failure
 800157c:	20f8      	movs	r0, #248	@ 0xf8
 800157e:	f001 fb8b 	bl	8002c98 <System_SendErrorMessage>
  for (retry_attempt = 0; retry_attempt < 2; retry_attempt++) {
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	3301      	adds	r3, #1
 8001586:	75fb      	strb	r3, [r7, #23]
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	2b01      	cmp	r3, #1
 800158c:	f67f af7d 	bls.w	800148a <BQ76952_ReadTemperatureThresholds+0x1ae>
    }
  }
  
  // Final cleanup
  BQ76952_ResetCommState();
 8001590:	f7ff fe4e 	bl	8001230 <BQ76952_ResetCommState>
  
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000140 	.word	0x20000140

080015a4 <CAN_Config>:
/**
  * @brief  Configure CAN filter
  * @retval None
  */
void CAN_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;

  // Configure CAN Filter to accept all messages
  sFilterConfig.FilterBank = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80015ce:	230e      	movs	r3, #14
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80015d2:	463b      	mov	r3, r7
 80015d4:	4619      	mov	r1, r3
 80015d6:	480f      	ldr	r0, [pc, #60]	@ (8001614 <CAN_Config+0x70>)
 80015d8:	f002 ffd5 	bl	8004586 <HAL_CAN_ConfigFilter>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <CAN_Config+0x42>
    Error_Handler();
 80015e2:	f001 f9bb 	bl	800295c <Error_Handler>
  }

  // Configure TX Header for ADC telemetry messages
  TxHeader.StdId = CAN_ID_TELEMETRY_ADC;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <CAN_Config+0x74>)
 80015e8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80015ec:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x00;
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <CAN_Config+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <CAN_Config+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <CAN_Config+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <CAN_Config+0x74>)
 8001602:	2208      	movs	r2, #8
 8001604:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8001606:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <CAN_Config+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	751a      	strb	r2, [r3, #20]
}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	@ 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200000f4 	.word	0x200000f4
 8001618:	20000078 	.word	0x20000078

0800161c <CAN_TxStackVoltage>:
  * @brief  Send stack voltage over CAN telemetry
  * @param  stack_voltage_mv: Stack voltage in millivolts
  * @retval None
  */
void CAN_TxStackVoltage(uint16_t stack_voltage_mv)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	@ 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	80fb      	strh	r3, [r7, #6]
  CAN_TxHeaderTypeDef TxHeader_Stack;
  uint8_t TxData_Stack[8] = {0};
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
  uint32_t TxMailbox_Stack;
  
  // Configure TX Header for stack voltage telemetry message
  TxHeader_Stack.StdId = CAN_ID_TELEMETRY_STACK_VOLTAGE;
 8001630:	f240 6301 	movw	r3, #1537	@ 0x601
 8001634:	61bb      	str	r3, [r7, #24]
  TxHeader_Stack.ExtId = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  TxHeader_Stack.RTR = CAN_RTR_DATA;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
  TxHeader_Stack.IDE = CAN_ID_STD;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  TxHeader_Stack.DLC = 8;
 8001642:	2308      	movs	r3, #8
 8001644:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxHeader_Stack.TransmitGlobalTime = DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  
  // Pack stack voltage into first two bytes (little endian)
  TxData_Stack[0] = (uint8_t)(stack_voltage_mv & 0xFF);        // LSB
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	743b      	strb	r3, [r7, #16]
  TxData_Stack[1] = (uint8_t)((stack_voltage_mv >> 8) & 0xFF); // MSB
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	b29b      	uxth	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	747b      	strb	r3, [r7, #17]
  
  // Send CAN message
  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Stack, TxData_Stack, &TxMailbox_Stack) != HAL_OK) {
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	f107 0210 	add.w	r2, r7, #16
 8001664:	f107 0118 	add.w	r1, r7, #24
 8001668:	4805      	ldr	r0, [pc, #20]	@ (8001680 <CAN_TxStackVoltage+0x64>)
 800166a:	f003 f89a 	bl	80047a2 <HAL_CAN_AddTxMessage>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <CAN_TxStackVoltage+0x5c>
    Error_Handler();
 8001674:	f001 f972 	bl	800295c <Error_Handler>
  }
}
 8001678:	bf00      	nop
 800167a:	3730      	adds	r7, #48	@ 0x30
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200000f4 	.word	0x200000f4

08001684 <CAN_TxAllCellVoltagesMux>:
/**
  * @brief  Send all cell voltages using multiplexed format (4 cells per message, 4 mux values)
  * @retval None
  */
void CAN_TxAllCellVoltagesMux(void)
{
 8001684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001688:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 800168c:	af00      	add	r7, sp, #0
  CAN_TxHeaderTypeDef TxHeader_Cell;
  uint8_t TxData_Cell[8] = {0};
 800168e:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 8001692:	2300      	movs	r3, #0
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	6053      	str	r3, [r2, #4]
  uint32_t TxMailbox_Cell;
  uint16_t cell_voltages[16];
  
  // Read all cell voltages first
  for (uint8_t cell = 1; cell <= BQ76952_MAX_CELLS; cell++) {
 8001698:	2301      	movs	r3, #1
 800169a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 800169e:	e015      	b.n	80016cc <CAN_TxAllCellVoltagesMux+0x48>
    cell_voltages[cell - 1] = BQ76952_ReadCellVoltage(cell);
 80016a0:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80016a4:	1e5e      	subs	r6, r3, #1
 80016a6:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fc2e 	bl	8000f0c <BQ76952_ReadCellVoltage>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	0073      	lsls	r3, r6, #1
 80016b6:	3358      	adds	r3, #88	@ 0x58
 80016b8:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 80016bc:	440b      	add	r3, r1
 80016be:	f823 2c54 	strh.w	r2, [r3, #-84]
  for (uint8_t cell = 1; cell <= BQ76952_MAX_CELLS; cell++) {
 80016c2:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80016c6:	3301      	adds	r3, #1
 80016c8:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 80016cc:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80016d0:	2b10      	cmp	r3, #16
 80016d2:	d9e5      	bls.n	80016a0 <CAN_TxAllCellVoltagesMux+0x1c>
  }
  
  // Configure TX Header (same ID for all mux messages)
  TxHeader_Cell.StdId = CAN_ID_CELL_VOLTAGES;
 80016d4:	f240 6302 	movw	r3, #1538	@ 0x602
 80016d8:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  TxHeader_Cell.ExtId = 0x00;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  TxHeader_Cell.RTR = CAN_RTR_DATA;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  TxHeader_Cell.IDE = CAN_ID_STD;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  TxHeader_Cell.DLC = 8;
 80016ee:	2308      	movs	r3, #8
 80016f0:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  TxHeader_Cell.TransmitGlobalTime = DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3204 	strb.w	r3, [r7, #516]	@ 0x204
  
  // Send Cells 1-4 (mux index 0)
  // Format: [mux_index(2bits) | cell1_voltage(14bits) | cell2_voltage(14bits) | cell3_voltage(14bits) | cell4_voltage(14bits)]
  // Pack 4 x 14-bit values into 58 bits (7.25 bytes - fits in 8 bytes)
  uint64_t packed_data = 0;
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
  packed_data |= (uint64_t)0x00;  // Mux index 0 (2 bits)
  packed_data |= ((uint64_t)(cell_voltages[0] & 0x3FFF)) << 2;   // Cell 1 (14 bits)
 8001706:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	@ 0x1c4
 800170a:	b29b      	uxth	r3, r3
 800170c:	2200      	movs	r2, #0
 800170e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001712:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	f8d7 118c 	ldr.w	r1, [r7, #396]	@ 0x18c
 8001722:	008b      	lsls	r3, r1, #2
 8001724:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8001728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800172c:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8001730:	008a      	lsls	r2, r1, #2
 8001732:	fa1f fa82 	uxth.w	sl, r2
 8001736:	f04f 0b00 	mov.w	fp, #0
 800173a:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 800173e:	ea42 010a 	orr.w	r1, r2, sl
 8001742:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001746:	ea43 030b 	orr.w	r3, r3, fp
 800174a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800174e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001752:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[1] & 0x3FFF)) << 16;  // Cell 2 (14 bits)
 8001756:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 800175a:	b29b      	uxth	r3, r3
 800175c:	2200      	movs	r2, #0
 800175e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001762:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8001766:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 800176a:	460b      	mov	r3, r1
 800176c:	0c1b      	lsrs	r3, r3, #16
 800176e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001772:	460b      	mov	r3, r1
 8001774:	041b      	lsls	r3, r3, #16
 8001776:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800177a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800177e:	f023 4440 	bic.w	r4, r3, #3221225472	@ 0xc0000000
 8001782:	0c24      	lsrs	r4, r4, #16
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	2500      	movs	r5, #0
 8001788:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 800178c:	ea42 0104 	orr.w	r1, r2, r4
 8001790:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001794:	432b      	orrs	r3, r5
 8001796:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800179a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800179e:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[2] & 0x3FFF)) << 30;  // Cell 3 (14 bits)
 80017a2:	f8b7 31c8 	ldrh.w	r3, [r7, #456]	@ 0x1c8
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	2200      	movs	r2, #0
 80017aa:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80017ae:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80017b2:	e9d7 125c 	ldrd	r1, r2, [r7, #368]	@ 0x170
 80017b6:	460b      	mov	r3, r1
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80017be:	460b      	mov	r3, r1
 80017c0:	079b      	lsls	r3, r3, #30
 80017c2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80017c6:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 80017ca:	460b      	mov	r3, r1
 80017cc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80017d0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80017d4:	4613      	mov	r3, r2
 80017d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017da:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80017de:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80017e2:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80017e6:	4621      	mov	r1, r4
 80017e8:	4311      	orrs	r1, r2
 80017ea:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80017ee:	4629      	mov	r1, r5
 80017f0:	4319      	orrs	r1, r3
 80017f2:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 80017f6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 80017fa:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[3] & 0x3FFF)) << 44;  // Cell 4 (14 bits)
 80017fe:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	@ 0x1ca
 8001802:	b29b      	uxth	r3, r3
 8001804:	2200      	movs	r2, #0
 8001806:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800180a:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800181a:	030b      	lsls	r3, r1, #12
 800181c:	2200      	movs	r2, #0
 800181e:	f04f 0800 	mov.w	r8, #0
 8001822:	f023 497c 	bic.w	r9, r3, #4227858432	@ 0xfc000000
 8001826:	f429 697f 	bic.w	r9, r9, #4080	@ 0xff0
 800182a:	f029 090f 	bic.w	r9, r9, #15
 800182e:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001832:	ea42 0108 	orr.w	r1, r2, r8
 8001836:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001838:	ea43 0309 	orr.w	r3, r3, r9
 800183c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800183e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8001842:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  
  TxData_Cell[0] = (uint8_t)(packed_data & 0xFF);
 8001846:	f897 3208 	ldrb.w	r3, [r7, #520]	@ 0x208
 800184a:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
  TxData_Cell[1] = (uint8_t)((packed_data >> 8) & 0xFF);
 800184e:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001852:	f04f 0000 	mov.w	r0, #0
 8001856:	f04f 0100 	mov.w	r1, #0
 800185a:	0a10      	lsrs	r0, r2, #8
 800185c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001860:	0a19      	lsrs	r1, r3, #8
 8001862:	b2c3      	uxtb	r3, r0
 8001864:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
  TxData_Cell[2] = (uint8_t)((packed_data >> 16) & 0xFF);
 8001868:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 800186c:	f04f 0000 	mov.w	r0, #0
 8001870:	f04f 0100 	mov.w	r1, #0
 8001874:	0c10      	lsrs	r0, r2, #16
 8001876:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800187a:	0c19      	lsrs	r1, r3, #16
 800187c:	b2c3      	uxtb	r3, r0
 800187e:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
  TxData_Cell[3] = (uint8_t)((packed_data >> 24) & 0xFF);
 8001882:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	0e10      	lsrs	r0, r2, #24
 8001890:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001894:	0e19      	lsrs	r1, r3, #24
 8001896:	b2c3      	uxtb	r3, r0
 8001898:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
  TxData_Cell[4] = (uint8_t)((packed_data >> 32) & 0xFF);
 800189c:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80018a0:	f04f 0000 	mov.w	r0, #0
 80018a4:	f04f 0100 	mov.w	r1, #0
 80018a8:	0018      	movs	r0, r3
 80018aa:	2100      	movs	r1, #0
 80018ac:	b2c3      	uxtb	r3, r0
 80018ae:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
  TxData_Cell[5] = (uint8_t)((packed_data >> 40) & 0xFF);
 80018b2:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80018b6:	f04f 0000 	mov.w	r0, #0
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	0a18      	lsrs	r0, r3, #8
 80018c0:	2100      	movs	r1, #0
 80018c2:	b2c3      	uxtb	r3, r0
 80018c4:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  TxData_Cell[6] = (uint8_t)((packed_data >> 48) & 0xFF);
 80018c8:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80018cc:	f04f 0000 	mov.w	r0, #0
 80018d0:	f04f 0100 	mov.w	r1, #0
 80018d4:	0c18      	lsrs	r0, r3, #16
 80018d6:	2100      	movs	r1, #0
 80018d8:	b2c3      	uxtb	r3, r0
 80018da:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
  TxData_Cell[7] = (uint8_t)((packed_data >> 56) & 0xFF);
 80018de:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80018e2:	f04f 0000 	mov.w	r0, #0
 80018e6:	f04f 0100 	mov.w	r1, #0
 80018ea:	0e18      	lsrs	r0, r3, #24
 80018ec:	2100      	movs	r1, #0
 80018ee:	b2c3      	uxtb	r3, r0
 80018f0:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Cell, TxData_Cell, &TxMailbox_Cell);
 80018f4:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 80018f8:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 80018fc:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8001900:	48eb      	ldr	r0, [pc, #940]	@ (8001cb0 <CAN_TxAllCellVoltagesMux+0x62c>)
 8001902:	f002 ff4e 	bl	80047a2 <HAL_CAN_AddTxMessage>
  HAL_Delay(2);
 8001906:	2002      	movs	r0, #2
 8001908:	f001 fa84 	bl	8002e14 <HAL_Delay>
  
  // Send Cells 5-8 (mux index 1)
  packed_data = 0;
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
  packed_data |= (uint64_t)0x01;  // Mux index 1 (2 bits)
 8001918:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 800191c:	f042 0101 	orr.w	r1, r2, #1
 8001920:	6739      	str	r1, [r7, #112]	@ 0x70
 8001922:	677b      	str	r3, [r7, #116]	@ 0x74
 8001924:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8001928:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[4] & 0x3FFF)) << 2;   // Cell 5 (14 bits)
 800192c:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	@ 0x1cc
 8001930:	b29b      	uxth	r3, r3
 8001932:	2200      	movs	r2, #0
 8001934:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001938:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8001948:	4629      	mov	r1, r5
 800194a:	008b      	lsls	r3, r1, #2
 800194c:	4621      	mov	r1, r4
 800194e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001952:	4621      	mov	r1, r4
 8001954:	008a      	lsls	r2, r1, #2
 8001956:	b293      	uxth	r3, r2
 8001958:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001962:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001966:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 800196a:	4621      	mov	r1, r4
 800196c:	4311      	orrs	r1, r2
 800196e:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001970:	4629      	mov	r1, r5
 8001972:	4319      	orrs	r1, r3
 8001974:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001976:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 800197a:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[5] & 0x3FFF)) << 16;  // Cell 6 (14 bits)
 800197e:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	@ 0x1ce
 8001982:	b29b      	uxth	r3, r3
 8001984:	2200      	movs	r2, #0
 8001986:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800198a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 800198e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8001992:	460b      	mov	r3, r1
 8001994:	0c1b      	lsrs	r3, r3, #16
 8001996:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800199a:	460b      	mov	r3, r1
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80019a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019a6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80019aa:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80019ae:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80019b2:	0c1b      	lsrs	r3, r3, #16
 80019b4:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80019b8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80019c8:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80019cc:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 80019d0:	4621      	mov	r1, r4
 80019d2:	4311      	orrs	r1, r2
 80019d4:	6639      	str	r1, [r7, #96]	@ 0x60
 80019d6:	4629      	mov	r1, r5
 80019d8:	4319      	orrs	r1, r3
 80019da:	6679      	str	r1, [r7, #100]	@ 0x64
 80019dc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 80019e0:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[6] & 0x3FFF)) << 30;  // Cell 7 (14 bits)
 80019e4:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	@ 0x1d0
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2200      	movs	r2, #0
 80019ec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80019f0:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80019f4:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80019f8:	460b      	mov	r3, r1
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001a00:	460b      	mov	r3, r1
 8001a02:	079b      	lsls	r3, r3, #30
 8001a04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001a08:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001a12:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a16:	4613      	mov	r3, r2
 8001a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a20:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001a24:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8001a28:	4621      	mov	r1, r4
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001a2e:	4629      	mov	r1, r5
 8001a30:	4319      	orrs	r1, r3
 8001a32:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001a34:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8001a38:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[7] & 0x3FFF)) << 44;  // Cell 8 (14 bits)
 8001a3c:	f8b7 31d2 	ldrh.w	r3, [r7, #466]	@ 0x1d2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2200      	movs	r2, #0
 8001a44:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001a48:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8001a58:	030b      	lsls	r3, r1, #12
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 8001a62:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8001a66:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001a6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001a6e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001a72:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001a76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001a7a:	f023 030f 	bic.w	r3, r3, #15
 8001a7e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001a82:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001a86:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	@ 0x1b0
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	4311      	orrs	r1, r2
 8001a8e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001a90:	4629      	mov	r1, r5
 8001a92:	4319      	orrs	r1, r3
 8001a94:	6579      	str	r1, [r7, #84]	@ 0x54
 8001a96:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8001a9a:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  
  TxData_Cell[0] = (uint8_t)(packed_data & 0xFF);
 8001a9e:	f897 3208 	ldrb.w	r3, [r7, #520]	@ 0x208
 8001aa2:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
  TxData_Cell[1] = (uint8_t)((packed_data >> 8) & 0xFF);
 8001aa6:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001aaa:	f04f 0000 	mov.w	r0, #0
 8001aae:	f04f 0100 	mov.w	r1, #0
 8001ab2:	0a10      	lsrs	r0, r2, #8
 8001ab4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ab8:	0a19      	lsrs	r1, r3, #8
 8001aba:	b2c3      	uxtb	r3, r0
 8001abc:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
  TxData_Cell[2] = (uint8_t)((packed_data >> 16) & 0xFF);
 8001ac0:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	0c10      	lsrs	r0, r2, #16
 8001ace:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ad2:	0c19      	lsrs	r1, r3, #16
 8001ad4:	b2c3      	uxtb	r3, r0
 8001ad6:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
  TxData_Cell[3] = (uint8_t)((packed_data >> 24) & 0xFF);
 8001ada:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	0e10      	lsrs	r0, r2, #24
 8001ae8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001aec:	0e19      	lsrs	r1, r3, #24
 8001aee:	b2c3      	uxtb	r3, r0
 8001af0:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
  TxData_Cell[4] = (uint8_t)((packed_data >> 32) & 0xFF);
 8001af4:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001af8:	f04f 0000 	mov.w	r0, #0
 8001afc:	f04f 0100 	mov.w	r1, #0
 8001b00:	0018      	movs	r0, r3
 8001b02:	2100      	movs	r1, #0
 8001b04:	b2c3      	uxtb	r3, r0
 8001b06:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
  TxData_Cell[5] = (uint8_t)((packed_data >> 40) & 0xFF);
 8001b0a:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001b0e:	f04f 0000 	mov.w	r0, #0
 8001b12:	f04f 0100 	mov.w	r1, #0
 8001b16:	0a18      	lsrs	r0, r3, #8
 8001b18:	2100      	movs	r1, #0
 8001b1a:	b2c3      	uxtb	r3, r0
 8001b1c:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  TxData_Cell[6] = (uint8_t)((packed_data >> 48) & 0xFF);
 8001b20:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001b24:	f04f 0000 	mov.w	r0, #0
 8001b28:	f04f 0100 	mov.w	r1, #0
 8001b2c:	0c18      	lsrs	r0, r3, #16
 8001b2e:	2100      	movs	r1, #0
 8001b30:	b2c3      	uxtb	r3, r0
 8001b32:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
  TxData_Cell[7] = (uint8_t)((packed_data >> 56) & 0xFF);
 8001b36:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001b3a:	f04f 0000 	mov.w	r0, #0
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	0e18      	lsrs	r0, r3, #24
 8001b44:	2100      	movs	r1, #0
 8001b46:	b2c3      	uxtb	r3, r0
 8001b48:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Cell, TxData_Cell, &TxMailbox_Cell);
 8001b4c:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8001b50:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 8001b54:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8001b58:	4855      	ldr	r0, [pc, #340]	@ (8001cb0 <CAN_TxAllCellVoltagesMux+0x62c>)
 8001b5a:	f002 fe22 	bl	80047a2 <HAL_CAN_AddTxMessage>
  HAL_Delay(2);
 8001b5e:	2002      	movs	r0, #2
 8001b60:	f001 f958 	bl	8002e14 <HAL_Delay>
  
  // Send Cells 9-12 (mux index 2)
  packed_data = 0;
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
  packed_data |= (uint64_t)0x02;  // Mux index 2 (2 bits)
 8001b70:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001b74:	f042 0102 	orr.w	r1, r2, #2
 8001b78:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b7c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001b80:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[8] & 0x3FFF)) << 2;   // Cell 9 (14 bits)
 8001b84:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	@ 0x1d4
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001b90:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	008b      	lsls	r3, r1, #2
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001baa:	4621      	mov	r1, r4
 8001bac:	008a      	lsls	r2, r1, #2
 8001bae:	b293      	uxth	r3, r2
 8001bb0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001bba:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001bbe:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	4311      	orrs	r1, r2
 8001bc6:	6439      	str	r1, [r7, #64]	@ 0x40
 8001bc8:	4629      	mov	r1, r5
 8001bca:	4319      	orrs	r1, r3
 8001bcc:	6479      	str	r1, [r7, #68]	@ 0x44
 8001bce:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001bd2:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[9] & 0x3FFF)) << 16;  // Cell 10 (14 bits)
 8001bd6:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001be2:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001be6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8001bea:	460b      	mov	r3, r1
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	041b      	lsls	r3, r3, #16
 8001bf6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001bfe:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001c02:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001c06:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c0a:	0c1b      	lsrs	r3, r3, #16
 8001c0c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001c10:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c14:	041b      	lsls	r3, r3, #16
 8001c16:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001c20:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001c24:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8001c28:	4621      	mov	r1, r4
 8001c2a:	4311      	orrs	r1, r2
 8001c2c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c2e:	4629      	mov	r1, r5
 8001c30:	4319      	orrs	r1, r3
 8001c32:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8001c34:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001c38:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[10] & 0x3FFF)) << 30; // Cell 11 (14 bits)
 8001c3c:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	@ 0x1d8
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2200      	movs	r2, #0
 8001c44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001c48:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8001c50:	460b      	mov	r3, r1
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001c58:	460b      	mov	r3, r1
 8001c5a:	079b      	lsls	r3, r3, #30
 8001c5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001c60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8001c64:	460b      	mov	r3, r1
 8001c66:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001c6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001c6e:	4613      	mov	r3, r2
 8001c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001c78:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001c7c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001c80:	4621      	mov	r1, r4
 8001c82:	4311      	orrs	r1, r2
 8001c84:	6339      	str	r1, [r7, #48]	@ 0x30
 8001c86:	4629      	mov	r1, r5
 8001c88:	4319      	orrs	r1, r3
 8001c8a:	6379      	str	r1, [r7, #52]	@ 0x34
 8001c8c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001c90:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[11] & 0x3FFF)) << 44; // Cell 12 (14 bits)
 8001c94:	f8b7 31da 	ldrh.w	r3, [r7, #474]	@ 0x1da
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001ca0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	e002      	b.n	8001cb4 <CAN_TxAllCellVoltagesMux+0x630>
 8001cae:	bf00      	nop
 8001cb0:	200000f4 	.word	0x200000f4
 8001cb4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8001cb8:	030b      	lsls	r3, r1, #12
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 8001cc2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8001cc6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001cca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001cce:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001cd2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001cd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001cda:	f023 030f 	bic.w	r3, r3, #15
 8001cde:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001ce2:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001ce6:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8001cea:	4621      	mov	r1, r4
 8001cec:	4311      	orrs	r1, r2
 8001cee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	4319      	orrs	r1, r3
 8001cf4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8001cf6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001cfa:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  
  TxData_Cell[0] = (uint8_t)(packed_data & 0xFF);
 8001cfe:	f897 3208 	ldrb.w	r3, [r7, #520]	@ 0x208
 8001d02:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
  TxData_Cell[1] = (uint8_t)((packed_data >> 8) & 0xFF);
 8001d06:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001d0a:	f04f 0000 	mov.w	r0, #0
 8001d0e:	f04f 0100 	mov.w	r1, #0
 8001d12:	0a10      	lsrs	r0, r2, #8
 8001d14:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001d18:	0a19      	lsrs	r1, r3, #8
 8001d1a:	b2c3      	uxtb	r3, r0
 8001d1c:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
  TxData_Cell[2] = (uint8_t)((packed_data >> 16) & 0xFF);
 8001d20:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	0c10      	lsrs	r0, r2, #16
 8001d2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001d32:	0c19      	lsrs	r1, r3, #16
 8001d34:	b2c3      	uxtb	r3, r0
 8001d36:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
  TxData_Cell[3] = (uint8_t)((packed_data >> 24) & 0xFF);
 8001d3a:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001d3e:	f04f 0000 	mov.w	r0, #0
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	0e10      	lsrs	r0, r2, #24
 8001d48:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001d4c:	0e19      	lsrs	r1, r3, #24
 8001d4e:	b2c3      	uxtb	r3, r0
 8001d50:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
  TxData_Cell[4] = (uint8_t)((packed_data >> 32) & 0xFF);
 8001d54:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001d58:	f04f 0000 	mov.w	r0, #0
 8001d5c:	f04f 0100 	mov.w	r1, #0
 8001d60:	0018      	movs	r0, r3
 8001d62:	2100      	movs	r1, #0
 8001d64:	b2c3      	uxtb	r3, r0
 8001d66:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
  TxData_Cell[5] = (uint8_t)((packed_data >> 40) & 0xFF);
 8001d6a:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001d6e:	f04f 0000 	mov.w	r0, #0
 8001d72:	f04f 0100 	mov.w	r1, #0
 8001d76:	0a18      	lsrs	r0, r3, #8
 8001d78:	2100      	movs	r1, #0
 8001d7a:	b2c3      	uxtb	r3, r0
 8001d7c:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  TxData_Cell[6] = (uint8_t)((packed_data >> 48) & 0xFF);
 8001d80:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001d84:	f04f 0000 	mov.w	r0, #0
 8001d88:	f04f 0100 	mov.w	r1, #0
 8001d8c:	0c18      	lsrs	r0, r3, #16
 8001d8e:	2100      	movs	r1, #0
 8001d90:	b2c3      	uxtb	r3, r0
 8001d92:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
  TxData_Cell[7] = (uint8_t)((packed_data >> 56) & 0xFF);
 8001d96:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	f04f 0100 	mov.w	r1, #0
 8001da2:	0e18      	lsrs	r0, r3, #24
 8001da4:	2100      	movs	r1, #0
 8001da6:	b2c3      	uxtb	r3, r0
 8001da8:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Cell, TxData_Cell, &TxMailbox_Cell);
 8001dac:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8001db0:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 8001db4:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8001db8:	489a      	ldr	r0, [pc, #616]	@ (8002024 <CAN_TxAllCellVoltagesMux+0x9a0>)
 8001dba:	f002 fcf2 	bl	80047a2 <HAL_CAN_AddTxMessage>
  HAL_Delay(2);
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	f001 f828 	bl	8002e14 <HAL_Delay>
  
  // Send Cells 13-16 (mux index 3)
  packed_data = 0;
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
  packed_data |= (uint64_t)0x03;  // Mux index 3 (2 bits)
 8001dd0:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001dd4:	f042 0103 	orr.w	r1, r2, #3
 8001dd8:	6239      	str	r1, [r7, #32]
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ddc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001de0:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[12] & 0x3FFF)) << 2;  // Cell 13 (14 bits)
 8001de4:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	@ 0x1dc
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2200      	movs	r2, #0
 8001dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001df0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001e00:	4629      	mov	r1, r5
 8001e02:	008b      	lsls	r3, r1, #2
 8001e04:	4621      	mov	r1, r4
 8001e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	008a      	lsls	r2, r1, #2
 8001e0e:	b293      	uxth	r3, r2
 8001e10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001e1a:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001e1e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001e22:	4621      	mov	r1, r4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	61b9      	str	r1, [r7, #24]
 8001e28:	4629      	mov	r1, r5
 8001e2a:	4319      	orrs	r1, r3
 8001e2c:	61f9      	str	r1, [r7, #28]
 8001e2e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e32:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[13] & 0x3FFF)) << 16; // Cell 14 (14 bits)
 8001e36:	f8b7 31de 	ldrh.w	r3, [r7, #478]	@ 0x1de
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001e42:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001e46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001e52:	460b      	mov	r3, r1
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e5e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001e62:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001e66:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8001e6a:	0c1b      	lsrs	r3, r3, #16
 8001e6c:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001e70:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001e80:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001e84:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	@ 0x198
 8001e88:	4621      	mov	r1, r4
 8001e8a:	4311      	orrs	r1, r2
 8001e8c:	6139      	str	r1, [r7, #16]
 8001e8e:	4629      	mov	r1, r5
 8001e90:	4319      	orrs	r1, r3
 8001e92:	6179      	str	r1, [r7, #20]
 8001e94:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e98:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[14] & 0x3FFF)) << 30; // Cell 15 (14 bits)
 8001e9c:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	@ 0x1e0
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ea8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001eac:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001eb8:	460b      	mov	r3, r1
 8001eba:	079b      	lsls	r3, r3, #30
 8001ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001eca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ece:	4613      	mov	r3, r2
 8001ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001ed8:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001edc:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	4311      	orrs	r1, r2
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	4319      	orrs	r1, r3
 8001eea:	60f9      	str	r1, [r7, #12]
 8001eec:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ef0:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[15] & 0x3FFF)) << 44; // Cell 16 (14 bits)
 8001ef4:	f8b7 31e2 	ldrh.w	r3, [r7, #482]	@ 0x1e2
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2200      	movs	r2, #0
 8001efc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f00:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001f10:	030b      	lsls	r3, r1, #12
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 8001f1a:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8001f1e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001f22:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001f26:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f2a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001f2e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001f32:	f023 030f 	bic.w	r3, r3, #15
 8001f36:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001f3a:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001f3e:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 8001f42:	4621      	mov	r1, r4
 8001f44:	4311      	orrs	r1, r2
 8001f46:	6039      	str	r1, [r7, #0]
 8001f48:	4629      	mov	r1, r5
 8001f4a:	4319      	orrs	r1, r3
 8001f4c:	6079      	str	r1, [r7, #4]
 8001f4e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f52:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  
  TxData_Cell[0] = (uint8_t)(packed_data & 0xFF);
 8001f56:	f897 3208 	ldrb.w	r3, [r7, #520]	@ 0x208
 8001f5a:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
  TxData_Cell[1] = (uint8_t)((packed_data >> 8) & 0xFF);
 8001f5e:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	0a02      	lsrs	r2, r0, #8
 8001f6c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f70:	0a0b      	lsrs	r3, r1, #8
 8001f72:	b2d3      	uxtb	r3, r2
 8001f74:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
  TxData_Cell[2] = (uint8_t)((packed_data >> 16) & 0xFF);
 8001f78:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	0c02      	lsrs	r2, r0, #16
 8001f86:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f8a:	0c0b      	lsrs	r3, r1, #16
 8001f8c:	b2d3      	uxtb	r3, r2
 8001f8e:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
  TxData_Cell[3] = (uint8_t)((packed_data >> 24) & 0xFF);
 8001f92:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	0e02      	lsrs	r2, r0, #24
 8001fa0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fa4:	0e0b      	lsrs	r3, r1, #24
 8001fa6:	b2d3      	uxtb	r3, r2
 8001fa8:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
  TxData_Cell[4] = (uint8_t)((packed_data >> 32) & 0xFF);
 8001fac:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	000a      	movs	r2, r1
 8001fba:	2300      	movs	r3, #0
 8001fbc:	b2d3      	uxtb	r3, r2
 8001fbe:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
  TxData_Cell[5] = (uint8_t)((packed_data >> 40) & 0xFF);
 8001fc2:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	0a0a      	lsrs	r2, r1, #8
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	b2d3      	uxtb	r3, r2
 8001fd4:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  TxData_Cell[6] = (uint8_t)((packed_data >> 48) & 0xFF);
 8001fd8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	0c0a      	lsrs	r2, r1, #16
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	b2d3      	uxtb	r3, r2
 8001fea:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
  TxData_Cell[7] = (uint8_t)((packed_data >> 56) & 0xFF);
 8001fee:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	0e0a      	lsrs	r2, r1, #24
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	b2d3      	uxtb	r3, r2
 8002000:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Cell, TxData_Cell, &TxMailbox_Cell);
 8002004:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8002008:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 800200c:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8002010:	4804      	ldr	r0, [pc, #16]	@ (8002024 <CAN_TxAllCellVoltagesMux+0x9a0>)
 8002012:	f002 fbc6 	bl	80047a2 <HAL_CAN_AddTxMessage>
}
 8002016:	bf00      	nop
 8002018:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 800201c:	46bd      	mov	sp, r7
 800201e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002022:	bf00      	nop
 8002024:	200000f4 	.word	0x200000f4

08002028 <CAN_SendErrorMessage>:
  * @brief  Send CAN error message
  * @param  error_code: Error code to send
  * @retval None
  */
void CAN_SendErrorMessage(uint8_t error_code) 
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08c      	sub	sp, #48	@ 0x30
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  CAN_TxHeaderTypeDef TxHeader_Error;
  uint8_t TxData_Error[8] = {0};
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
  uint32_t TxMailbox_Error;
  
  // Configure error message header
  TxHeader_Error.StdId = 0x7FE;  // Error message CAN ID
 800203c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8002040:	61bb      	str	r3, [r7, #24]
  TxHeader_Error.ExtId = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
  TxHeader_Error.RTR = CAN_RTR_DATA;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
  TxHeader_Error.IDE = CAN_ID_STD;
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
  TxHeader_Error.DLC = 1;  // Only send error code
 800204e:	2301      	movs	r3, #1
 8002050:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  TxData_Error[0] = error_code;
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	743b      	strb	r3, [r7, #16]
  
  // Send error message
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Error, TxData_Error, &TxMailbox_Error);
 8002056:	f107 030c 	add.w	r3, r7, #12
 800205a:	f107 0210 	add.w	r2, r7, #16
 800205e:	f107 0118 	add.w	r1, r7, #24
 8002062:	4803      	ldr	r0, [pc, #12]	@ (8002070 <CAN_SendErrorMessage+0x48>)
 8002064:	f002 fb9d 	bl	80047a2 <HAL_CAN_AddTxMessage>
}
 8002068:	bf00      	nop
 800206a:	3730      	adds	r7, #48	@ 0x30
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200000f4 	.word	0x200000f4

08002074 <CAN_SendHeartbeat>:
  * @brief  Send heartbeat message
  * @param  counter: Heartbeat counter value
  * @retval None
  */
void CAN_SendHeartbeat(uint32_t counter)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	@ 0x30
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  CAN_TxHeaderTypeDef TxHeader_Heartbeat;
  uint8_t TxData_Heartbeat[8] = {0xAA, 0xBB, 0xCC, 0xDD, 
 800207c:	23aa      	movs	r3, #170	@ 0xaa
 800207e:	743b      	strb	r3, [r7, #16]
 8002080:	23bb      	movs	r3, #187	@ 0xbb
 8002082:	747b      	strb	r3, [r7, #17]
 8002084:	23cc      	movs	r3, #204	@ 0xcc
 8002086:	74bb      	strb	r3, [r7, #18]
 8002088:	23dd      	movs	r3, #221	@ 0xdd
 800208a:	74fb      	strb	r3, [r7, #19]
                                 (uint8_t)(counter & 0xFF), 
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	b2db      	uxtb	r3, r3
  uint8_t TxData_Heartbeat[8] = {0xAA, 0xBB, 0xCC, 0xDD, 
 8002090:	753b      	strb	r3, [r7, #20]
                                 (uint8_t)((counter >> 8) & 0xFF), 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	b2db      	uxtb	r3, r3
  uint8_t TxData_Heartbeat[8] = {0xAA, 0xBB, 0xCC, 0xDD, 
 8002098:	757b      	strb	r3, [r7, #21]
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <CAN_SendHeartbeat+0x68>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	75bb      	strb	r3, [r7, #22]
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
                                 can_rx_flag, 0x00};
  uint32_t TxMailbox_Heartbeat;
  
  TxHeader_Heartbeat.StdId = CAN_ID_TELEMETRY_HEARTBEAT;  // New organized heartbeat ID
 80020a6:	f240 6303 	movw	r3, #1539	@ 0x603
 80020aa:	61bb      	str	r3, [r7, #24]
  TxHeader_Heartbeat.ExtId = 0x00;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
  TxHeader_Heartbeat.RTR = CAN_RTR_DATA;
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
  TxHeader_Heartbeat.IDE = CAN_ID_STD;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
  TxHeader_Heartbeat.DLC = 8;
 80020b8:	2308      	movs	r3, #8
 80020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxHeader_Heartbeat.TransmitGlobalTime = DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Heartbeat, TxData_Heartbeat, &TxMailbox_Heartbeat);
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	f107 0210 	add.w	r2, r7, #16
 80020ca:	f107 0118 	add.w	r1, r7, #24
 80020ce:	4804      	ldr	r0, [pc, #16]	@ (80020e0 <CAN_SendHeartbeat+0x6c>)
 80020d0:	f002 fb67 	bl	80047a2 <HAL_CAN_AddTxMessage>
}
 80020d4:	bf00      	nop
 80020d6:	3730      	adds	r7, #48	@ 0x30
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000019c 	.word	0x2000019c
 80020e0:	200000f4 	.word	0x200000f4

080020e4 <CAN_TxAllThermistorsMux>:
  * @brief  Send all thermistor temperatures in two multiplexed CAN messages
  * @param  temperatures: Array of 8 temperature values in Celsius
  * @retval None
  */
void CAN_TxAllThermistorsMux(float *temperatures)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b090      	sub	sp, #64	@ 0x40
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  CAN_TxHeaderTypeDef TxHeader_Therm;
  uint8_t TxData_Therm[8];
  uint32_t TxMailbox_Therm;
  
  // Configure common header settings
  TxHeader_Therm.ExtId = 0x00;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
  TxHeader_Therm.RTR = CAN_RTR_DATA;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
  TxHeader_Therm.IDE = CAN_ID_STD;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
  TxHeader_Therm.DLC = 8;
 80020f8:	2308      	movs	r3, #8
 80020fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxHeader_Therm.TransmitGlobalTime = DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  
  // Send thermistors 1-4 (channels 0-3)
  TxHeader_Therm.StdId = CAN_ID_THERMISTOR_TEMPS_1_4;
 8002102:	f240 6304 	movw	r3, #1540	@ 0x604
 8002106:	61bb      	str	r3, [r7, #24]
  
  // Convert temperatures to signed 16-bit integers (scaled by 10 for 0.1°C resolution)
  int16_t temp1 = (int16_t)(temperatures[0] * 10.0f);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211a:	ee17 3a90 	vmov	r3, s15
 800211e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  int16_t temp2 = (int16_t)(temperatures[1] * 10.0f);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3304      	adds	r3, #4
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800212c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002134:	ee17 3a90 	vmov	r3, s15
 8002138:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  int16_t temp3 = (int16_t)(temperatures[2] * 10.0f);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3308      	adds	r3, #8
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800214a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800214e:	ee17 3a90 	vmov	r3, s15
 8002152:	877b      	strh	r3, [r7, #58]	@ 0x3a
  int16_t temp4 = (int16_t)(temperatures[3] * 10.0f);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	330c      	adds	r3, #12
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002168:	ee17 3a90 	vmov	r3, s15
 800216c:	873b      	strh	r3, [r7, #56]	@ 0x38
  
  TxData_Therm[0] = (uint8_t)(temp1 & 0xFF);
 800216e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002170:	b2db      	uxtb	r3, r3
 8002172:	743b      	strb	r3, [r7, #16]
  TxData_Therm[1] = (uint8_t)((temp1 >> 8) & 0xFF);
 8002174:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002178:	121b      	asrs	r3, r3, #8
 800217a:	b21b      	sxth	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	747b      	strb	r3, [r7, #17]
  TxData_Therm[2] = (uint8_t)(temp2 & 0xFF);
 8002180:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002182:	b2db      	uxtb	r3, r3
 8002184:	74bb      	strb	r3, [r7, #18]
  TxData_Therm[3] = (uint8_t)((temp2 >> 8) & 0xFF);
 8002186:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800218a:	121b      	asrs	r3, r3, #8
 800218c:	b21b      	sxth	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	74fb      	strb	r3, [r7, #19]
  TxData_Therm[4] = (uint8_t)(temp3 & 0xFF);
 8002192:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002194:	b2db      	uxtb	r3, r3
 8002196:	753b      	strb	r3, [r7, #20]
  TxData_Therm[5] = (uint8_t)((temp3 >> 8) & 0xFF);
 8002198:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800219c:	121b      	asrs	r3, r3, #8
 800219e:	b21b      	sxth	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	757b      	strb	r3, [r7, #21]
  TxData_Therm[6] = (uint8_t)(temp4 & 0xFF);
 80021a4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	75bb      	strb	r3, [r7, #22]
  TxData_Therm[7] = (uint8_t)((temp4 >> 8) & 0xFF);
 80021aa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80021ae:	121b      	asrs	r3, r3, #8
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	75fb      	strb	r3, [r7, #23]
  
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Therm, TxData_Therm, &TxMailbox_Therm);
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	f107 0210 	add.w	r2, r7, #16
 80021be:	f107 0118 	add.w	r1, r7, #24
 80021c2:	4837      	ldr	r0, [pc, #220]	@ (80022a0 <CAN_TxAllThermistorsMux+0x1bc>)
 80021c4:	f002 faed 	bl	80047a2 <HAL_CAN_AddTxMessage>
  HAL_Delay(2);  // Small delay between messages
 80021c8:	2002      	movs	r0, #2
 80021ca:	f000 fe23 	bl	8002e14 <HAL_Delay>
  
  // Send thermistors 5-8 (channels 4-7)
  TxHeader_Therm.StdId = CAN_ID_THERMISTOR_TEMPS_5_8;
 80021ce:	f240 6305 	movw	r3, #1541	@ 0x605
 80021d2:	61bb      	str	r3, [r7, #24]
  
  int16_t temp5 = (int16_t)(temperatures[4] * 10.0f);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3310      	adds	r3, #16
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80021e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e8:	ee17 3a90 	vmov	r3, s15
 80021ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
  int16_t temp6 = (int16_t)(temperatures[5] * 10.0f);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3314      	adds	r3, #20
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80021fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002202:	ee17 3a90 	vmov	r3, s15
 8002206:	86bb      	strh	r3, [r7, #52]	@ 0x34
  int16_t temp7 = (int16_t)(temperatures[6] * 10.0f);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3318      	adds	r3, #24
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800221c:	ee17 3a90 	vmov	r3, s15
 8002220:	867b      	strh	r3, [r7, #50]	@ 0x32
  int16_t temp8 = (int16_t)(temperatures[7] * 10.0f);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	331c      	adds	r3, #28
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800222e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002236:	ee17 3a90 	vmov	r3, s15
 800223a:	863b      	strh	r3, [r7, #48]	@ 0x30
  
  TxData_Therm[0] = (uint8_t)(temp5 & 0xFF);
 800223c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800223e:	b2db      	uxtb	r3, r3
 8002240:	743b      	strb	r3, [r7, #16]
  TxData_Therm[1] = (uint8_t)((temp5 >> 8) & 0xFF);
 8002242:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002246:	121b      	asrs	r3, r3, #8
 8002248:	b21b      	sxth	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	747b      	strb	r3, [r7, #17]
  TxData_Therm[2] = (uint8_t)(temp6 & 0xFF);
 800224e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002250:	b2db      	uxtb	r3, r3
 8002252:	74bb      	strb	r3, [r7, #18]
  TxData_Therm[3] = (uint8_t)((temp6 >> 8) & 0xFF);
 8002254:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002258:	121b      	asrs	r3, r3, #8
 800225a:	b21b      	sxth	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	74fb      	strb	r3, [r7, #19]
  TxData_Therm[4] = (uint8_t)(temp7 & 0xFF);
 8002260:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002262:	b2db      	uxtb	r3, r3
 8002264:	753b      	strb	r3, [r7, #20]
  TxData_Therm[5] = (uint8_t)((temp7 >> 8) & 0xFF);
 8002266:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800226a:	121b      	asrs	r3, r3, #8
 800226c:	b21b      	sxth	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	757b      	strb	r3, [r7, #21]
  TxData_Therm[6] = (uint8_t)(temp8 & 0xFF);
 8002272:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002274:	b2db      	uxtb	r3, r3
 8002276:	75bb      	strb	r3, [r7, #22]
  TxData_Therm[7] = (uint8_t)((temp8 >> 8) & 0xFF);
 8002278:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800227c:	121b      	asrs	r3, r3, #8
 800227e:	b21b      	sxth	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	75fb      	strb	r3, [r7, #23]
  
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Therm, TxData_Therm, &TxMailbox_Therm);
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	f107 0210 	add.w	r2, r7, #16
 800228c:	f107 0118 	add.w	r1, r7, #24
 8002290:	4803      	ldr	r0, [pc, #12]	@ (80022a0 <CAN_TxAllThermistorsMux+0x1bc>)
 8002292:	f002 fa86 	bl	80047a2 <HAL_CAN_AddTxMessage>
}
 8002296:	bf00      	nop
 8002298:	3740      	adds	r7, #64	@ 0x40
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200000f4 	.word	0x200000f4

080022a4 <CAN_ProcessTemperatureRequests>:
/**
  * @brief  Process temperature-related CAN requests
  * @retval None
  */
void CAN_ProcessTemperatureRequests(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b096      	sub	sp, #88	@ 0x58
 80022a8:	af00      	add	r7, sp, #0
  // Check if we received a temperature threshold write command (new or legacy)
  if (new_7ff_message == 1) {
 80022aa:	4b4c      	ldr	r3, [pc, #304]	@ (80023dc <CAN_ProcessTemperatureRequests+0x138>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d14d      	bne.n	8002350 <CAN_ProcessTemperatureRequests+0xac>
    new_7ff_message = 0; // Clear flag
 80022b4:	4b49      	ldr	r3, [pc, #292]	@ (80023dc <CAN_ProcessTemperatureRequests+0x138>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
    
    // Extract temperature values from received message
    int8_t min_temp = (int8_t)last_7ff_data[0];  // Byte 0: Min temperature
 80022ba:	4b49      	ldr	r3, [pc, #292]	@ (80023e0 <CAN_ProcessTemperatureRequests+0x13c>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    int8_t max_temp = (int8_t)last_7ff_data[1];  // Byte 1: Max temperature
 80022c4:	4b46      	ldr	r3, [pc, #280]	@ (80023e0 <CAN_ProcessTemperatureRequests+0x13c>)
 80022c6:	785b      	ldrb	r3, [r3, #1]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    CAN_TxHeaderTypeDef TxHeader_WriteResp;
    uint8_t TxData_WriteResp[8];
    uint32_t TxMailbox_WriteResp;
    
    // Try to set temperature thresholds
    if (BQ76952_SetTemperatureThresholds(min_temp, max_temp) == HAL_OK) {
 80022ce:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 80022d2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe ff53 	bl	8001184 <BQ76952_SetTemperatureThresholds>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10f      	bne.n	8002304 <CAN_ProcessTemperatureRequests+0x60>
      // Send success reply message (all 0xFF)
      for (int i = 0; i < 8; i++) {
 80022e4:	2300      	movs	r3, #0
 80022e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80022e8:	e008      	b.n	80022fc <CAN_ProcessTemperatureRequests+0x58>
        TxData_WriteResp[i] = 0xFF;
 80022ea:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80022ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f0:	4413      	add	r3, r2
 80022f2:	22ff      	movs	r2, #255	@ 0xff
 80022f4:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 8; i++) {
 80022f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f8:	3301      	adds	r3, #1
 80022fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80022fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022fe:	2b07      	cmp	r3, #7
 8002300:	ddf3      	ble.n	80022ea <CAN_ProcessTemperatureRequests+0x46>
 8002302:	e00e      	b.n	8002322 <CAN_ProcessTemperatureRequests+0x7e>
      }
    } else {
      // Send failure reply message (all 0x00)  
      for (int i = 0; i < 8; i++) {
 8002304:	2300      	movs	r3, #0
 8002306:	653b      	str	r3, [r7, #80]	@ 0x50
 8002308:	e008      	b.n	800231c <CAN_ProcessTemperatureRequests+0x78>
        TxData_WriteResp[i] = 0x00;
 800230a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800230e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002310:	4413      	add	r3, r2
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 8; i++) {
 8002316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002318:	3301      	adds	r3, #1
 800231a:	653b      	str	r3, [r7, #80]	@ 0x50
 800231c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800231e:	2b07      	cmp	r3, #7
 8002320:	ddf3      	ble.n	800230a <CAN_ProcessTemperatureRequests+0x66>
      }
    }
    
    // Configure and send reply message on new organized response ID
    TxHeader_WriteResp.StdId = CAN_ID_WRITE_TEMP_THRESHOLDS_RESP;
 8002322:	f240 1307 	movw	r3, #263	@ 0x107
 8002326:	637b      	str	r3, [r7, #52]	@ 0x34
    TxHeader_WriteResp.ExtId = 0x00;
 8002328:	2300      	movs	r3, #0
 800232a:	63bb      	str	r3, [r7, #56]	@ 0x38
    TxHeader_WriteResp.RTR = CAN_RTR_DATA;
 800232c:	2300      	movs	r3, #0
 800232e:	643b      	str	r3, [r7, #64]	@ 0x40
    TxHeader_WriteResp.IDE = CAN_ID_STD;
 8002330:	2300      	movs	r3, #0
 8002332:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TxHeader_WriteResp.DLC = 8;
 8002334:	2308      	movs	r3, #8
 8002336:	647b      	str	r3, [r7, #68]	@ 0x44
    TxHeader_WriteResp.TransmitGlobalTime = DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    
    HAL_CAN_AddTxMessage(&hcan1, &TxHeader_WriteResp, TxData_WriteResp, &TxMailbox_WriteResp);
 800233e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002342:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002346:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800234a:	4826      	ldr	r0, [pc, #152]	@ (80023e4 <CAN_ProcessTemperatureRequests+0x140>)
 800234c:	f002 fa29 	bl	80047a2 <HAL_CAN_AddTxMessage>
  }
  
  // Check if we received a read temperature thresholds request
  if (new_read_temp_request == 1) {
 8002350:	4b25      	ldr	r3, [pc, #148]	@ (80023e8 <CAN_ProcessTemperatureRequests+0x144>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d13b      	bne.n	80023d2 <CAN_ProcessTemperatureRequests+0x12e>
    new_read_temp_request = 0; // Clear flag
 800235a:	4b23      	ldr	r3, [pc, #140]	@ (80023e8 <CAN_ProcessTemperatureRequests+0x144>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
    
    CAN_TxHeaderTypeDef TxHeader_ReadResp;
    uint8_t TxData_ReadResp[8] = {0};
 8002360:	f107 0308 	add.w	r3, r7, #8
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
    uint32_t TxMailbox_ReadResp;
    
    int8_t current_min_temp = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	70fb      	strb	r3, [r7, #3]
    int8_t current_max_temp = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	70bb      	strb	r3, [r7, #2]
    
    // Try to read current temperature thresholds from BMS
    if (BQ76952_ReadTemperatureThresholds(&current_min_temp, &current_max_temp) == HAL_OK) {
 8002372:	1cba      	adds	r2, r7, #2
 8002374:	1cfb      	adds	r3, r7, #3
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe ffaf 	bl	80012dc <BQ76952_ReadTemperatureThresholds>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <CAN_ProcessTemperatureRequests+0xf6>
      // Pack current thresholds in response
      TxData_ReadResp[0] = (uint8_t)current_min_temp;  // Byte 0: Current min temperature
 8002384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	723b      	strb	r3, [r7, #8]
      TxData_ReadResp[1] = (uint8_t)current_max_temp;  // Byte 1: Current max temperature
 800238c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	727b      	strb	r3, [r7, #9]
      TxData_ReadResp[2] = 0x01;  // Byte 2: Success flag
 8002394:	2301      	movs	r3, #1
 8002396:	72bb      	strb	r3, [r7, #10]
 8002398:	e005      	b.n	80023a6 <CAN_ProcessTemperatureRequests+0x102>
      // Bytes 3-7: Reserved/unused
    } else {
      // Send error response
      TxData_ReadResp[0] = 0x00;  // Byte 0: Error value
 800239a:	2300      	movs	r3, #0
 800239c:	723b      	strb	r3, [r7, #8]
      TxData_ReadResp[1] = 0x00;  // Byte 1: Error value  
 800239e:	2300      	movs	r3, #0
 80023a0:	727b      	strb	r3, [r7, #9]
      TxData_ReadResp[2] = 0x00;  // Byte 2: Error flag
 80023a2:	2300      	movs	r3, #0
 80023a4:	72bb      	strb	r3, [r7, #10]
      // Bytes 3-7: Reserved/unused
    }
    
    // Configure and send response message
    TxHeader_ReadResp.StdId = CAN_ID_READ_TEMP_THRESHOLDS_RESP;
 80023a6:	f240 1305 	movw	r3, #261	@ 0x105
 80023aa:	613b      	str	r3, [r7, #16]
    TxHeader_ReadResp.ExtId = 0x00;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
    TxHeader_ReadResp.RTR = CAN_RTR_DATA;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
    TxHeader_ReadResp.IDE = CAN_ID_STD;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    TxHeader_ReadResp.DLC = 8;
 80023b8:	2308      	movs	r3, #8
 80023ba:	623b      	str	r3, [r7, #32]
    TxHeader_ReadResp.TransmitGlobalTime = DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    
    HAL_CAN_AddTxMessage(&hcan1, &TxHeader_ReadResp, TxData_ReadResp, &TxMailbox_ReadResp);
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	f107 0208 	add.w	r2, r7, #8
 80023c8:	f107 0110 	add.w	r1, r7, #16
 80023cc:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <CAN_ProcessTemperatureRequests+0x140>)
 80023ce:	f002 f9e8 	bl	80047a2 <HAL_CAN_AddTxMessage>
  }
}
 80023d2:	bf00      	nop
 80023d4:	3758      	adds	r7, #88	@ 0x58
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200001a8 	.word	0x200001a8
 80023e0:	200001a0 	.word	0x200001a0
 80023e4:	200000f4 	.word	0x200000f4
 80023e8:	200001a9 	.word	0x200001a9

080023ec <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief  CAN Receive Callback - handles incoming temperature threshold commands
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	@ 0x38
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef RxHeader_Temp;
  uint8_t RxData_Temp[8];
  
  // Set debug flag to indicate RX callback was triggered
  can_rx_flag = 1;
 80023f4:	4b2a      	ldr	r3, [pc, #168]	@ (80024a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
  
  // Simply clear the FIFO without any complex processing
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader_Temp, RxData_Temp);
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	f107 0214 	add.w	r2, r7, #20
 8002402:	2100      	movs	r1, #0
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f002 fa9c 	bl	8004942 <HAL_CAN_GetRxMessage>
  
  // Check for new organized write temperature threshold command
  if (RxHeader_Temp.StdId == CAN_ID_WRITE_TEMP_THRESHOLDS_REQ) {
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8002410:	d119      	bne.n	8002446 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
    can_rx_flag = 2;  // Special value to indicate write command was received
 8002412:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8002414:	2202      	movs	r2, #2
 8002416:	701a      	strb	r2, [r3, #0]
    // Copy message data for main loop to process
    for (int i = 0; i < 8; i++) {
 8002418:	2300      	movs	r3, #0
 800241a:	637b      	str	r3, [r7, #52]	@ 0x34
 800241c:	e00c      	b.n	8002438 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
      last_7ff_data[i] = RxData_Temp[i];
 800241e:	f107 020c 	add.w	r2, r7, #12
 8002422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002424:	4413      	add	r3, r2
 8002426:	7819      	ldrb	r1, [r3, #0]
 8002428:	4a1e      	ldr	r2, [pc, #120]	@ (80024a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800242a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800242c:	4413      	add	r3, r2
 800242e:	460a      	mov	r2, r1
 8002430:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8002432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002434:	3301      	adds	r3, #1
 8002436:	637b      	str	r3, [r7, #52]	@ 0x34
 8002438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243a:	2b07      	cmp	r3, #7
 800243c:	ddef      	ble.n	800241e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
    }
    new_7ff_message = 1;  // Flag for main loop
 800243e:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
    }
    new_7ff_message = 1;  // Flag for main loop
  }
  
  // Don't try to transmit from within interrupt - let main loop handle it
}
 8002444:	e028      	b.n	8002498 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
  else if (RxHeader_Temp.StdId == CAN_ID_READ_TEMP_THRESHOLDS_REQ) {
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800244c:	d106      	bne.n	800245c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
    can_rx_flag = 3;  // Special value to indicate read command was received
 800244e:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8002450:	2203      	movs	r2, #3
 8002452:	701a      	strb	r2, [r3, #0]
    new_read_temp_request = 1;  // Flag for main loop
 8002454:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
}
 800245a:	e01d      	b.n	8002498 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
  else if (RxHeader_Temp.StdId == CAN_ID_LEGACY_TEMP_THRESHOLDS) {
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f240 7201 	movw	r2, #1793	@ 0x701
 8002462:	4293      	cmp	r3, r2
 8002464:	d118      	bne.n	8002498 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
    can_rx_flag = 2;  // Special value to indicate legacy 7FF was received
 8002466:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8002468:	2202      	movs	r2, #2
 800246a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002470:	e00c      	b.n	800248c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
      last_7ff_data[i] = RxData_Temp[i];
 8002472:	f107 020c 	add.w	r2, r7, #12
 8002476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002478:	4413      	add	r3, r2
 800247a:	7819      	ldrb	r1, [r3, #0]
 800247c:	4a09      	ldr	r2, [pc, #36]	@ (80024a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	4413      	add	r3, r2
 8002482:	460a      	mov	r2, r1
 8002484:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8002486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002488:	3301      	adds	r3, #1
 800248a:	633b      	str	r3, [r7, #48]	@ 0x30
 800248c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248e:	2b07      	cmp	r3, #7
 8002490:	ddef      	ble.n	8002472 <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
    new_7ff_message = 1;  // Flag for main loop
 8002492:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
}
 8002498:	bf00      	nop
 800249a:	3738      	adds	r7, #56	@ 0x38
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	2000019c 	.word	0x2000019c
 80024a4:	200001a0 	.word	0x200001a0
 80024a8:	200001a8 	.word	0x200001a8
 80024ac:	200001a9 	.word	0x200001a9

080024b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b092      	sub	sp, #72	@ 0x48
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024b6:	f000 fc38 	bl	8002d2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024ba:	f000 f8b7 	bl	800262c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024be:	f000 f9f7 	bl	80028b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80024c2:	f000 f8f9 	bl	80026b8 <MX_ADC1_Init>
  MX_CAN1_Init();
 80024c6:	f000 f95b 	bl	8002780 <MX_CAN1_Init>
  MX_CRC_Init();
 80024ca:	f000 f98f 	bl	80027ec <MX_CRC_Init>
  MX_I2C1_Init();
 80024ce:	f000 f9af 	bl	8002830 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  
  // Configure CAN
  CAN_Config();
 80024d2:	f7ff f867 	bl	80015a4 <CAN_Config>
  
  // Start CAN
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80024d6:	484e      	ldr	r0, [pc, #312]	@ (8002610 <main+0x160>)
 80024d8:	f002 f91f 	bl	800471a <HAL_CAN_Start>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <main+0x36>
    Error_Handler();
 80024e2:	f000 fa3b 	bl	800295c <Error_Handler>
  }
  
  // Enable CAN RX interrupt for receiving temperature threshold commands
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80024e6:	2102      	movs	r1, #2
 80024e8:	4849      	ldr	r0, [pc, #292]	@ (8002610 <main+0x160>)
 80024ea:	f002 fb4c 	bl	8004b86 <HAL_CAN_ActivateNotification>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <main+0x48>
    Error_Handler();
 80024f4:	f000 fa32 	bl	800295c <Error_Handler>
  }
  
  // Enable CAN TX interrupt for transmission complete notifications
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 80024f8:	2101      	movs	r1, #1
 80024fa:	4845      	ldr	r0, [pc, #276]	@ (8002610 <main+0x160>)
 80024fc:	f002 fb43 	bl	8004b86 <HAL_CAN_ActivateNotification>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <main+0x5a>
    Error_Handler();
 8002506:	f000 fa29 	bl	800295c <Error_Handler>
  }
  
  // Calibrate ADC
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 800250a:	217f      	movs	r1, #127	@ 0x7f
 800250c:	4841      	ldr	r0, [pc, #260]	@ (8002614 <main+0x164>)
 800250e:	f001 fedf 	bl	80042d0 <HAL_ADCEx_Calibration_Start>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <main+0x6c>
    Error_Handler();
 8002518:	f000 fa20 	bl	800295c <Error_Handler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    // Spread the heavy processing across multiple cycles to avoid timing hiccups
    uint8_t cycle_phase = thermistor_counter % 10;  // Changed to 10-cycle pattern for 0.1sec temp updates
 800251c:	4b3e      	ldr	r3, [pc, #248]	@ (8002618 <main+0x168>)
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	4b3e      	ldr	r3, [pc, #248]	@ (800261c <main+0x16c>)
 8002522:	fba3 2301 	umull	r2, r3, r3, r1
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	1aca      	subs	r2, r1, r3
 8002532:	4613      	mov	r3, r2
 8002534:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
    // Set MUX to current channel first (before any heavy processing)
    uint8_t current_channel = thermistor_counter % 8;  // Still cycle through 8 MUX channels
 8002538:	4b37      	ldr	r3, [pc, #220]	@ (8002618 <main+0x168>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    MUX_SetChannel(current_channel);
 8002546:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fb08 	bl	8000b60 <MUX_SetChannel>
    
    // Read single ADC value for current MUX channel (after MUX has settled)
    uint16_t adc_value = ADC_ReadValue();
 8002550:	f7fe fae4 	bl	8000b1c <ADC_ReadValue>
 8002554:	4603      	mov	r3, r0
 8002556:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    
    // Single channel telemetry disabled for faster operation
    // CAN_TxThermistorData(current_channel, adc_value);
    
    // Do the heavy processing only on specific cycles, spread out
    if (cycle_phase == 0) {
 800255a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <main+0xbe>
      // Read all thermistor temperatures (cycle 0)
      ADC_ReadAllThermistors(thermistor_temps);
 8002562:	f107 0320 	add.w	r3, r7, #32
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fc20 	bl	8000dac <ADC_ReadAllThermistors>
 800256c:	e011      	b.n	8002592 <main+0xe2>
    } else if (cycle_phase == 1) {
 800256e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <main+0xd2>
      // Send thermistor temperatures in multiplexed CAN messages (cycle 1)
      CAN_TxAllThermistorsMux(thermistor_temps);
 8002576:	f107 0320 	add.w	r3, r7, #32
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fdb2 	bl	80020e4 <CAN_TxAllThermistorsMux>
 8002580:	e007      	b.n	8002592 <main+0xe2>
    } else if (cycle_phase == 2) {
 8002582:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002586:	2b02      	cmp	r3, #2
 8002588:	d103      	bne.n	8002592 <main+0xe2>
      // Read all voltages (cycle 2) - kept for potential future use
      ADC_ReadAllVoltages(adc_voltages);
 800258a:	463b      	mov	r3, r7
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fc65 	bl	8000e5c <ADC_ReadAllVoltages>
      // ADC voltage telemetry disabled - no longer sending TELEMETRY_ADC messages
      // CAN_TxAllVoltagesMux(adc_voltages);
    }
    
    // Do lighter processing every cycle
    if (cycle_phase == 4) {
 8002592:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002596:	2b04      	cmp	r3, #4
 8002598:	d10a      	bne.n	80025b0 <main+0x100>
      // Read stack voltage from BQ76952 BMS
      uint16_t stack_voltage_mv = BQ76952_ReadStackVoltage();
 800259a:	f7fe fc87 	bl	8000eac <BQ76952_ReadStackVoltage>
 800259e:	4603      	mov	r3, r0
 80025a0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      // Send stack voltage telemetry
      CAN_TxStackVoltage(stack_voltage_mv);
 80025a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff f837 	bl	800161c <CAN_TxStackVoltage>
 80025ae:	e00c      	b.n	80025ca <main+0x11a>
    } else if (cycle_phase == 5) {
 80025b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d102      	bne.n	80025be <main+0x10e>
      // Send all cell voltages in grouped format
      CAN_TxAllCellVoltagesMux();
 80025b8:	f7ff f864 	bl	8001684 <CAN_TxAllCellVoltagesMux>
 80025bc:	e005      	b.n	80025ca <main+0x11a>
    } else if (cycle_phase == 6) {
 80025be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d101      	bne.n	80025ca <main+0x11a>
      // Process temperature-related CAN requests
      CAN_ProcessTemperatureRequests();
 80025c6:	f7ff fe6d 	bl	80022a4 <CAN_ProcessTemperatureRequests>
    }
    
    // Send heartbeat message every 1000 cycles (every 10 seconds with 10ms delay)
    if ((heartbeat_counter % 1000) == 0) {
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <main+0x170>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <main+0x174>)
 80025d0:	fba3 1302 	umull	r1, r3, r3, r2
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <main+0x144>
      CAN_SendHeartbeat(heartbeat_counter);
 80025e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <main+0x170>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fd43 	bl	8002074 <CAN_SendHeartbeat>
      
      // Reset the RX flag after reporting it in heartbeat
      can_rx_flag = 0;
 80025ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002628 <main+0x178>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
    }
    
    heartbeat_counter++;
 80025f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <main+0x170>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	4a09      	ldr	r2, [pc, #36]	@ (8002620 <main+0x170>)
 80025fc:	6013      	str	r3, [r2, #0]
    thermistor_counter++;
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <main+0x168>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3301      	adds	r3, #1
 8002604:	4a04      	ldr	r2, [pc, #16]	@ (8002618 <main+0x168>)
 8002606:	6013      	str	r3, [r2, #0]
    
    // Very fast 10ms delay for 0.01 second per channel cycling
    HAL_Delay(10);
 8002608:	200a      	movs	r0, #10
 800260a:	f000 fc03 	bl	8002e14 <HAL_Delay>
  {
 800260e:	e785      	b.n	800251c <main+0x6c>
 8002610:	200000f4 	.word	0x200000f4
 8002614:	20000090 	.word	0x20000090
 8002618:	20000194 	.word	0x20000194
 800261c:	cccccccd 	.word	0xcccccccd
 8002620:	20000198 	.word	0x20000198
 8002624:	10624dd3 	.word	0x10624dd3
 8002628:	2000019c 	.word	0x2000019c

0800262c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b096      	sub	sp, #88	@ 0x58
 8002630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	2244      	movs	r2, #68	@ 0x44
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f004 ffee 	bl	800761c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002640:	463b      	mov	r3, r7
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800264e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002652:	f003 fea5 	bl	80063a0 <HAL_PWREx_ControlVoltageScaling>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800265c:	f000 f97e 	bl	800295c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002660:	2310      	movs	r3, #16
 8002662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002664:	2301      	movs	r3, #1
 8002666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800266c:	23b0      	movs	r3, #176	@ 0xb0
 800266e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002670:	2300      	movs	r3, #0
 8002672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fee7 	bl	800644c <HAL_RCC_OscConfig>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002684:	f000 f96a 	bl	800295c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002688:	230f      	movs	r3, #15
 800268a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800268c:	2300      	movs	r3, #0
 800268e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800269c:	463b      	mov	r3, r7
 800269e:	2102      	movs	r1, #2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f004 fae7 	bl	8006c74 <HAL_RCC_ClockConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80026ac:	f000 f956 	bl	800295c <Error_Handler>
  }
}
 80026b0:	bf00      	nop
 80026b2:	3758      	adds	r7, #88	@ 0x58
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026be:	463b      	mov	r3, r7
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
 80026cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80026ce:	4b29      	ldr	r3, [pc, #164]	@ (8002774 <MX_ADC1_Init+0xbc>)
 80026d0:	4a29      	ldr	r2, [pc, #164]	@ (8002778 <MX_ADC1_Init+0xc0>)
 80026d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026d4:	4b27      	ldr	r3, [pc, #156]	@ (8002774 <MX_ADC1_Init+0xbc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026da:	4b26      	ldr	r3, [pc, #152]	@ (8002774 <MX_ADC1_Init+0xbc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026e0:	4b24      	ldr	r3, [pc, #144]	@ (8002774 <MX_ADC1_Init+0xbc>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026e6:	4b23      	ldr	r3, [pc, #140]	@ (8002774 <MX_ADC1_Init+0xbc>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026ec:	4b21      	ldr	r3, [pc, #132]	@ (8002774 <MX_ADC1_Init+0xbc>)
 80026ee:	2204      	movs	r2, #4
 80026f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80026f2:	4b20      	ldr	r3, [pc, #128]	@ (8002774 <MX_ADC1_Init+0xbc>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002774 <MX_ADC1_Init+0xbc>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80026fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <MX_ADC1_Init+0xbc>)
 8002700:	2201      	movs	r2, #1
 8002702:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002704:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <MX_ADC1_Init+0xbc>)
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800270c:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <MX_ADC1_Init+0xbc>)
 800270e:	2200      	movs	r2, #0
 8002710:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002712:	4b18      	ldr	r3, [pc, #96]	@ (8002774 <MX_ADC1_Init+0xbc>)
 8002714:	2200      	movs	r2, #0
 8002716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002718:	4b16      	ldr	r3, [pc, #88]	@ (8002774 <MX_ADC1_Init+0xbc>)
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002720:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <MX_ADC1_Init+0xbc>)
 8002722:	2200      	movs	r2, #0
 8002724:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002726:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <MX_ADC1_Init+0xbc>)
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800272e:	4811      	ldr	r0, [pc, #68]	@ (8002774 <MX_ADC1_Init+0xbc>)
 8002730:	f000 fdaa 	bl	8003288 <HAL_ADC_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800273a:	f000 f90f 	bl	800295c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800273e:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <MX_ADC1_Init+0xc4>)
 8002740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002742:	2306      	movs	r3, #6
 8002744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800274a:	237f      	movs	r3, #127	@ 0x7f
 800274c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800274e:	2304      	movs	r3, #4
 8002750:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002756:	463b      	mov	r3, r7
 8002758:	4619      	mov	r1, r3
 800275a:	4806      	ldr	r0, [pc, #24]	@ (8002774 <MX_ADC1_Init+0xbc>)
 800275c:	f001 f808 	bl	8003770 <HAL_ADC_ConfigChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002766:	f000 f8f9 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000090 	.word	0x20000090
 8002778:	50040000 	.word	0x50040000
 800277c:	14f00020 	.word	0x14f00020

08002780 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002784:	4b17      	ldr	r3, [pc, #92]	@ (80027e4 <MX_CAN1_Init+0x64>)
 8002786:	4a18      	ldr	r2, [pc, #96]	@ (80027e8 <MX_CAN1_Init+0x68>)
 8002788:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800278a:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <MX_CAN1_Init+0x64>)
 800278c:	2206      	movs	r2, #6
 800278e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002790:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <MX_CAN1_Init+0x64>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002796:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <MX_CAN1_Init+0x64>)
 8002798:	2200      	movs	r2, #0
 800279a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800279c:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <MX_CAN1_Init+0x64>)
 800279e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80027a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80027a4:	4b0f      	ldr	r3, [pc, #60]	@ (80027e4 <MX_CAN1_Init+0x64>)
 80027a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80027aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80027ac:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <MX_CAN1_Init+0x64>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80027b2:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <MX_CAN1_Init+0x64>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80027b8:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <MX_CAN1_Init+0x64>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80027be:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <MX_CAN1_Init+0x64>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80027c4:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <MX_CAN1_Init+0x64>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80027ca:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <MX_CAN1_Init+0x64>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80027d0:	4804      	ldr	r0, [pc, #16]	@ (80027e4 <MX_CAN1_Init+0x64>)
 80027d2:	f001 fddd 	bl	8004390 <HAL_CAN_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80027dc:	f000 f8be 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	200000f4 	.word	0x200000f4
 80027e8:	40006400 	.word	0x40006400

080027ec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80027f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <MX_CRC_Init+0x3c>)
 80027f2:	4a0e      	ldr	r2, [pc, #56]	@ (800282c <MX_CRC_Init+0x40>)
 80027f4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80027f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <MX_CRC_Init+0x3c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80027fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <MX_CRC_Init+0x3c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <MX_CRC_Init+0x3c>)
 8002804:	2200      	movs	r2, #0
 8002806:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002808:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <MX_CRC_Init+0x3c>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800280e:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <MX_CRC_Init+0x3c>)
 8002810:	2201      	movs	r2, #1
 8002812:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002814:	4804      	ldr	r0, [pc, #16]	@ (8002828 <MX_CRC_Init+0x3c>)
 8002816:	f002 fd1d 	bl	8005254 <HAL_CRC_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002820:	f000 f89c 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	2000011c 	.word	0x2000011c
 800282c:	40023000 	.word	0x40023000

08002830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002834:	4b1b      	ldr	r3, [pc, #108]	@ (80028a4 <MX_I2C1_Init+0x74>)
 8002836:	4a1c      	ldr	r2, [pc, #112]	@ (80028a8 <MX_I2C1_Init+0x78>)
 8002838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 800283a:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <MX_I2C1_Init+0x74>)
 800283c:	4a1b      	ldr	r2, [pc, #108]	@ (80028ac <MX_I2C1_Init+0x7c>)
 800283e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002840:	4b18      	ldr	r3, [pc, #96]	@ (80028a4 <MX_I2C1_Init+0x74>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002846:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <MX_I2C1_Init+0x74>)
 8002848:	2201      	movs	r2, #1
 800284a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800284c:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <MX_I2C1_Init+0x74>)
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002852:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <MX_I2C1_Init+0x74>)
 8002854:	2200      	movs	r2, #0
 8002856:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002858:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <MX_I2C1_Init+0x74>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800285e:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <MX_I2C1_Init+0x74>)
 8002860:	2200      	movs	r2, #0
 8002862:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002864:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <MX_I2C1_Init+0x74>)
 8002866:	2200      	movs	r2, #0
 8002868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800286a:	480e      	ldr	r0, [pc, #56]	@ (80028a4 <MX_I2C1_Init+0x74>)
 800286c:	f002 ff66 	bl	800573c <HAL_I2C_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002876:	f000 f871 	bl	800295c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800287a:	2100      	movs	r1, #0
 800287c:	4809      	ldr	r0, [pc, #36]	@ (80028a4 <MX_I2C1_Init+0x74>)
 800287e:	f003 fce9 	bl	8006254 <HAL_I2CEx_ConfigAnalogFilter>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002888:	f000 f868 	bl	800295c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800288c:	2100      	movs	r1, #0
 800288e:	4805      	ldr	r0, [pc, #20]	@ (80028a4 <MX_I2C1_Init+0x74>)
 8002890:	f003 fd2b 	bl	80062ea <HAL_I2CEx_ConfigDigitalFilter>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800289a:	f000 f85f 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000140 	.word	0x20000140
 80028a8:	40005400 	.word	0x40005400
 80028ac:	10805d88 	.word	0x10805d88

080028b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <MX_GPIO_Init+0xa4>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ca:	4a22      	ldr	r2, [pc, #136]	@ (8002954 <MX_GPIO_Init+0xa4>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028d2:	4b20      	ldr	r3, [pc, #128]	@ (8002954 <MX_GPIO_Init+0xa4>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028de:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <MX_GPIO_Init+0xa4>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002954 <MX_GPIO_Init+0xa4>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002954 <MX_GPIO_Init+0xa4>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SIG1_Pin|MUX_SIG3_Pin, GPIO_PIN_SET);
 80028f6:	2201      	movs	r2, #1
 80028f8:	2122      	movs	r1, #34	@ 0x22
 80028fa:	4817      	ldr	r0, [pc, #92]	@ (8002958 <MX_GPIO_Init+0xa8>)
 80028fc:	f002 ff06 	bl	800570c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SIG2_GPIO_Port, MUX_SIG2_Pin, GPIO_PIN_SET);
 8002900:	2201      	movs	r2, #1
 8002902:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800290a:	f002 feff 	bl	800570c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MUX_SIG1_Pin MUX_SIG3_Pin */
  GPIO_InitStruct.Pin = MUX_SIG1_Pin|MUX_SIG3_Pin;
 800290e:	2322      	movs	r3, #34	@ 0x22
 8002910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002912:	2301      	movs	r3, #1
 8002914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002916:	2302      	movs	r3, #2
 8002918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4619      	mov	r1, r3
 8002924:	480c      	ldr	r0, [pc, #48]	@ (8002958 <MX_GPIO_Init+0xa8>)
 8002926:	f002 fd87 	bl	8005438 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUX_SIG2_Pin */
  GPIO_InitStruct.Pin = MUX_SIG2_Pin;
 800292a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800292e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002930:	2301      	movs	r3, #1
 8002932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002934:	2302      	movs	r3, #2
 8002936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MUX_SIG2_GPIO_Port, &GPIO_InitStruct);
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	4619      	mov	r1, r3
 8002942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002946:	f002 fd77 	bl	8005438 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800294a:	bf00      	nop
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	48000400 	.word	0x48000400

0800295c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002960:	b672      	cpsid	i
}
 8002962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002964:	bf00      	nop
 8002966:	e7fd      	b.n	8002964 <Error_Handler+0x8>

08002968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296e:	4b0f      	ldr	r3, [pc, #60]	@ (80029ac <HAL_MspInit+0x44>)
 8002970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002972:	4a0e      	ldr	r2, [pc, #56]	@ (80029ac <HAL_MspInit+0x44>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6613      	str	r3, [r2, #96]	@ 0x60
 800297a:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <HAL_MspInit+0x44>)
 800297c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <HAL_MspInit+0x44>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298a:	4a08      	ldr	r2, [pc, #32]	@ (80029ac <HAL_MspInit+0x44>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002990:	6593      	str	r3, [r2, #88]	@ 0x58
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_MspInit+0x44>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000

080029b0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b09e      	sub	sp, #120	@ 0x78
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c8:	f107 0310 	add.w	r3, r7, #16
 80029cc:	2254      	movs	r2, #84	@ 0x54
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f004 fe23 	bl	800761c <memset>
  if(hadc->Instance==ADC1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a25      	ldr	r2, [pc, #148]	@ (8002a70 <HAL_ADC_MspInit+0xc0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d143      	bne.n	8002a68 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80029e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80029e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80029ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80029ec:	2301      	movs	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 80029f0:	2303      	movs	r3, #3
 80029f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80029f4:	2308      	movs	r3, #8
 80029f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80029f8:	2307      	movs	r3, #7
 80029fa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80029fc:	2302      	movs	r3, #2
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002a04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a0a:	f107 0310 	add.w	r3, r7, #16
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 fb1c 	bl	800704c <HAL_RCCEx_PeriphCLKConfig>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002a1a:	f7ff ff9f 	bl	800295c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a1e:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <HAL_ADC_MspInit+0xc4>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a22:	4a14      	ldr	r2, [pc, #80]	@ (8002a74 <HAL_ADC_MspInit+0xc4>)
 8002a24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a2a:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_ADC_MspInit+0xc4>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	4b0f      	ldr	r3, [pc, #60]	@ (8002a74 <HAL_ADC_MspInit+0xc4>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a74 <HAL_ADC_MspInit+0xc4>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a42:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <HAL_ADC_MspInit+0xc4>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a52:	230b      	movs	r3, #11
 8002a54:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a64:	f002 fce8 	bl	8005438 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002a68:	bf00      	nop
 8002a6a:	3778      	adds	r7, #120	@ 0x78
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	50040000 	.word	0x50040000
 8002a74:	40021000 	.word	0x40021000

08002a78 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	@ 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a20      	ldr	r2, [pc, #128]	@ (8002b18 <HAL_CAN_MspInit+0xa0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d139      	bne.n	8002b0e <HAL_CAN_MspInit+0x96>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a9a:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <HAL_CAN_MspInit+0xa4>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b1c <HAL_CAN_MspInit+0xa4>)
 8002aa0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002aa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b1c <HAL_CAN_MspInit+0xa4>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b1c <HAL_CAN_MspInit+0xa4>)
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab6:	4a19      	ldr	r2, [pc, #100]	@ (8002b1c <HAL_CAN_MspInit+0xa4>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002abe:	4b17      	ldr	r3, [pc, #92]	@ (8002b1c <HAL_CAN_MspInit+0xa4>)
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002aca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002adc:	2309      	movs	r3, #9
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aea:	f002 fca5 	bl	8005438 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	2013      	movs	r0, #19
 8002af4:	f002 fb77 	bl	80051e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002af8:	2013      	movs	r0, #19
 8002afa:	f002 fb90 	bl	800521e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	2014      	movs	r0, #20
 8002b04:	f002 fb6f 	bl	80051e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002b08:	2014      	movs	r0, #20
 8002b0a:	f002 fb88 	bl	800521e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002b0e:	bf00      	nop
 8002b10:	3728      	adds	r7, #40	@ 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40006400 	.word	0x40006400
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <HAL_CRC_MspInit+0x38>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10b      	bne.n	8002b4a <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <HAL_CRC_MspInit+0x3c>)
 8002b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b36:	4a09      	ldr	r2, [pc, #36]	@ (8002b5c <HAL_CRC_MspInit+0x3c>)
 8002b38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b3e:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <HAL_CRC_MspInit+0x3c>)
 8002b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023000 	.word	0x40023000
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b09e      	sub	sp, #120	@ 0x78
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	2254      	movs	r2, #84	@ 0x54
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f004 fd4b 	bl	800761c <memset>
  if(hi2c->Instance==I2C1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002c08 <HAL_I2C_MspInit+0xa8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d137      	bne.n	8002c00 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b90:	2340      	movs	r3, #64	@ 0x40
 8002b92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b94:	2300      	movs	r3, #0
 8002b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b98:	f107 0310 	add.w	r3, r7, #16
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f004 fa55 	bl	800704c <HAL_RCCEx_PeriphCLKConfig>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002ba8:	f7ff fed8 	bl	800295c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bac:	4b17      	ldr	r3, [pc, #92]	@ (8002c0c <HAL_I2C_MspInit+0xac>)
 8002bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb0:	4a16      	ldr	r2, [pc, #88]	@ (8002c0c <HAL_I2C_MspInit+0xac>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bb8:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <HAL_I2C_MspInit+0xac>)
 8002bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bc4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002bc8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bca:	2312      	movs	r3, #18
 8002bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002bde:	4619      	mov	r1, r3
 8002be0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002be4:	f002 fc28 	bl	8005438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002be8:	4b08      	ldr	r3, [pc, #32]	@ (8002c0c <HAL_I2C_MspInit+0xac>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bec:	4a07      	ldr	r2, [pc, #28]	@ (8002c0c <HAL_I2C_MspInit+0xac>)
 8002bee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bf4:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <HAL_I2C_MspInit+0xac>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c00:	bf00      	nop
 8002c02:	3778      	adds	r7, #120	@ 0x78
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40005400 	.word	0x40005400
 8002c0c:	40021000 	.word	0x40021000

08002c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <NMI_Handler+0x4>

08002c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <HardFault_Handler+0x4>

08002c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c24:	bf00      	nop
 8002c26:	e7fd      	b.n	8002c24 <MemManage_Handler+0x4>

08002c28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <BusFault_Handler+0x4>

08002c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <UsageFault_Handler+0x4>

08002c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c66:	f000 f8b5 	bl	8002dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c74:	4802      	ldr	r0, [pc, #8]	@ (8002c80 <CAN1_TX_IRQHandler+0x10>)
 8002c76:	f001 ffac 	bl	8004bd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200000f4 	.word	0x200000f4

08002c84 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c88:	4802      	ldr	r0, [pc, #8]	@ (8002c94 <CAN1_RX0_IRQHandler+0x10>)
 8002c8a:	f001 ffa2 	bl	8004bd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200000f4 	.word	0x200000f4

08002c98 <System_SendErrorMessage>:
  * @brief  Send system error message via CAN
  * @param  error_code: Error code to send
  * @retval None
  */
void System_SendErrorMessage(uint8_t error_code) 
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  CAN_SendErrorMessage(error_code);
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff f9bf 	bl	8002028 <CAN_SendErrorMessage>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002cb8:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <SystemInit+0x20>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cbe:	4a05      	ldr	r2, [pc, #20]	@ (8002cd4 <SystemInit+0x20>)
 8002cc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002cd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cdc:	f7ff ffea 	bl	8002cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ce0:	480c      	ldr	r0, [pc, #48]	@ (8002d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ce2:	490d      	ldr	r1, [pc, #52]	@ (8002d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d1c <LoopForever+0xe>)
  movs r3, #0
 8002ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce8:	e002      	b.n	8002cf0 <LoopCopyDataInit>

08002cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cee:	3304      	adds	r3, #4

08002cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf4:	d3f9      	bcc.n	8002cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8002d24 <LoopForever+0x16>)
  movs r3, #0
 8002cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cfc:	e001      	b.n	8002d02 <LoopFillZerobss>

08002cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d00:	3204      	adds	r2, #4

08002d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d04:	d3fb      	bcc.n	8002cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d06:	f004 fc97 	bl	8007638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d0a:	f7ff fbd1 	bl	80024b0 <main>

08002d0e <LoopForever>:

LoopForever:
    b LoopForever
 8002d0e:	e7fe      	b.n	8002d0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d10:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002d1c:	08007930 	.word	0x08007930
  ldr r2, =_sbss
 8002d20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002d24:	200002e8 	.word	0x200002e8

08002d28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d28:	e7fe      	b.n	8002d28 <ADC1_IRQHandler>

08002d2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d34:	2003      	movs	r0, #3
 8002d36:	f002 fa4b 	bl	80051d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d3a:	200f      	movs	r0, #15
 8002d3c:	f000 f80e 	bl	8002d5c <HAL_InitTick>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	71fb      	strb	r3, [r7, #7]
 8002d4a:	e001      	b.n	8002d50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d4c:	f7ff fe0c 	bl	8002968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d50:	79fb      	ldrb	r3, [r7, #7]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d68:	4b17      	ldr	r3, [pc, #92]	@ (8002dc8 <HAL_InitTick+0x6c>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d023      	beq.n	8002db8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d70:	4b16      	ldr	r3, [pc, #88]	@ (8002dcc <HAL_InitTick+0x70>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b14      	ldr	r3, [pc, #80]	@ (8002dc8 <HAL_InitTick+0x6c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 fa57 	bl	800523a <HAL_SYSTICK_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b0f      	cmp	r3, #15
 8002d96:	d809      	bhi.n	8002dac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f002 fa21 	bl	80051e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002da4:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <HAL_InitTick+0x74>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e007      	b.n	8002dbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
 8002db0:	e004      	b.n	8002dbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
 8002db6:	e001      	b.n	8002dbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000008 	.word	0x20000008
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <HAL_IncTick+0x20>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <HAL_IncTick+0x24>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	4a04      	ldr	r2, [pc, #16]	@ (8002df8 <HAL_IncTick+0x24>)
 8002de6:	6013      	str	r3, [r2, #0]
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000008 	.word	0x20000008
 8002df8:	200001ac 	.word	0x200001ac

08002dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002e00:	4b03      	ldr	r3, [pc, #12]	@ (8002e10 <HAL_GetTick+0x14>)
 8002e02:	681b      	ldr	r3, [r3, #0]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	200001ac 	.word	0x200001ac

08002e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7ff ffee 	bl	8002dfc <HAL_GetTick>
 8002e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d005      	beq.n	8002e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <HAL_Delay+0x44>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e3a:	bf00      	nop
 8002e3c:	f7ff ffde 	bl	8002dfc <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d8f7      	bhi.n	8002e3c <HAL_Delay+0x28>
  {
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000008 	.word	0x20000008

08002e5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	609a      	str	r2, [r3, #8]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3360      	adds	r3, #96	@ 0x60
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <LL_ADC_SetOffset+0x44>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	03fff000 	.word	0x03fff000

08002f0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3360      	adds	r3, #96	@ 0x60
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3360      	adds	r3, #96	@ 0x60
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3330      	adds	r3, #48	@ 0x30
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	4413      	add	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	211f      	movs	r1, #31
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	0e9b      	lsrs	r3, r3, #26
 8002fcc:	f003 011f 	and.w	r1, r3, #31
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3314      	adds	r3, #20
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	0e5b      	lsrs	r3, r3, #25
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	4413      	add	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	0d1b      	lsrs	r3, r3, #20
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2107      	movs	r1, #7
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	401a      	ands	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	0d1b      	lsrs	r3, r3, #20
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	fa01 f303 	lsl.w	r3, r1, r3
 8003030:	431a      	orrs	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305c:	43db      	mvns	r3, r3
 800305e:	401a      	ands	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f003 0318 	and.w	r3, r3, #24
 8003066:	4908      	ldr	r1, [pc, #32]	@ (8003088 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003068:	40d9      	lsrs	r1, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	400b      	ands	r3, r1
 800306e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003072:	431a      	orrs	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	0007ffff 	.word	0x0007ffff

0800308c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800309c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6093      	str	r3, [r2, #8]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030c4:	d101      	bne.n	80030ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80030e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003114:	d101      	bne.n	800311a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003138:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800313c:	f043 0201 	orr.w	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003160:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003164:	f043 0202 	orr.w	r2, r3, #2
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <LL_ADC_IsEnabled+0x18>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <LL_ADC_IsEnabled+0x1a>
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d101      	bne.n	80031b6 <LL_ADC_IsDisableOngoing+0x18>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <LL_ADC_IsDisableOngoing+0x1a>
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031d8:	f043 0204 	orr.w	r2, r3, #4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003200:	f043 0210 	orr.w	r2, r3, #16
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b04      	cmp	r3, #4
 8003226:	d101      	bne.n	800322c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800324a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b08      	cmp	r3, #8
 8003274:	d101      	bne.n	800327a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e126      	b.n	80034f0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff fb7d 	bl	80029b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fef1 	bl	80030b0 <LL_ADC_IsDeepPowerDownEnabled>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d004      	beq.n	80032de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fed7 	bl	800308c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff0c 	bl	8003100 <LL_ADC_IsInternalRegulatorEnabled>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d115      	bne.n	800331a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff fef0 	bl	80030d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032f8:	4b7f      	ldr	r3, [pc, #508]	@ (80034f8 <HAL_ADC_Init+0x270>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	4a7f      	ldr	r2, [pc, #508]	@ (80034fc <HAL_ADC_Init+0x274>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	099b      	lsrs	r3, r3, #6
 8003306:	3301      	adds	r3, #1
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800330c:	e002      	b.n	8003314 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3b01      	subs	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f9      	bne.n	800330e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff feee 	bl	8003100 <LL_ADC_IsInternalRegulatorEnabled>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10d      	bne.n	8003346 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332e:	f043 0210 	orr.w	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ff62 	bl	8003214 <LL_ADC_REG_IsConversionOngoing>
 8003350:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 80bf 	bne.w	80034de <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 80bb 	bne.w	80034de <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003370:	f043 0202 	orr.w	r2, r3, #2
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fefb 	bl	8003178 <LL_ADC_IsEnabled>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003388:	485d      	ldr	r0, [pc, #372]	@ (8003500 <HAL_ADC_Init+0x278>)
 800338a:	f7ff fef5 	bl	8003178 <LL_ADC_IsEnabled>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4619      	mov	r1, r3
 800339a:	485a      	ldr	r0, [pc, #360]	@ (8003504 <HAL_ADC_Init+0x27c>)
 800339c:	f7ff fd5e 	bl	8002e5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	7e5b      	ldrb	r3, [r3, #25]
 80033a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80033b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80033b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d106      	bne.n	80033dc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	3b01      	subs	r3, #1
 80033d4:	045b      	lsls	r3, r3, #17
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	4b42      	ldr	r3, [pc, #264]	@ (8003508 <HAL_ADC_Init+0x280>)
 8003400:	4013      	ands	r3, r2
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	69b9      	ldr	r1, [r7, #24]
 8003408:	430b      	orrs	r3, r1
 800340a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff26 	bl	8003262 <LL_ADC_INJ_IsConversionOngoing>
 8003416:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d13d      	bne.n	800349a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d13a      	bne.n	800349a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003428:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003430:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003440:	f023 0302 	bic.w	r3, r3, #2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	69b9      	ldr	r1, [r7, #24]
 800344a:	430b      	orrs	r3, r1
 800344c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003454:	2b01      	cmp	r3, #1
 8003456:	d118      	bne.n	800348a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003462:	f023 0304 	bic.w	r3, r3, #4
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800346e:	4311      	orrs	r1, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800347a:	430a      	orrs	r2, r1
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	611a      	str	r2, [r3, #16]
 8003488:	e007      	b.n	800349a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10c      	bne.n	80034bc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a8:	f023 010f 	bic.w	r1, r3, #15
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	1e5a      	subs	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80034ba:	e007      	b.n	80034cc <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 020f 	bic.w	r2, r2, #15
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d0:	f023 0303 	bic.w	r3, r3, #3
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	655a      	str	r2, [r3, #84]	@ 0x54
 80034dc:	e007      	b.n	80034ee <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e2:	f043 0210 	orr.w	r2, r3, #16
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000000 	.word	0x20000000
 80034fc:	053e2d63 	.word	0x053e2d63
 8003500:	50040000 	.word	0x50040000
 8003504:	50040300 	.word	0x50040300
 8003508:	fff0c007 	.word	0xfff0c007

0800350c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fe7b 	bl	8003214 <LL_ADC_REG_IsConversionOngoing>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d14f      	bne.n	80035c4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_ADC_Start+0x26>
 800352e:	2302      	movs	r3, #2
 8003530:	e04b      	b.n	80035ca <HAL_ADC_Start+0xbe>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fdb6 	bl	80040ac <ADC_Enable>
 8003540:	4603      	mov	r3, r0
 8003542:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d137      	bne.n	80035ba <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003562:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356a:	d106      	bne.n	800357a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003570:	f023 0206 	bic.w	r2, r3, #6
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	659a      	str	r2, [r3, #88]	@ 0x58
 8003578:	e002      	b.n	8003580 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	221c      	movs	r2, #28
 8003586:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035a6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fe06 	bl	80031c4 <LL_ADC_REG_StartConversion>
 80035b8:	e006      	b.n	80035c8 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80035c2:	e001      	b.n	80035c8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
 80035c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_Stop+0x16>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e023      	b.n	8003630 <HAL_ADC_Stop+0x5e>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80035f0:	2103      	movs	r1, #3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fc9e 	bl	8003f34 <ADC_ConversionStop>
 80035f8:	4603      	mov	r3, r0
 80035fa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d111      	bne.n	8003626 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fdd8 	bl	80041b8 <ADC_Disable>
 8003608:	4603      	mov	r3, r0
 800360a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003616:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	f043 0201 	orr.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	2b08      	cmp	r3, #8
 8003648:	d102      	bne.n	8003650 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800364a:	2308      	movs	r3, #8
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e010      	b.n	8003672 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e06f      	b.n	800374e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800366e:	2304      	movs	r3, #4
 8003670:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003672:	f7ff fbc3 	bl	8002dfc <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003678:	e021      	b.n	80036be <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d01d      	beq.n	80036be <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003682:	f7ff fbbb 	bl	8002dfc <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <HAL_ADC_PollForConversion+0x60>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d112      	bne.n	80036be <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10b      	bne.n	80036be <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f043 0204 	orr.w	r2, r3, #4
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e047      	b.n	800374e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0d6      	beq.n	800367a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fc46 	bl	8002f6e <LL_ADC_REG_IsTriggerSourceSWStart>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01c      	beq.n	8003722 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	7e5b      	ldrb	r3, [r3, #25]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d118      	bne.n	8003722 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d111      	bne.n	8003722 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003702:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d105      	bne.n	8003722 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d104      	bne.n	800373a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2208      	movs	r2, #8
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	e008      	b.n	800374c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	220c      	movs	r2, #12
 800374a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b0b6      	sub	sp, #216	@ 0xd8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003780:	2300      	movs	r3, #0
 8003782:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x22>
 800378e:	2302      	movs	r3, #2
 8003790:	e3bb      	b.n	8003f0a <HAL_ADC_ConfigChannel+0x79a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fd38 	bl	8003214 <LL_ADC_REG_IsConversionOngoing>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 83a0 	bne.w	8003eec <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d824      	bhi.n	8003806 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	3b02      	subs	r3, #2
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d81b      	bhi.n	80037fe <HAL_ADC_ConfigChannel+0x8e>
 80037c6:	a201      	add	r2, pc, #4	@ (adr r2, 80037cc <HAL_ADC_ConfigChannel+0x5c>)
 80037c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037cc:	080037dd 	.word	0x080037dd
 80037d0:	080037e5 	.word	0x080037e5
 80037d4:	080037ed 	.word	0x080037ed
 80037d8:	080037f5 	.word	0x080037f5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80037dc:	230c      	movs	r3, #12
 80037de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80037e2:	e010      	b.n	8003806 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80037e4:	2312      	movs	r3, #18
 80037e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80037ea:	e00c      	b.n	8003806 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80037ec:	2318      	movs	r3, #24
 80037ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80037f2:	e008      	b.n	8003806 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80037f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80037fc:	e003      	b.n	8003806 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80037fe:	2306      	movs	r3, #6
 8003800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003804:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003814:	f7ff fbbe 	bl	8002f94 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fcf9 	bl	8003214 <LL_ADC_REG_IsConversionOngoing>
 8003822:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fd19 	bl	8003262 <LL_ADC_INJ_IsConversionOngoing>
 8003830:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003838:	2b00      	cmp	r3, #0
 800383a:	f040 81a4 	bne.w	8003b86 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800383e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 819f 	bne.w	8003b86 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6819      	ldr	r1, [r3, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	461a      	mov	r2, r3
 8003856:	f7ff fbc9 	bl	8002fec <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	08db      	lsrs	r3, r3, #3
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b04      	cmp	r3, #4
 800387a:	d00a      	beq.n	8003892 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6919      	ldr	r1, [r3, #16]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800388c:	f7ff fb1a 	bl	8002ec4 <LL_ADC_SetOffset>
 8003890:	e179      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fb37 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 800389e:	4603      	mov	r3, r0
 80038a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <HAL_ADC_ConfigChannel+0x14e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fb2c 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 80038b4:	4603      	mov	r3, r0
 80038b6:	0e9b      	lsrs	r3, r3, #26
 80038b8:	f003 021f 	and.w	r2, r3, #31
 80038bc:	e01e      	b.n	80038fc <HAL_ADC_ConfigChannel+0x18c>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2100      	movs	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fb21 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80038e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80038ec:	2320      	movs	r3, #32
 80038ee:	e004      	b.n	80038fa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80038f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038f4:	fab3 f383 	clz	r3, r3
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x1a4>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0e9b      	lsrs	r3, r3, #26
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	e018      	b.n	8003946 <HAL_ADC_ConfigChannel+0x1d6>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800392c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003930:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003938:	2320      	movs	r3, #32
 800393a:	e004      	b.n	8003946 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800393c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003946:	429a      	cmp	r2, r3
 8003948:	d106      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff faf0 	bl	8002f38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2101      	movs	r1, #1
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fad4 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003964:	4603      	mov	r3, r0
 8003966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x214>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2101      	movs	r1, #1
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fac9 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 800397a:	4603      	mov	r3, r0
 800397c:	0e9b      	lsrs	r3, r3, #26
 800397e:	f003 021f 	and.w	r2, r3, #31
 8003982:	e01e      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x252>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2101      	movs	r1, #1
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fabe 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003990:	4603      	mov	r3, r0
 8003992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80039a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80039aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80039b2:	2320      	movs	r3, #32
 80039b4:	e004      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80039b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <HAL_ADC_ConfigChannel+0x26a>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	0e9b      	lsrs	r3, r3, #26
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	e018      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x29c>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80039ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80039f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80039fe:	2320      	movs	r3, #32
 8003a00:	e004      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003a02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a06:	fab3 f383 	clz	r3, r3
 8003a0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d106      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2200      	movs	r2, #0
 8003a16:	2101      	movs	r1, #1
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff fa8d 	bl	8002f38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2102      	movs	r1, #2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fa71 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x2da>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2102      	movs	r1, #2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fa66 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003a40:	4603      	mov	r3, r0
 8003a42:	0e9b      	lsrs	r3, r3, #26
 8003a44:	f003 021f 	and.w	r2, r3, #31
 8003a48:	e01e      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x318>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2102      	movs	r1, #2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fa5b 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003a78:	2320      	movs	r3, #32
 8003a7a:	e004      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a80:	fab3 f383 	clz	r3, r3
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x330>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0e9b      	lsrs	r3, r3, #26
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	e014      	b.n	8003aca <HAL_ADC_ConfigChannel+0x35a>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003aae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ab0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003abc:	2320      	movs	r3, #32
 8003abe:	e004      	b.n	8003aca <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003ac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ac4:	fab3 f383 	clz	r3, r3
 8003ac8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d106      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2102      	movs	r1, #2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fa2e 	bl	8002f38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2103      	movs	r1, #3
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fa12 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x398>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2103      	movs	r1, #3
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fa07 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003afe:	4603      	mov	r3, r0
 8003b00:	0e9b      	lsrs	r3, r3, #26
 8003b02:	f003 021f 	and.w	r2, r3, #31
 8003b06:	e017      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x3c8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2103      	movs	r1, #3
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff f9fc 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003b14:	4603      	mov	r3, r0
 8003b16:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003b20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b22:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003b24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003b2a:	2320      	movs	r3, #32
 8003b2c:	e003      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003b2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b30:	fab3 f383 	clz	r3, r3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x3e0>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	0e9b      	lsrs	r3, r3, #26
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	e011      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x404>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b58:	fa93 f3a3 	rbit	r3, r3
 8003b5c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003b5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b60:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003b62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003b68:	2320      	movs	r3, #32
 8003b6a:	e003      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003b6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b6e:	fab3 f383 	clz	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d106      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2103      	movs	r1, #3
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff f9d9 	bl	8002f38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff faf4 	bl	8003178 <LL_ADC_IsEnabled>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 8140 	bne.w	8003e18 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6819      	ldr	r1, [r3, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f7ff fa4d 	bl	8003044 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	4a8f      	ldr	r2, [pc, #572]	@ (8003dec <HAL_ADC_ConfigChannel+0x67c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	f040 8131 	bne.w	8003e18 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10b      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x46e>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	0e9b      	lsrs	r3, r3, #26
 8003bcc:	3301      	adds	r3, #1
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2b09      	cmp	r3, #9
 8003bd4:	bf94      	ite	ls
 8003bd6:	2301      	movls	r3, #1
 8003bd8:	2300      	movhi	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	e019      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x4a2>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003bf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	e003      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003bfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bfc:	fab3 f383 	clz	r3, r3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2b09      	cmp	r3, #9
 8003c0a:	bf94      	ite	ls
 8003c0c:	2301      	movls	r3, #1
 8003c0e:	2300      	movhi	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d079      	beq.n	8003d0a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d107      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x4c2>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	0e9b      	lsrs	r3, r3, #26
 8003c28:	3301      	adds	r3, #1
 8003c2a:	069b      	lsls	r3, r3, #26
 8003c2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c30:	e015      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x4ee>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003c40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c42:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	e003      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	069b      	lsls	r3, r3, #26
 8003c5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x50e>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	0e9b      	lsrs	r3, r3, #26
 8003c70:	3301      	adds	r3, #1
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	2101      	movs	r1, #1
 8003c78:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7c:	e017      	b.n	8003cae <HAL_ADC_ConfigChannel+0x53e>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c8e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003c96:	2320      	movs	r3, #32
 8003c98:	e003      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c9c:	fab3 f383 	clz	r3, r3
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	2101      	movs	r1, #1
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	ea42 0103 	orr.w	r1, r2, r3
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x564>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	0e9b      	lsrs	r3, r3, #26
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f003 021f 	and.w	r2, r3, #31
 8003cca:	4613      	mov	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	4413      	add	r3, r2
 8003cd0:	051b      	lsls	r3, r3, #20
 8003cd2:	e018      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x596>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003cec:	2320      	movs	r3, #32
 8003cee:	e003      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f003 021f 	and.w	r2, r3, #31
 8003cfe:	4613      	mov	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d06:	430b      	orrs	r3, r1
 8003d08:	e081      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x5b6>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	0e9b      	lsrs	r3, r3, #26
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	069b      	lsls	r3, r3, #26
 8003d20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d24:	e015      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x5e2>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2e:	fa93 f3a3 	rbit	r3, r3
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003d3e:	2320      	movs	r3, #32
 8003d40:	e003      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	069b      	lsls	r3, r3, #26
 8003d4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x602>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	0e9b      	lsrs	r3, r3, #26
 8003d64:	3301      	adds	r3, #1
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d70:	e017      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x632>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	fa93 f3a3 	rbit	r3, r3
 8003d7e:	61bb      	str	r3, [r7, #24]
  return result;
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	e003      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	fab3 f383 	clz	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	3301      	adds	r3, #1
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	ea42 0103 	orr.w	r1, r2, r3
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10d      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x65e>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	0e9b      	lsrs	r3, r3, #26
 8003db8:	3301      	adds	r3, #1
 8003dba:	f003 021f 	and.w	r2, r3, #31
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3b1e      	subs	r3, #30
 8003dc6:	051b      	lsls	r3, r3, #20
 8003dc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003dcc:	e01e      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x69c>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	fa93 f3a3 	rbit	r3, r3
 8003dda:	60fb      	str	r3, [r7, #12]
  return result;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003de6:	2320      	movs	r3, #32
 8003de8:	e006      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x688>
 8003dea:	bf00      	nop
 8003dec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f003 021f 	and.w	r2, r3, #31
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	3b1e      	subs	r3, #30
 8003e06:	051b      	lsls	r3, r3, #20
 8003e08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e0c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e12:	4619      	mov	r1, r3
 8003e14:	f7ff f8ea 	bl	8002fec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f14 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d06c      	beq.n	8003efe <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e24:	483c      	ldr	r0, [pc, #240]	@ (8003f18 <HAL_ADC_ConfigChannel+0x7a8>)
 8003e26:	f7ff f83f 	bl	8002ea8 <LL_ADC_GetCommonPathInternalCh>
 8003e2a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a3a      	ldr	r2, [pc, #232]	@ (8003f1c <HAL_ADC_ConfigChannel+0x7ac>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d127      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d121      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a35      	ldr	r2, [pc, #212]	@ (8003f20 <HAL_ADC_ConfigChannel+0x7b0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d157      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e56:	4619      	mov	r1, r3
 8003e58:	482f      	ldr	r0, [pc, #188]	@ (8003f18 <HAL_ADC_ConfigChannel+0x7a8>)
 8003e5a:	f7ff f812 	bl	8002e82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e5e:	4b31      	ldr	r3, [pc, #196]	@ (8003f24 <HAL_ADC_ConfigChannel+0x7b4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	099b      	lsrs	r3, r3, #6
 8003e64:	4a30      	ldr	r2, [pc, #192]	@ (8003f28 <HAL_ADC_ConfigChannel+0x7b8>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	099b      	lsrs	r3, r3, #6
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e78:	e002      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f9      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e86:	e03a      	b.n	8003efe <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a27      	ldr	r2, [pc, #156]	@ (8003f2c <HAL_ADC_ConfigChannel+0x7bc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d113      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10d      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f20 <HAL_ADC_ConfigChannel+0x7b0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d12a      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ea8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003eac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4819      	ldr	r0, [pc, #100]	@ (8003f18 <HAL_ADC_ConfigChannel+0x7a8>)
 8003eb4:	f7fe ffe5 	bl	8002e82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eb8:	e021      	b.n	8003efe <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8003f30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d11c      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ec4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ec8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d116      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a12      	ldr	r2, [pc, #72]	@ (8003f20 <HAL_ADC_ConfigChannel+0x7b0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d111      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ede:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	480c      	ldr	r0, [pc, #48]	@ (8003f18 <HAL_ADC_ConfigChannel+0x7a8>)
 8003ee6:	f7fe ffcc 	bl	8002e82 <LL_ADC_SetCommonPathInternalCh>
 8003eea:	e008      	b.n	8003efe <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f06:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	37d8      	adds	r7, #216	@ 0xd8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	80080000 	.word	0x80080000
 8003f18:	50040300 	.word	0x50040300
 8003f1c:	c7520000 	.word	0xc7520000
 8003f20:	50040000 	.word	0x50040000
 8003f24:	20000000 	.word	0x20000000
 8003f28:	053e2d63 	.word	0x053e2d63
 8003f2c:	cb840000 	.word	0xcb840000
 8003f30:	80000001 	.word	0x80000001

08003f34 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff f962 	bl	8003214 <LL_ADC_REG_IsConversionOngoing>
 8003f50:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff f983 	bl	8003262 <LL_ADC_INJ_IsConversionOngoing>
 8003f5c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8098 	beq.w	800409c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d02a      	beq.n	8003fd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	7e5b      	ldrb	r3, [r3, #25]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d126      	bne.n	8003fd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	7e1b      	ldrb	r3, [r3, #24]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d122      	bne.n	8003fd0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f8e:	e014      	b.n	8003fba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	4a45      	ldr	r2, [pc, #276]	@ (80040a8 <ADC_ConversionStop+0x174>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d90d      	bls.n	8003fb4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9c:	f043 0210 	orr.w	r2, r3, #16
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa8:	f043 0201 	orr.w	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e074      	b.n	800409e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc4:	2b40      	cmp	r3, #64	@ 0x40
 8003fc6:	d1e3      	bne.n	8003f90 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2240      	movs	r2, #64	@ 0x40
 8003fce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d014      	beq.n	8004000 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff f91a 	bl	8003214 <LL_ADC_REG_IsConversionOngoing>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00c      	beq.n	8004000 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff f8d7 	bl	800319e <LL_ADC_IsDisableOngoing>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff f8f6 	bl	80031ec <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d014      	beq.n	8004030 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff f929 	bl	8003262 <LL_ADC_INJ_IsConversionOngoing>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00c      	beq.n	8004030 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff f8bf 	bl	800319e <LL_ADC_IsDisableOngoing>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff f905 	bl	800323a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d005      	beq.n	8004042 <ADC_ConversionStop+0x10e>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b03      	cmp	r3, #3
 800403a:	d105      	bne.n	8004048 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800403c:	230c      	movs	r3, #12
 800403e:	617b      	str	r3, [r7, #20]
        break;
 8004040:	e005      	b.n	800404e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004042:	2308      	movs	r3, #8
 8004044:	617b      	str	r3, [r7, #20]
        break;
 8004046:	e002      	b.n	800404e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004048:	2304      	movs	r3, #4
 800404a:	617b      	str	r3, [r7, #20]
        break;
 800404c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800404e:	f7fe fed5 	bl	8002dfc <HAL_GetTick>
 8004052:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004054:	e01b      	b.n	800408e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004056:	f7fe fed1 	bl	8002dfc <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b05      	cmp	r3, #5
 8004062:	d914      	bls.n	800408e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	4013      	ands	r3, r2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00d      	beq.n	800408e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004076:	f043 0210 	orr.w	r2, r3, #16
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e007      	b.n	800409e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1dc      	bne.n	8004056 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	a33fffff 	.word	0xa33fffff

080040ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff f85b 	bl	8003178 <LL_ADC_IsEnabled>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d169      	bne.n	800419c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	4b36      	ldr	r3, [pc, #216]	@ (80041a8 <ADC_Enable+0xfc>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040da:	f043 0210 	orr.w	r2, r3, #16
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	f043 0201 	orr.w	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e055      	b.n	800419e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff f816 	bl	8003128 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80040fc:	482b      	ldr	r0, [pc, #172]	@ (80041ac <ADC_Enable+0x100>)
 80040fe:	f7fe fed3 	bl	8002ea8 <LL_ADC_GetCommonPathInternalCh>
 8004102:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004104:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004108:	2b00      	cmp	r3, #0
 800410a:	d013      	beq.n	8004134 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800410c:	4b28      	ldr	r3, [pc, #160]	@ (80041b0 <ADC_Enable+0x104>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	099b      	lsrs	r3, r3, #6
 8004112:	4a28      	ldr	r2, [pc, #160]	@ (80041b4 <ADC_Enable+0x108>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004126:	e002      	b.n	800412e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	3b01      	subs	r3, #1
 800412c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f9      	bne.n	8004128 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004134:	f7fe fe62 	bl	8002dfc <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800413a:	e028      	b.n	800418e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff f819 	bl	8003178 <LL_ADC_IsEnabled>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f7fe ffe9 	bl	8003128 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004156:	f7fe fe51 	bl	8002dfc <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d914      	bls.n	800418e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d00d      	beq.n	800418e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004176:	f043 0210 	orr.w	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	f043 0201 	orr.w	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e007      	b.n	800419e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d1cf      	bne.n	800413c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	8000003f 	.word	0x8000003f
 80041ac:	50040300 	.word	0x50040300
 80041b0:	20000000 	.word	0x20000000
 80041b4:	053e2d63 	.word	0x053e2d63

080041b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe ffea 	bl	800319e <LL_ADC_IsDisableOngoing>
 80041ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe ffd1 	bl	8003178 <LL_ADC_IsEnabled>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d047      	beq.n	800426c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d144      	bne.n	800426c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 030d 	and.w	r3, r3, #13
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10c      	bne.n	800420a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe ffab 	bl	8003150 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2203      	movs	r2, #3
 8004200:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004202:	f7fe fdfb 	bl	8002dfc <HAL_GetTick>
 8004206:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004208:	e029      	b.n	800425e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420e:	f043 0210 	orr.w	r2, r3, #16
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421a:	f043 0201 	orr.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e023      	b.n	800426e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004226:	f7fe fde9 	bl	8002dfc <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d914      	bls.n	800425e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00d      	beq.n	800425e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004246:	f043 0210 	orr.w	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	f043 0201 	orr.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e007      	b.n	800426e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1dc      	bne.n	8004226 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <LL_ADC_StartCalibration>:
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004288:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004292:	4313      	orrs	r3, r2
 8004294:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	609a      	str	r2, [r3, #8]
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042bc:	d101      	bne.n	80042c2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042da:	2300      	movs	r3, #0
 80042dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_ADCEx_Calibration_Start+0x1c>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e04d      	b.n	8004388 <HAL_ADCEx_Calibration_Start+0xb8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff5f 	bl	80041b8 <ADC_Disable>
 80042fa:	4603      	mov	r3, r0
 80042fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d136      	bne.n	8004372 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004308:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800430c:	f023 0302 	bic.w	r3, r3, #2
 8004310:	f043 0202 	orr.w	r2, r3, #2
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff ffa9 	bl	8004276 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004324:	e014      	b.n	8004350 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	3301      	adds	r3, #1
 800432a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8004332:	d30d      	bcc.n	8004350 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004338:	f023 0312 	bic.w	r3, r3, #18
 800433c:	f043 0210 	orr.w	r2, r3, #16
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e01b      	b.n	8004388 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff ffa7 	bl	80042a8 <LL_ADC_IsCalibrationOnGoing>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e2      	bne.n	8004326 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004364:	f023 0303 	bic.w	r3, r3, #3
 8004368:	f043 0201 	orr.w	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004370:	e005      	b.n	800437e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004376:	f043 0210 	orr.w	r2, r3, #16
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e0ed      	b.n	800457e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fe fb62 	bl	8002a78 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043c4:	f7fe fd1a 	bl	8002dfc <HAL_GetTick>
 80043c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043ca:	e012      	b.n	80043f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043cc:	f7fe fd16 	bl	8002dfc <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b0a      	cmp	r3, #10
 80043d8:	d90b      	bls.n	80043f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2205      	movs	r2, #5
 80043ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e0c5      	b.n	800457e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0e5      	beq.n	80043cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0202 	bic.w	r2, r2, #2
 800440e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004410:	f7fe fcf4 	bl	8002dfc <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004416:	e012      	b.n	800443e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004418:	f7fe fcf0 	bl	8002dfc <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b0a      	cmp	r3, #10
 8004424:	d90b      	bls.n	800443e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2205      	movs	r2, #5
 8004436:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e09f      	b.n	800457e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e5      	bne.n	8004418 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	7e1b      	ldrb	r3, [r3, #24]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d108      	bne.n	8004466 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	e007      	b.n	8004476 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004474:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	7e5b      	ldrb	r3, [r3, #25]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d108      	bne.n	8004490 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e007      	b.n	80044a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800449e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	7e9b      	ldrb	r3, [r3, #26]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d108      	bne.n	80044ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0220 	orr.w	r2, r2, #32
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e007      	b.n	80044ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0220 	bic.w	r2, r2, #32
 80044c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7edb      	ldrb	r3, [r3, #27]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d108      	bne.n	80044e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0210 	bic.w	r2, r2, #16
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e007      	b.n	80044f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0210 	orr.w	r2, r2, #16
 80044f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7f1b      	ldrb	r3, [r3, #28]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d108      	bne.n	800450e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0208 	orr.w	r2, r2, #8
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e007      	b.n	800451e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0208 	bic.w	r2, r2, #8
 800451c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	7f5b      	ldrb	r3, [r3, #29]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d108      	bne.n	8004538 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0204 	orr.w	r2, r2, #4
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	e007      	b.n	8004548 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0204 	bic.w	r2, r2, #4
 8004546:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	ea42 0103 	orr.w	r1, r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	1e5a      	subs	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004586:	b480      	push	{r7}
 8004588:	b087      	sub	sp, #28
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800459c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800459e:	7cfb      	ldrb	r3, [r7, #19]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d003      	beq.n	80045ac <HAL_CAN_ConfigFilter+0x26>
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	f040 80aa 	bne.w	8004700 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80045b2:	f043 0201 	orr.w	r2, r3, #1
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	2201      	movs	r2, #1
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	401a      	ands	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d123      	bne.n	800462e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	401a      	ands	r2, r3
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004608:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	3248      	adds	r2, #72	@ 0x48
 800460e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004622:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004624:	6979      	ldr	r1, [r7, #20]
 8004626:	3348      	adds	r3, #72	@ 0x48
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	440b      	add	r3, r1
 800462c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d122      	bne.n	800467c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	431a      	orrs	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004656:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	3248      	adds	r2, #72	@ 0x48
 800465c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004670:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004672:	6979      	ldr	r1, [r7, #20]
 8004674:	3348      	adds	r3, #72	@ 0x48
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	440b      	add	r3, r1
 800467a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	43db      	mvns	r3, r3
 800468e:	401a      	ands	r2, r3
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004696:	e007      	b.n	80046a8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	43db      	mvns	r3, r3
 80046ba:	401a      	ands	r2, r3
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80046c2:	e007      	b.n	80046d4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	431a      	orrs	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80046f2:	f023 0201 	bic.w	r2, r3, #1
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e006      	b.n	800470e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
  }
}
 800470e:	4618      	mov	r0, r3
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	d12e      	bne.n	800478c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004746:	f7fe fb59 	bl	8002dfc <HAL_GetTick>
 800474a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800474c:	e012      	b.n	8004774 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800474e:	f7fe fb55 	bl	8002dfc <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b0a      	cmp	r3, #10
 800475a:	d90b      	bls.n	8004774 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2205      	movs	r2, #5
 800476c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e012      	b.n	800479a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e5      	bne.n	800474e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	e006      	b.n	800479a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b089      	sub	sp, #36	@ 0x24
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80047c0:	7ffb      	ldrb	r3, [r7, #31]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d003      	beq.n	80047ce <HAL_CAN_AddTxMessage+0x2c>
 80047c6:	7ffb      	ldrb	r3, [r7, #31]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	f040 80ad 	bne.w	8004928 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d105      	bne.n	80047ee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8095 	beq.w	8004918 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	0e1b      	lsrs	r3, r3, #24
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80047f8:	2201      	movs	r2, #1
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	409a      	lsls	r2, r3
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10d      	bne.n	8004826 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004814:	68f9      	ldr	r1, [r7, #12]
 8004816:	6809      	ldr	r1, [r1, #0]
 8004818:	431a      	orrs	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	3318      	adds	r3, #24
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	440b      	add	r3, r1
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e00f      	b.n	8004846 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004830:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800483a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	3318      	adds	r3, #24
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	440b      	add	r3, r1
 8004844:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6819      	ldr	r1, [r3, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	3318      	adds	r3, #24
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	440b      	add	r3, r1
 8004856:	3304      	adds	r3, #4
 8004858:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	7d1b      	ldrb	r3, [r3, #20]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d111      	bne.n	8004886 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	3318      	adds	r3, #24
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	4413      	add	r3, r2
 800486e:	3304      	adds	r3, #4
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	6811      	ldr	r1, [r2, #0]
 8004876:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	3318      	adds	r3, #24
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	440b      	add	r3, r1
 8004882:	3304      	adds	r3, #4
 8004884:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3307      	adds	r3, #7
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	061a      	lsls	r2, r3, #24
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3306      	adds	r3, #6
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3305      	adds	r3, #5
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	4313      	orrs	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	3204      	adds	r2, #4
 80048a6:	7812      	ldrb	r2, [r2, #0]
 80048a8:	4610      	mov	r0, r2
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	6811      	ldr	r1, [r2, #0]
 80048ae:	ea43 0200 	orr.w	r2, r3, r0
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	440b      	add	r3, r1
 80048b8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80048bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3303      	adds	r3, #3
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	061a      	lsls	r2, r3, #24
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3302      	adds	r3, #2
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3301      	adds	r3, #1
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	4313      	orrs	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	7812      	ldrb	r2, [r2, #0]
 80048de:	4610      	mov	r0, r2
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	6811      	ldr	r1, [r2, #0]
 80048e4:	ea43 0200 	orr.w	r2, r3, r0
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	440b      	add	r3, r1
 80048ee:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80048f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3318      	adds	r3, #24
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	4413      	add	r3, r2
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	6811      	ldr	r1, [r2, #0]
 8004906:	f043 0201 	orr.w	r2, r3, #1
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	3318      	adds	r3, #24
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	440b      	add	r3, r1
 8004912:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e00e      	b.n	8004936 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e006      	b.n	8004936 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	3724      	adds	r7, #36	@ 0x24
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004942:	b480      	push	{r7}
 8004944:	b087      	sub	sp, #28
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004956:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004958:	7dfb      	ldrb	r3, [r7, #23]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d003      	beq.n	8004966 <HAL_CAN_GetRxMessage+0x24>
 800495e:	7dfb      	ldrb	r3, [r7, #23]
 8004960:	2b02      	cmp	r3, #2
 8004962:	f040 8103 	bne.w	8004b6c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10e      	bne.n	800498a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d116      	bne.n	80049a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e0f7      	b.n	8004b7a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d107      	bne.n	80049a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0e8      	b.n	8004b7a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	331b      	adds	r3, #27
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	4413      	add	r3, r2
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0204 	and.w	r2, r3, #4
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	331b      	adds	r3, #27
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	4413      	add	r3, r2
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	0d5b      	lsrs	r3, r3, #21
 80049d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e00b      	b.n	80049f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	331b      	adds	r3, #27
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	4413      	add	r3, r2
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	08db      	lsrs	r3, r3, #3
 80049f0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	331b      	adds	r3, #27
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	4413      	add	r3, r2
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0202 	and.w	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	331b      	adds	r3, #27
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	4413      	add	r3, r2
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2208      	movs	r2, #8
 8004a2a:	611a      	str	r2, [r3, #16]
 8004a2c:	e00b      	b.n	8004a46 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	331b      	adds	r3, #27
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	4413      	add	r3, r2
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 020f 	and.w	r2, r3, #15
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	331b      	adds	r3, #27
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	4413      	add	r3, r2
 8004a52:	3304      	adds	r3, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	331b      	adds	r3, #27
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	4413      	add	r3, r2
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	0c1b      	lsrs	r3, r3, #16
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	0a1a      	lsrs	r2, r3, #8
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	0c1a      	lsrs	r2, r3, #16
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	3302      	adds	r3, #2
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	0e1a      	lsrs	r2, r3, #24
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	3303      	adds	r3, #3
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	3304      	adds	r3, #4
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	0a1a      	lsrs	r2, r3, #8
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	3305      	adds	r3, #5
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	0c1a      	lsrs	r2, r3, #16
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	3306      	adds	r3, #6
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	0e1a      	lsrs	r2, r3, #24
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	3307      	adds	r3, #7
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0220 	orr.w	r2, r2, #32
 8004b54:	60da      	str	r2, [r3, #12]
 8004b56:	e007      	b.n	8004b68 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0220 	orr.w	r2, r2, #32
 8004b66:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e006      	b.n	8004b7a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
  }
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b96:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d002      	beq.n	8004ba4 <HAL_CAN_ActivateNotification+0x1e>
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d109      	bne.n	8004bb8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6959      	ldr	r1, [r3, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e006      	b.n	8004bc6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
  }
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b08a      	sub	sp, #40	@ 0x28
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d07c      	beq.n	8004d12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d023      	beq.n	8004c6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2201      	movs	r2, #1
 8004c28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f983 	bl	8004f40 <HAL_CAN_TxMailbox0CompleteCallback>
 8004c3a:	e016      	b.n	8004c6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d004      	beq.n	8004c50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4e:	e00c      	b.n	8004c6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c62:	e002      	b.n	8004c6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f989 	bl	8004f7c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d024      	beq.n	8004cbe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f963 	bl	8004f54 <HAL_CAN_TxMailbox1CompleteCallback>
 8004c8e:	e016      	b.n	8004cbe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d004      	beq.n	8004ca4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca2:	e00c      	b.n	8004cbe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb6:	e002      	b.n	8004cbe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f969 	bl	8004f90 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d024      	beq.n	8004d12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004cd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f943 	bl	8004f68 <HAL_CAN_TxMailbox2CompleteCallback>
 8004ce2:	e016      	b.n	8004d12 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d004      	beq.n	8004cf8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf6:	e00c      	b.n	8004d12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d004      	beq.n	8004d0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0a:	e002      	b.n	8004d12 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f949 	bl	8004fa4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00c      	beq.n	8004d36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d2c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2210      	movs	r2, #16
 8004d34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d006      	beq.n	8004d58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2208      	movs	r2, #8
 8004d50:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f930 	bl	8004fb8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7fd fb3b 	bl	80023ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00c      	beq.n	8004d9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d90:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2210      	movs	r2, #16
 8004d98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00b      	beq.n	8004dbc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d006      	beq.n	8004dbc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2208      	movs	r2, #8
 8004db4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f912 	bl	8004fe0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f8f9 	bl	8004fcc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00b      	beq.n	8004dfc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2210      	movs	r2, #16
 8004df4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f8fc 	bl	8004ff4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00b      	beq.n	8004e1e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d006      	beq.n	8004e1e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2208      	movs	r2, #8
 8004e16:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f8f5 	bl	8005008 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d07b      	beq.n	8004f20 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d072      	beq.n	8004f18 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d008      	beq.n	8004e4e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d008      	beq.n	8004e6a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	f043 0302 	orr.w	r3, r3, #2
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d043      	beq.n	8004f18 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d03e      	beq.n	8004f18 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ea0:	2b60      	cmp	r3, #96	@ 0x60
 8004ea2:	d02b      	beq.n	8004efc <HAL_CAN_IRQHandler+0x32a>
 8004ea4:	2b60      	cmp	r3, #96	@ 0x60
 8004ea6:	d82e      	bhi.n	8004f06 <HAL_CAN_IRQHandler+0x334>
 8004ea8:	2b50      	cmp	r3, #80	@ 0x50
 8004eaa:	d022      	beq.n	8004ef2 <HAL_CAN_IRQHandler+0x320>
 8004eac:	2b50      	cmp	r3, #80	@ 0x50
 8004eae:	d82a      	bhi.n	8004f06 <HAL_CAN_IRQHandler+0x334>
 8004eb0:	2b40      	cmp	r3, #64	@ 0x40
 8004eb2:	d019      	beq.n	8004ee8 <HAL_CAN_IRQHandler+0x316>
 8004eb4:	2b40      	cmp	r3, #64	@ 0x40
 8004eb6:	d826      	bhi.n	8004f06 <HAL_CAN_IRQHandler+0x334>
 8004eb8:	2b30      	cmp	r3, #48	@ 0x30
 8004eba:	d010      	beq.n	8004ede <HAL_CAN_IRQHandler+0x30c>
 8004ebc:	2b30      	cmp	r3, #48	@ 0x30
 8004ebe:	d822      	bhi.n	8004f06 <HAL_CAN_IRQHandler+0x334>
 8004ec0:	2b10      	cmp	r3, #16
 8004ec2:	d002      	beq.n	8004eca <HAL_CAN_IRQHandler+0x2f8>
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d005      	beq.n	8004ed4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004ec8:	e01d      	b.n	8004f06 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	f043 0308 	orr.w	r3, r3, #8
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004ed2:	e019      	b.n	8004f08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	f043 0310 	orr.w	r3, r3, #16
 8004eda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004edc:	e014      	b.n	8004f08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	f043 0320 	orr.w	r3, r3, #32
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004ee6:	e00f      	b.n	8004f08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004ef0:	e00a      	b.n	8004f08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ef8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004efa:	e005      	b.n	8004f08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f02:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004f04:	e000      	b.n	8004f08 <HAL_CAN_IRQHandler+0x336>
            break;
 8004f06:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004f16:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f872 	bl	800501c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004f38:	bf00      	nop
 8004f3a:	3728      	adds	r7, #40	@ 0x28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005040:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <__NVIC_SetPriorityGrouping+0x44>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800504c:	4013      	ands	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800505c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005062:	4a04      	ldr	r2, [pc, #16]	@ (8005074 <__NVIC_SetPriorityGrouping+0x44>)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	60d3      	str	r3, [r2, #12]
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	e000ed00 	.word	0xe000ed00

08005078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800507c:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <__NVIC_GetPriorityGrouping+0x18>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	f003 0307 	and.w	r3, r3, #7
}
 8005086:	4618      	mov	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	e000ed00 	.word	0xe000ed00

08005094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800509e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	db0b      	blt.n	80050be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	f003 021f 	and.w	r2, r3, #31
 80050ac:	4907      	ldr	r1, [pc, #28]	@ (80050cc <__NVIC_EnableIRQ+0x38>)
 80050ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	2001      	movs	r0, #1
 80050b6:	fa00 f202 	lsl.w	r2, r0, r2
 80050ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	e000e100 	.word	0xe000e100

080050d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	6039      	str	r1, [r7, #0]
 80050da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	db0a      	blt.n	80050fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	490c      	ldr	r1, [pc, #48]	@ (800511c <__NVIC_SetPriority+0x4c>)
 80050ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ee:	0112      	lsls	r2, r2, #4
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	440b      	add	r3, r1
 80050f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050f8:	e00a      	b.n	8005110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	4908      	ldr	r1, [pc, #32]	@ (8005120 <__NVIC_SetPriority+0x50>)
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	3b04      	subs	r3, #4
 8005108:	0112      	lsls	r2, r2, #4
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	440b      	add	r3, r1
 800510e:	761a      	strb	r2, [r3, #24]
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	e000e100 	.word	0xe000e100
 8005120:	e000ed00 	.word	0xe000ed00

08005124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005124:	b480      	push	{r7}
 8005126:	b089      	sub	sp, #36	@ 0x24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f1c3 0307 	rsb	r3, r3, #7
 800513e:	2b04      	cmp	r3, #4
 8005140:	bf28      	it	cs
 8005142:	2304      	movcs	r3, #4
 8005144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3304      	adds	r3, #4
 800514a:	2b06      	cmp	r3, #6
 800514c:	d902      	bls.n	8005154 <NVIC_EncodePriority+0x30>
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	3b03      	subs	r3, #3
 8005152:	e000      	b.n	8005156 <NVIC_EncodePriority+0x32>
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005158:	f04f 32ff 	mov.w	r2, #4294967295
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43da      	mvns	r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	401a      	ands	r2, r3
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800516c:	f04f 31ff 	mov.w	r1, #4294967295
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	fa01 f303 	lsl.w	r3, r1, r3
 8005176:	43d9      	mvns	r1, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800517c:	4313      	orrs	r3, r2
         );
}
 800517e:	4618      	mov	r0, r3
 8005180:	3724      	adds	r7, #36	@ 0x24
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3b01      	subs	r3, #1
 8005198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800519c:	d301      	bcc.n	80051a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800519e:	2301      	movs	r3, #1
 80051a0:	e00f      	b.n	80051c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051a2:	4a0a      	ldr	r2, [pc, #40]	@ (80051cc <SysTick_Config+0x40>)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051aa:	210f      	movs	r1, #15
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	f7ff ff8e 	bl	80050d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051b4:	4b05      	ldr	r3, [pc, #20]	@ (80051cc <SysTick_Config+0x40>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ba:	4b04      	ldr	r3, [pc, #16]	@ (80051cc <SysTick_Config+0x40>)
 80051bc:	2207      	movs	r2, #7
 80051be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	e000e010 	.word	0xe000e010

080051d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff ff29 	bl	8005030 <__NVIC_SetPriorityGrouping>
}
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b086      	sub	sp, #24
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	4603      	mov	r3, r0
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
 80051f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051f8:	f7ff ff3e 	bl	8005078 <__NVIC_GetPriorityGrouping>
 80051fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	6978      	ldr	r0, [r7, #20]
 8005204:	f7ff ff8e 	bl	8005124 <NVIC_EncodePriority>
 8005208:	4602      	mov	r2, r0
 800520a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800520e:	4611      	mov	r1, r2
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff ff5d 	bl	80050d0 <__NVIC_SetPriority>
}
 8005216:	bf00      	nop
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	4603      	mov	r3, r0
 8005226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff ff31 	bl	8005094 <__NVIC_EnableIRQ>
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff ffa2 	bl	800518c <SysTick_Config>
 8005248:	4603      	mov	r3, r0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e054      	b.n	8005310 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	7f5b      	ldrb	r3, [r3, #29]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d105      	bne.n	800527c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fd fc52 	bl	8002b20 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	791b      	ldrb	r3, [r3, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10c      	bne.n	80052a4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a22      	ldr	r2, [pc, #136]	@ (8005318 <HAL_CRC_Init+0xc4>)
 8005290:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0218 	bic.w	r2, r2, #24
 80052a0:	609a      	str	r2, [r3, #8]
 80052a2:	e00c      	b.n	80052be <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6899      	ldr	r1, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	461a      	mov	r2, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f834 	bl	800531c <HAL_CRCEx_Polynomial_Set>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e028      	b.n	8005310 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	795b      	ldrb	r3, [r3, #5]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d105      	bne.n	80052d2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f04f 32ff 	mov.w	r2, #4294967295
 80052ce:	611a      	str	r2, [r3, #16]
 80052d0:	e004      	b.n	80052dc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6912      	ldr	r2, [r2, #16]
 80052da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699a      	ldr	r2, [r3, #24]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	04c11db7 	.word	0x04c11db7

0800531c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800532c:	231f      	movs	r3, #31
 800532e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	75fb      	strb	r3, [r7, #23]
 800533e:	e063      	b.n	8005408 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005340:	bf00      	nop
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1e5a      	subs	r2, r3, #1
 8005346:	613a      	str	r2, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d009      	beq.n	8005360 <HAL_CRCEx_Polynomial_Set+0x44>
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f0      	beq.n	8005342 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b18      	cmp	r3, #24
 8005364:	d846      	bhi.n	80053f4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005366:	a201      	add	r2, pc, #4	@ (adr r2, 800536c <HAL_CRCEx_Polynomial_Set+0x50>)
 8005368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536c:	080053fb 	.word	0x080053fb
 8005370:	080053f5 	.word	0x080053f5
 8005374:	080053f5 	.word	0x080053f5
 8005378:	080053f5 	.word	0x080053f5
 800537c:	080053f5 	.word	0x080053f5
 8005380:	080053f5 	.word	0x080053f5
 8005384:	080053f5 	.word	0x080053f5
 8005388:	080053f5 	.word	0x080053f5
 800538c:	080053e9 	.word	0x080053e9
 8005390:	080053f5 	.word	0x080053f5
 8005394:	080053f5 	.word	0x080053f5
 8005398:	080053f5 	.word	0x080053f5
 800539c:	080053f5 	.word	0x080053f5
 80053a0:	080053f5 	.word	0x080053f5
 80053a4:	080053f5 	.word	0x080053f5
 80053a8:	080053f5 	.word	0x080053f5
 80053ac:	080053dd 	.word	0x080053dd
 80053b0:	080053f5 	.word	0x080053f5
 80053b4:	080053f5 	.word	0x080053f5
 80053b8:	080053f5 	.word	0x080053f5
 80053bc:	080053f5 	.word	0x080053f5
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	080053f5 	.word	0x080053f5
 80053c8:	080053f5 	.word	0x080053f5
 80053cc:	080053d1 	.word	0x080053d1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b06      	cmp	r3, #6
 80053d4:	d913      	bls.n	80053fe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80053da:	e010      	b.n	80053fe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b07      	cmp	r3, #7
 80053e0:	d90f      	bls.n	8005402 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80053e6:	e00c      	b.n	8005402 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2b0f      	cmp	r3, #15
 80053ec:	d90b      	bls.n	8005406 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80053f2:	e008      	b.n	8005406 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	75fb      	strb	r3, [r7, #23]
        break;
 80053f8:	e006      	b.n	8005408 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80053fa:	bf00      	nop
 80053fc:	e004      	b.n	8005408 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80053fe:	bf00      	nop
 8005400:	e002      	b.n	8005408 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005402:	bf00      	nop
 8005404:	e000      	b.n	8005408 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005406:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005408:	7dfb      	ldrb	r3, [r7, #23]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10d      	bne.n	800542a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f023 0118 	bic.w	r1, r3, #24
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	430a      	orrs	r2, r1
 8005428:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800542a:	7dfb      	ldrb	r3, [r7, #23]
}
 800542c:	4618      	mov	r0, r3
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005446:	e148      	b.n	80056da <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	2101      	movs	r1, #1
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	fa01 f303 	lsl.w	r3, r1, r3
 8005454:	4013      	ands	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 813a 	beq.w	80056d4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d005      	beq.n	8005478 <HAL_GPIO_Init+0x40>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 0303 	and.w	r3, r3, #3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d130      	bne.n	80054da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	2203      	movs	r2, #3
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	43db      	mvns	r3, r3
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4013      	ands	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054ae:	2201      	movs	r2, #1
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43db      	mvns	r3, r3
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4013      	ands	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	f003 0201 	and.w	r2, r3, #1
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d017      	beq.n	8005516 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	2203      	movs	r2, #3
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	43db      	mvns	r3, r3
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4013      	ands	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d123      	bne.n	800556a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	08da      	lsrs	r2, r3, #3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3208      	adds	r2, #8
 800552a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	220f      	movs	r2, #15
 800553a:	fa02 f303 	lsl.w	r3, r2, r3
 800553e:	43db      	mvns	r3, r3
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4013      	ands	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	08da      	lsrs	r2, r3, #3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3208      	adds	r2, #8
 8005564:	6939      	ldr	r1, [r7, #16]
 8005566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	2203      	movs	r2, #3
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	43db      	mvns	r3, r3
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4013      	ands	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 0203 	and.w	r2, r3, #3
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 8094 	beq.w	80056d4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ac:	4b52      	ldr	r3, [pc, #328]	@ (80056f8 <HAL_GPIO_Init+0x2c0>)
 80055ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b0:	4a51      	ldr	r2, [pc, #324]	@ (80056f8 <HAL_GPIO_Init+0x2c0>)
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80055b8:	4b4f      	ldr	r3, [pc, #316]	@ (80056f8 <HAL_GPIO_Init+0x2c0>)
 80055ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055c4:	4a4d      	ldr	r2, [pc, #308]	@ (80056fc <HAL_GPIO_Init+0x2c4>)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	089b      	lsrs	r3, r3, #2
 80055ca:	3302      	adds	r3, #2
 80055cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	220f      	movs	r2, #15
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4013      	ands	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80055ee:	d00d      	beq.n	800560c <HAL_GPIO_Init+0x1d4>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a43      	ldr	r2, [pc, #268]	@ (8005700 <HAL_GPIO_Init+0x2c8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <HAL_GPIO_Init+0x1d0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a42      	ldr	r2, [pc, #264]	@ (8005704 <HAL_GPIO_Init+0x2cc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d101      	bne.n	8005604 <HAL_GPIO_Init+0x1cc>
 8005600:	2302      	movs	r3, #2
 8005602:	e004      	b.n	800560e <HAL_GPIO_Init+0x1d6>
 8005604:	2307      	movs	r3, #7
 8005606:	e002      	b.n	800560e <HAL_GPIO_Init+0x1d6>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <HAL_GPIO_Init+0x1d6>
 800560c:	2300      	movs	r3, #0
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	f002 0203 	and.w	r2, r2, #3
 8005614:	0092      	lsls	r2, r2, #2
 8005616:	4093      	lsls	r3, r2
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800561e:	4937      	ldr	r1, [pc, #220]	@ (80056fc <HAL_GPIO_Init+0x2c4>)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	3302      	adds	r3, #2
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800562c:	4b36      	ldr	r3, [pc, #216]	@ (8005708 <HAL_GPIO_Init+0x2d0>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	43db      	mvns	r3, r3
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4013      	ands	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005650:	4a2d      	ldr	r2, [pc, #180]	@ (8005708 <HAL_GPIO_Init+0x2d0>)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005656:	4b2c      	ldr	r3, [pc, #176]	@ (8005708 <HAL_GPIO_Init+0x2d0>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	43db      	mvns	r3, r3
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4013      	ands	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800567a:	4a23      	ldr	r2, [pc, #140]	@ (8005708 <HAL_GPIO_Init+0x2d0>)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005680:	4b21      	ldr	r3, [pc, #132]	@ (8005708 <HAL_GPIO_Init+0x2d0>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	43db      	mvns	r3, r3
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056a4:	4a18      	ldr	r2, [pc, #96]	@ (8005708 <HAL_GPIO_Init+0x2d0>)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80056aa:	4b17      	ldr	r3, [pc, #92]	@ (8005708 <HAL_GPIO_Init+0x2d0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	43db      	mvns	r3, r3
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4013      	ands	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005708 <HAL_GPIO_Init+0x2d0>)
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	3301      	adds	r3, #1
 80056d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	fa22 f303 	lsr.w	r3, r2, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f47f aeaf 	bne.w	8005448 <HAL_GPIO_Init+0x10>
  }
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	40021000 	.word	0x40021000
 80056fc:	40010000 	.word	0x40010000
 8005700:	48000400 	.word	0x48000400
 8005704:	48000800 	.word	0x48000800
 8005708:	40010400 	.word	0x40010400

0800570c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	807b      	strh	r3, [r7, #2]
 8005718:	4613      	mov	r3, r2
 800571a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800571c:	787b      	ldrb	r3, [r7, #1]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005722:	887a      	ldrh	r2, [r7, #2]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005728:	e002      	b.n	8005730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800572a:	887a      	ldrh	r2, [r7, #2]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e08d      	b.n	800586a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fd f9fc 	bl	8002b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2224      	movs	r2, #36	@ 0x24
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0201 	bic.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800578c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800579c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d107      	bne.n	80057b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057b2:	609a      	str	r2, [r3, #8]
 80057b4:	e006      	b.n	80057c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80057c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d108      	bne.n	80057de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057da:	605a      	str	r2, [r3, #4]
 80057dc:	e007      	b.n	80057ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6812      	ldr	r2, [r2, #0]
 80057f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80057fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005800:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005810:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69d9      	ldr	r1, [r3, #28]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1a      	ldr	r2, [r3, #32]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	4608      	mov	r0, r1
 800587e:	4611      	mov	r1, r2
 8005880:	461a      	mov	r2, r3
 8005882:	4603      	mov	r3, r0
 8005884:	817b      	strh	r3, [r7, #10]
 8005886:	460b      	mov	r3, r1
 8005888:	813b      	strh	r3, [r7, #8]
 800588a:	4613      	mov	r3, r2
 800588c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b20      	cmp	r3, #32
 8005898:	f040 80f9 	bne.w	8005a8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_I2C_Mem_Write+0x34>
 80058a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d105      	bne.n	80058b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0ed      	b.n	8005a90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_I2C_Mem_Write+0x4e>
 80058be:	2302      	movs	r3, #2
 80058c0:	e0e6      	b.n	8005a90 <HAL_I2C_Mem_Write+0x21c>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058ca:	f7fd fa97 	bl	8002dfc <HAL_GetTick>
 80058ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2319      	movs	r3, #25
 80058d6:	2201      	movs	r2, #1
 80058d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fac3 	bl	8005e68 <I2C_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0d1      	b.n	8005a90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2221      	movs	r2, #33	@ 0x21
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2240      	movs	r2, #64	@ 0x40
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a3a      	ldr	r2, [r7, #32]
 8005906:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800590c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005914:	88f8      	ldrh	r0, [r7, #6]
 8005916:	893a      	ldrh	r2, [r7, #8]
 8005918:	8979      	ldrh	r1, [r7, #10]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	4603      	mov	r3, r0
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f9d3 	bl	8005cd0 <I2C_RequestMemoryWrite>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0a9      	b.n	8005a90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	2bff      	cmp	r3, #255	@ 0xff
 8005944:	d90e      	bls.n	8005964 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	22ff      	movs	r2, #255	@ 0xff
 800594a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005950:	b2da      	uxtb	r2, r3
 8005952:	8979      	ldrh	r1, [r7, #10]
 8005954:	2300      	movs	r3, #0
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 fc47 	bl	80061f0 <I2C_TransferConfig>
 8005962:	e00f      	b.n	8005984 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005972:	b2da      	uxtb	r2, r3
 8005974:	8979      	ldrh	r1, [r7, #10]
 8005976:	2300      	movs	r3, #0
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fc36 	bl	80061f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 fac6 	bl	8005f1a <I2C_WaitOnTXISFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e07b      	b.n	8005a90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d034      	beq.n	8005a3c <HAL_I2C_Mem_Write+0x1c8>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d130      	bne.n	8005a3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e0:	2200      	movs	r2, #0
 80059e2:	2180      	movs	r1, #128	@ 0x80
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 fa3f 	bl	8005e68 <I2C_WaitOnFlagUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e04d      	b.n	8005a90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2bff      	cmp	r3, #255	@ 0xff
 80059fc:	d90e      	bls.n	8005a1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	22ff      	movs	r2, #255	@ 0xff
 8005a02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	8979      	ldrh	r1, [r7, #10]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 fbeb 	bl	80061f0 <I2C_TransferConfig>
 8005a1a:	e00f      	b.n	8005a3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	8979      	ldrh	r1, [r7, #10]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fbda 	bl	80061f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d19e      	bne.n	8005984 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 faac 	bl	8005fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e01a      	b.n	8005a90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6859      	ldr	r1, [r3, #4]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <HAL_I2C_Mem_Write+0x224>)
 8005a6e:	400b      	ands	r3, r1
 8005a70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e000      	b.n	8005a90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a8e:	2302      	movs	r3, #2
  }
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	fe00e800 	.word	0xfe00e800

08005a9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	817b      	strh	r3, [r7, #10]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	813b      	strh	r3, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	f040 80fd 	bne.w	8005cbe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <HAL_I2C_Mem_Read+0x34>
 8005aca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d105      	bne.n	8005adc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ad6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0f1      	b.n	8005cc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_I2C_Mem_Read+0x4e>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e0ea      	b.n	8005cc0 <HAL_I2C_Mem_Read+0x224>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005af2:	f7fd f983 	bl	8002dfc <HAL_GetTick>
 8005af6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	2319      	movs	r3, #25
 8005afe:	2201      	movs	r2, #1
 8005b00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f9af 	bl	8005e68 <I2C_WaitOnFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0d5      	b.n	8005cc0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2222      	movs	r2, #34	@ 0x22
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2240      	movs	r2, #64	@ 0x40
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a3a      	ldr	r2, [r7, #32]
 8005b2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b3c:	88f8      	ldrh	r0, [r7, #6]
 8005b3e:	893a      	ldrh	r2, [r7, #8]
 8005b40:	8979      	ldrh	r1, [r7, #10]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f913 	bl	8005d78 <I2C_RequestMemoryRead>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e0ad      	b.n	8005cc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2bff      	cmp	r3, #255	@ 0xff
 8005b6c:	d90e      	bls.n	8005b8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	8979      	ldrh	r1, [r7, #10]
 8005b7c:	4b52      	ldr	r3, [pc, #328]	@ (8005cc8 <HAL_I2C_Mem_Read+0x22c>)
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fb33 	bl	80061f0 <I2C_TransferConfig>
 8005b8a:	e00f      	b.n	8005bac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	8979      	ldrh	r1, [r7, #10]
 8005b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005cc8 <HAL_I2C_Mem_Read+0x22c>)
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fb22 	bl	80061f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2104      	movs	r1, #4
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f956 	bl	8005e68 <I2C_WaitOnFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e07c      	b.n	8005cc0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d034      	beq.n	8005c6c <HAL_I2C_Mem_Read+0x1d0>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d130      	bne.n	8005c6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c10:	2200      	movs	r2, #0
 8005c12:	2180      	movs	r1, #128	@ 0x80
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f927 	bl	8005e68 <I2C_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e04d      	b.n	8005cc0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2bff      	cmp	r3, #255	@ 0xff
 8005c2c:	d90e      	bls.n	8005c4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	8979      	ldrh	r1, [r7, #10]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fad3 	bl	80061f0 <I2C_TransferConfig>
 8005c4a:	e00f      	b.n	8005c6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	8979      	ldrh	r1, [r7, #10]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 fac2 	bl	80061f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d19a      	bne.n	8005bac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f994 	bl	8005fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e01a      	b.n	8005cc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ccc <HAL_I2C_Mem_Read+0x230>)
 8005c9e:	400b      	ands	r3, r1
 8005ca0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e000      	b.n	8005cc0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005cbe:	2302      	movs	r3, #2
  }
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	80002400 	.word	0x80002400
 8005ccc:	fe00e800 	.word	0xfe00e800

08005cd0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	4608      	mov	r0, r1
 8005cda:	4611      	mov	r1, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	817b      	strh	r3, [r7, #10]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	813b      	strh	r3, [r7, #8]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005cea:	88fb      	ldrh	r3, [r7, #6]
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	8979      	ldrh	r1, [r7, #10]
 8005cf0:	4b20      	ldr	r3, [pc, #128]	@ (8005d74 <I2C_RequestMemoryWrite+0xa4>)
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 fa79 	bl	80061f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	69b9      	ldr	r1, [r7, #24]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f909 	bl	8005f1a <I2C_WaitOnTXISFlagUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e02c      	b.n	8005d6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d105      	bne.n	8005d24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d18:	893b      	ldrh	r3, [r7, #8]
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d22:	e015      	b.n	8005d50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d24:	893b      	ldrh	r3, [r7, #8]
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	69b9      	ldr	r1, [r7, #24]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f8ef 	bl	8005f1a <I2C_WaitOnTXISFlagUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e012      	b.n	8005d6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d46:	893b      	ldrh	r3, [r7, #8]
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	2200      	movs	r2, #0
 8005d58:	2180      	movs	r1, #128	@ 0x80
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f884 	bl	8005e68 <I2C_WaitOnFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	80002000 	.word	0x80002000

08005d78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	4608      	mov	r0, r1
 8005d82:	4611      	mov	r1, r2
 8005d84:	461a      	mov	r2, r3
 8005d86:	4603      	mov	r3, r0
 8005d88:	817b      	strh	r3, [r7, #10]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	813b      	strh	r3, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d92:	88fb      	ldrh	r3, [r7, #6]
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	8979      	ldrh	r1, [r7, #10]
 8005d98:	4b20      	ldr	r3, [pc, #128]	@ (8005e1c <I2C_RequestMemoryRead+0xa4>)
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fa26 	bl	80061f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	69b9      	ldr	r1, [r7, #24]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f8b6 	bl	8005f1a <I2C_WaitOnTXISFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e02c      	b.n	8005e12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d105      	bne.n	8005dca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dbe:	893b      	ldrh	r3, [r7, #8]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005dc8:	e015      	b.n	8005df6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005dca:	893b      	ldrh	r3, [r7, #8]
 8005dcc:	0a1b      	lsrs	r3, r3, #8
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	69b9      	ldr	r1, [r7, #24]
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f89c 	bl	8005f1a <I2C_WaitOnTXISFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e012      	b.n	8005e12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dec:	893b      	ldrh	r3, [r7, #8]
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2140      	movs	r1, #64	@ 0x40
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f831 	bl	8005e68 <I2C_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	80002000 	.word	0x80002000

08005e20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d103      	bne.n	8005e3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d007      	beq.n	8005e5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	619a      	str	r2, [r3, #24]
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	4613      	mov	r3, r2
 8005e76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e78:	e03b      	b.n	8005ef2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 f8d6 	bl	8006030 <I2C_IsErrorOccurred>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e041      	b.n	8005f12 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d02d      	beq.n	8005ef2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e96:	f7fc ffb1 	bl	8002dfc <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d302      	bcc.n	8005eac <I2C_WaitOnFlagUntilTimeout+0x44>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d122      	bne.n	8005ef2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	bf0c      	ite	eq
 8005ebc:	2301      	moveq	r3, #1
 8005ebe:	2300      	movne	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d113      	bne.n	8005ef2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ece:	f043 0220 	orr.w	r2, r3, #32
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e00f      	b.n	8005f12 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4013      	ands	r3, r2
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	bf0c      	ite	eq
 8005f02:	2301      	moveq	r3, #1
 8005f04:	2300      	movne	r3, #0
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d0b4      	beq.n	8005e7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f26:	e033      	b.n	8005f90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f87f 	bl	8006030 <I2C_IsErrorOccurred>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e031      	b.n	8005fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f42:	d025      	beq.n	8005f90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f44:	f7fc ff5a 	bl	8002dfc <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d302      	bcc.n	8005f5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d11a      	bne.n	8005f90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d013      	beq.n	8005f90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6c:	f043 0220 	orr.w	r2, r3, #32
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e007      	b.n	8005fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d1c4      	bne.n	8005f28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fb4:	e02f      	b.n	8006016 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 f838 	bl	8006030 <I2C_IsErrorOccurred>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e02d      	b.n	8006026 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fca:	f7fc ff17 	bl	8002dfc <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d302      	bcc.n	8005fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d11a      	bne.n	8006016 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d013      	beq.n	8006016 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff2:	f043 0220 	orr.w	r2, r3, #32
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e007      	b.n	8006026 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b20      	cmp	r3, #32
 8006022:	d1c8      	bne.n	8005fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08a      	sub	sp, #40	@ 0x28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b00      	cmp	r3, #0
 800605a:	d068      	beq.n	800612e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2210      	movs	r2, #16
 8006062:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006064:	e049      	b.n	80060fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606c:	d045      	beq.n	80060fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800606e:	f7fc fec5 	bl	8002dfc <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	d302      	bcc.n	8006084 <I2C_IsErrorOccurred+0x54>
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d13a      	bne.n	80060fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800608e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006096:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060a6:	d121      	bne.n	80060ec <I2C_IsErrorOccurred+0xbc>
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060ae:	d01d      	beq.n	80060ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80060b0:	7cfb      	ldrb	r3, [r7, #19]
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d01a      	beq.n	80060ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80060c6:	f7fc fe99 	bl	8002dfc <HAL_GetTick>
 80060ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060cc:	e00e      	b.n	80060ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80060ce:	f7fc fe95 	bl	8002dfc <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b19      	cmp	r3, #25
 80060da:	d907      	bls.n	80060ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	f043 0320 	orr.w	r3, r3, #32
 80060e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80060ea:	e006      	b.n	80060fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d1e9      	bne.n	80060ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b20      	cmp	r3, #32
 8006106:	d003      	beq.n	8006110 <I2C_IsErrorOccurred+0xe0>
 8006108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0aa      	beq.n	8006066 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006114:	2b00      	cmp	r3, #0
 8006116:	d103      	bne.n	8006120 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2220      	movs	r2, #32
 800611e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	f043 0304 	orr.w	r3, r3, #4
 8006126:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	f043 0301 	orr.w	r3, r3, #1
 8006146:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006150:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	f043 0308 	orr.w	r3, r3, #8
 8006168:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006172:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	f043 0302 	orr.w	r3, r3, #2
 800618a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006194:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800619c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01c      	beq.n	80061de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f7ff fe3b 	bl	8005e20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6859      	ldr	r1, [r3, #4]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	4b0d      	ldr	r3, [pc, #52]	@ (80061ec <I2C_IsErrorOccurred+0x1bc>)
 80061b6:	400b      	ands	r3, r1
 80061b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	431a      	orrs	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80061de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3728      	adds	r7, #40	@ 0x28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	fe00e800 	.word	0xfe00e800

080061f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	607b      	str	r3, [r7, #4]
 80061fa:	460b      	mov	r3, r1
 80061fc:	817b      	strh	r3, [r7, #10]
 80061fe:	4613      	mov	r3, r2
 8006200:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006202:	897b      	ldrh	r3, [r7, #10]
 8006204:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006208:	7a7b      	ldrb	r3, [r7, #9]
 800620a:	041b      	lsls	r3, r3, #16
 800620c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006210:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	4313      	orrs	r3, r2
 800621a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800621e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	0d5b      	lsrs	r3, r3, #21
 800622a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800622e:	4b08      	ldr	r3, [pc, #32]	@ (8006250 <I2C_TransferConfig+0x60>)
 8006230:	430b      	orrs	r3, r1
 8006232:	43db      	mvns	r3, r3
 8006234:	ea02 0103 	and.w	r1, r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	430a      	orrs	r2, r1
 8006240:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006242:	bf00      	nop
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	03ff63ff 	.word	0x03ff63ff

08006254 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b20      	cmp	r3, #32
 8006268:	d138      	bne.n	80062dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006274:	2302      	movs	r3, #2
 8006276:	e032      	b.n	80062de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2224      	movs	r2, #36	@ 0x24
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6819      	ldr	r1, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	e000      	b.n	80062de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062dc:	2302      	movs	r3, #2
  }
}
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d139      	bne.n	8006374 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800630a:	2302      	movs	r3, #2
 800630c:	e033      	b.n	8006376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2224      	movs	r2, #36	@ 0x24
 800631a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0201 	bic.w	r2, r2, #1
 800632c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800633c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	e000      	b.n	8006376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006374:	2302      	movs	r3, #2
  }
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
	...

08006384 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006388:	4b04      	ldr	r3, [pc, #16]	@ (800639c <HAL_PWREx_GetVoltageRange+0x18>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006390:	4618      	mov	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40007000 	.word	0x40007000

080063a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ae:	d130      	bne.n	8006412 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80063b0:	4b23      	ldr	r3, [pc, #140]	@ (8006440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063bc:	d038      	beq.n	8006430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063be:	4b20      	ldr	r3, [pc, #128]	@ (8006440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006444 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2232      	movs	r2, #50	@ 0x32
 80063d4:	fb02 f303 	mul.w	r3, r2, r3
 80063d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006448 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80063da:	fba2 2303 	umull	r2, r3, r2, r3
 80063de:	0c9b      	lsrs	r3, r3, #18
 80063e0:	3301      	adds	r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063e4:	e002      	b.n	80063ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063ec:	4b14      	ldr	r3, [pc, #80]	@ (8006440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f8:	d102      	bne.n	8006400 <HAL_PWREx_ControlVoltageScaling+0x60>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1f2      	bne.n	80063e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006400:	4b0f      	ldr	r3, [pc, #60]	@ (8006440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800640c:	d110      	bne.n	8006430 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e00f      	b.n	8006432 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006412:	4b0b      	ldr	r3, [pc, #44]	@ (8006440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800641a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800641e:	d007      	beq.n	8006430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006420:	4b07      	ldr	r3, [pc, #28]	@ (8006440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006428:	4a05      	ldr	r2, [pc, #20]	@ (8006440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800642a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800642e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40007000 	.word	0x40007000
 8006444:	20000000 	.word	0x20000000
 8006448:	431bde83 	.word	0x431bde83

0800644c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d102      	bne.n	8006460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	f000 bc02 	b.w	8006c64 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006460:	4b96      	ldr	r3, [pc, #600]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 030c 	and.w	r3, r3, #12
 8006468:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800646a:	4b94      	ldr	r3, [pc, #592]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 80e4 	beq.w	800664a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <HAL_RCC_OscConfig+0x4c>
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	2b0c      	cmp	r3, #12
 800648c:	f040 808b 	bne.w	80065a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b01      	cmp	r3, #1
 8006494:	f040 8087 	bne.w	80065a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006498:	4b88      	ldr	r3, [pc, #544]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_RCC_OscConfig+0x64>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e3d9      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1a      	ldr	r2, [r3, #32]
 80064b4:	4b81      	ldr	r3, [pc, #516]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d004      	beq.n	80064ca <HAL_RCC_OscConfig+0x7e>
 80064c0:	4b7e      	ldr	r3, [pc, #504]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064c8:	e005      	b.n	80064d6 <HAL_RCC_OscConfig+0x8a>
 80064ca:	4b7c      	ldr	r3, [pc, #496]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80064cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064d0:	091b      	lsrs	r3, r3, #4
 80064d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d223      	bcs.n	8006522 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fd54 	bl	8006f8c <RCC_SetFlashLatencyFromMSIRange>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e3ba      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064ee:	4b73      	ldr	r3, [pc, #460]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a72      	ldr	r2, [pc, #456]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80064f4:	f043 0308 	orr.w	r3, r3, #8
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	4b70      	ldr	r3, [pc, #448]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	496d      	ldr	r1, [pc, #436]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 8006508:	4313      	orrs	r3, r2
 800650a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800650c:	4b6b      	ldr	r3, [pc, #428]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	021b      	lsls	r3, r3, #8
 800651a:	4968      	ldr	r1, [pc, #416]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 800651c:	4313      	orrs	r3, r2
 800651e:	604b      	str	r3, [r1, #4]
 8006520:	e025      	b.n	800656e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006522:	4b66      	ldr	r3, [pc, #408]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a65      	ldr	r2, [pc, #404]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 8006528:	f043 0308 	orr.w	r3, r3, #8
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	4b63      	ldr	r3, [pc, #396]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	4960      	ldr	r1, [pc, #384]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 800653c:	4313      	orrs	r3, r2
 800653e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006540:	4b5e      	ldr	r3, [pc, #376]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	021b      	lsls	r3, r3, #8
 800654e:	495b      	ldr	r1, [pc, #364]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 8006550:	4313      	orrs	r3, r2
 8006552:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d109      	bne.n	800656e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fd14 	bl	8006f8c <RCC_SetFlashLatencyFromMSIRange>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e37a      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800656e:	f000 fc81 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8006572:	4602      	mov	r2, r0
 8006574:	4b51      	ldr	r3, [pc, #324]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	091b      	lsrs	r3, r3, #4
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	4950      	ldr	r1, [pc, #320]	@ (80066c0 <HAL_RCC_OscConfig+0x274>)
 8006580:	5ccb      	ldrb	r3, [r1, r3]
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	fa22 f303 	lsr.w	r3, r2, r3
 800658a:	4a4e      	ldr	r2, [pc, #312]	@ (80066c4 <HAL_RCC_OscConfig+0x278>)
 800658c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800658e:	4b4e      	ldr	r3, [pc, #312]	@ (80066c8 <HAL_RCC_OscConfig+0x27c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7fc fbe2 	bl	8002d5c <HAL_InitTick>
 8006598:	4603      	mov	r3, r0
 800659a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d052      	beq.n	8006648 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	e35e      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d032      	beq.n	8006614 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80065ae:	4b43      	ldr	r3, [pc, #268]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a42      	ldr	r2, [pc, #264]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80065b4:	f043 0301 	orr.w	r3, r3, #1
 80065b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065ba:	f7fc fc1f 	bl	8002dfc <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065c0:	e008      	b.n	80065d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065c2:	f7fc fc1b 	bl	8002dfc <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e347      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065d4:	4b39      	ldr	r3, [pc, #228]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0f0      	beq.n	80065c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065e0:	4b36      	ldr	r3, [pc, #216]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a35      	ldr	r2, [pc, #212]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80065e6:	f043 0308 	orr.w	r3, r3, #8
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	4b33      	ldr	r3, [pc, #204]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	4930      	ldr	r1, [pc, #192]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065fe:	4b2f      	ldr	r3, [pc, #188]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	492b      	ldr	r1, [pc, #172]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 800660e:	4313      	orrs	r3, r2
 8006610:	604b      	str	r3, [r1, #4]
 8006612:	e01a      	b.n	800664a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006614:	4b29      	ldr	r3, [pc, #164]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a28      	ldr	r2, [pc, #160]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006620:	f7fc fbec 	bl	8002dfc <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006628:	f7fc fbe8 	bl	8002dfc <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e314      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800663a:	4b20      	ldr	r3, [pc, #128]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0x1dc>
 8006646:	e000      	b.n	800664a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006648:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d073      	beq.n	800673e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b08      	cmp	r3, #8
 800665a:	d005      	beq.n	8006668 <HAL_RCC_OscConfig+0x21c>
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	2b0c      	cmp	r3, #12
 8006660:	d10e      	bne.n	8006680 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b03      	cmp	r3, #3
 8006666:	d10b      	bne.n	8006680 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006668:	4b14      	ldr	r3, [pc, #80]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d063      	beq.n	800673c <HAL_RCC_OscConfig+0x2f0>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d15f      	bne.n	800673c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e2f1      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006688:	d106      	bne.n	8006698 <HAL_RCC_OscConfig+0x24c>
 800668a:	4b0c      	ldr	r3, [pc, #48]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a0b      	ldr	r2, [pc, #44]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 8006690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	e025      	b.n	80066e4 <HAL_RCC_OscConfig+0x298>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066a0:	d114      	bne.n	80066cc <HAL_RCC_OscConfig+0x280>
 80066a2:	4b06      	ldr	r3, [pc, #24]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a05      	ldr	r2, [pc, #20]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80066a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	4b03      	ldr	r3, [pc, #12]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a02      	ldr	r2, [pc, #8]	@ (80066bc <HAL_RCC_OscConfig+0x270>)
 80066b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	e013      	b.n	80066e4 <HAL_RCC_OscConfig+0x298>
 80066bc:	40021000 	.word	0x40021000
 80066c0:	080078e4 	.word	0x080078e4
 80066c4:	20000000 	.word	0x20000000
 80066c8:	20000004 	.word	0x20000004
 80066cc:	4ba0      	ldr	r3, [pc, #640]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a9f      	ldr	r2, [pc, #636]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80066d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	4b9d      	ldr	r3, [pc, #628]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a9c      	ldr	r2, [pc, #624]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80066de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d013      	beq.n	8006714 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ec:	f7fc fb86 	bl	8002dfc <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066f4:	f7fc fb82 	bl	8002dfc <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b64      	cmp	r3, #100	@ 0x64
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e2ae      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006706:	4b92      	ldr	r3, [pc, #584]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0f0      	beq.n	80066f4 <HAL_RCC_OscConfig+0x2a8>
 8006712:	e014      	b.n	800673e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006714:	f7fc fb72 	bl	8002dfc <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800671c:	f7fc fb6e 	bl	8002dfc <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	@ 0x64
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e29a      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800672e:	4b88      	ldr	r3, [pc, #544]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1f0      	bne.n	800671c <HAL_RCC_OscConfig+0x2d0>
 800673a:	e000      	b.n	800673e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800673c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d060      	beq.n	800680c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	2b04      	cmp	r3, #4
 800674e:	d005      	beq.n	800675c <HAL_RCC_OscConfig+0x310>
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2b0c      	cmp	r3, #12
 8006754:	d119      	bne.n	800678a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d116      	bne.n	800678a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800675c:	4b7c      	ldr	r3, [pc, #496]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <HAL_RCC_OscConfig+0x328>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e277      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006774:	4b76      	ldr	r3, [pc, #472]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	061b      	lsls	r3, r3, #24
 8006782:	4973      	ldr	r1, [pc, #460]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006784:	4313      	orrs	r3, r2
 8006786:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006788:	e040      	b.n	800680c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d023      	beq.n	80067da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006792:	4b6f      	ldr	r3, [pc, #444]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a6e      	ldr	r2, [pc, #440]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800679c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679e:	f7fc fb2d 	bl	8002dfc <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067a6:	f7fc fb29 	bl	8002dfc <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e255      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067b8:	4b65      	ldr	r3, [pc, #404]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067c4:	4b62      	ldr	r3, [pc, #392]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	061b      	lsls	r3, r3, #24
 80067d2:	495f      	ldr	r1, [pc, #380]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	604b      	str	r3, [r1, #4]
 80067d8:	e018      	b.n	800680c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067da:	4b5d      	ldr	r3, [pc, #372]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a5c      	ldr	r2, [pc, #368]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80067e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e6:	f7fc fb09 	bl	8002dfc <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067ec:	e008      	b.n	8006800 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ee:	f7fc fb05 	bl	8002dfc <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e231      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006800:	4b53      	ldr	r3, [pc, #332]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1f0      	bne.n	80067ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b00      	cmp	r3, #0
 8006816:	d03c      	beq.n	8006892 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01c      	beq.n	800685a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006820:	4b4b      	ldr	r3, [pc, #300]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006826:	4a4a      	ldr	r2, [pc, #296]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006828:	f043 0301 	orr.w	r3, r3, #1
 800682c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006830:	f7fc fae4 	bl	8002dfc <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006838:	f7fc fae0 	bl	8002dfc <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e20c      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800684a:	4b41      	ldr	r3, [pc, #260]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 800684c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0ef      	beq.n	8006838 <HAL_RCC_OscConfig+0x3ec>
 8006858:	e01b      	b.n	8006892 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800685a:	4b3d      	ldr	r3, [pc, #244]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 800685c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006860:	4a3b      	ldr	r2, [pc, #236]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006862:	f023 0301 	bic.w	r3, r3, #1
 8006866:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686a:	f7fc fac7 	bl	8002dfc <HAL_GetTick>
 800686e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006870:	e008      	b.n	8006884 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006872:	f7fc fac3 	bl	8002dfc <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d901      	bls.n	8006884 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e1ef      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006884:	4b32      	ldr	r3, [pc, #200]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1ef      	bne.n	8006872 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80a6 	beq.w	80069ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068a0:	2300      	movs	r3, #0
 80068a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80068a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80068a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10d      	bne.n	80068cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b0:	4b27      	ldr	r3, [pc, #156]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80068b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b4:	4a26      	ldr	r2, [pc, #152]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80068b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80068bc:	4b24      	ldr	r3, [pc, #144]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 80068be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068c4:	60bb      	str	r3, [r7, #8]
 80068c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068c8:	2301      	movs	r3, #1
 80068ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068cc:	4b21      	ldr	r3, [pc, #132]	@ (8006954 <HAL_RCC_OscConfig+0x508>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d118      	bne.n	800690a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006954 <HAL_RCC_OscConfig+0x508>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006954 <HAL_RCC_OscConfig+0x508>)
 80068de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068e4:	f7fc fa8a 	bl	8002dfc <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ec:	f7fc fa86 	bl	8002dfc <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e1b2      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068fe:	4b15      	ldr	r3, [pc, #84]	@ (8006954 <HAL_RCC_OscConfig+0x508>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0f0      	beq.n	80068ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d108      	bne.n	8006924 <HAL_RCC_OscConfig+0x4d8>
 8006912:	4b0f      	ldr	r3, [pc, #60]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006918:	4a0d      	ldr	r2, [pc, #52]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 800691a:	f043 0301 	orr.w	r3, r3, #1
 800691e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006922:	e029      	b.n	8006978 <HAL_RCC_OscConfig+0x52c>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b05      	cmp	r3, #5
 800692a:	d115      	bne.n	8006958 <HAL_RCC_OscConfig+0x50c>
 800692c:	4b08      	ldr	r3, [pc, #32]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006932:	4a07      	ldr	r2, [pc, #28]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006934:	f043 0304 	orr.w	r3, r3, #4
 8006938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800693c:	4b04      	ldr	r3, [pc, #16]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 800693e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006942:	4a03      	ldr	r2, [pc, #12]	@ (8006950 <HAL_RCC_OscConfig+0x504>)
 8006944:	f043 0301 	orr.w	r3, r3, #1
 8006948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800694c:	e014      	b.n	8006978 <HAL_RCC_OscConfig+0x52c>
 800694e:	bf00      	nop
 8006950:	40021000 	.word	0x40021000
 8006954:	40007000 	.word	0x40007000
 8006958:	4b9a      	ldr	r3, [pc, #616]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695e:	4a99      	ldr	r2, [pc, #612]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006968:	4b96      	ldr	r3, [pc, #600]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800696e:	4a95      	ldr	r2, [pc, #596]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006970:	f023 0304 	bic.w	r3, r3, #4
 8006974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d016      	beq.n	80069ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006980:	f7fc fa3c 	bl	8002dfc <HAL_GetTick>
 8006984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006986:	e00a      	b.n	800699e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006988:	f7fc fa38 	bl	8002dfc <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e162      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800699e:	4b89      	ldr	r3, [pc, #548]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0ed      	beq.n	8006988 <HAL_RCC_OscConfig+0x53c>
 80069ac:	e015      	b.n	80069da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ae:	f7fc fa25 	bl	8002dfc <HAL_GetTick>
 80069b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069b4:	e00a      	b.n	80069cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b6:	f7fc fa21 	bl	8002dfc <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e14b      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069cc:	4b7d      	ldr	r3, [pc, #500]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 80069ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1ed      	bne.n	80069b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069da:	7ffb      	ldrb	r3, [r7, #31]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d105      	bne.n	80069ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e0:	4b78      	ldr	r3, [pc, #480]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 80069e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e4:	4a77      	ldr	r2, [pc, #476]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 80069e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0320 	and.w	r3, r3, #32
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d03c      	beq.n	8006a72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01c      	beq.n	8006a3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a00:	4b70      	ldr	r3, [pc, #448]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a06:	4a6f      	ldr	r2, [pc, #444]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006a08:	f043 0301 	orr.w	r3, r3, #1
 8006a0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a10:	f7fc f9f4 	bl	8002dfc <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a18:	f7fc f9f0 	bl	8002dfc <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e11c      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a2a:	4b66      	ldr	r3, [pc, #408]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0ef      	beq.n	8006a18 <HAL_RCC_OscConfig+0x5cc>
 8006a38:	e01b      	b.n	8006a72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a3a:	4b62      	ldr	r3, [pc, #392]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a40:	4a60      	ldr	r2, [pc, #384]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006a42:	f023 0301 	bic.w	r3, r3, #1
 8006a46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4a:	f7fc f9d7 	bl	8002dfc <HAL_GetTick>
 8006a4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a50:	e008      	b.n	8006a64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a52:	f7fc f9d3 	bl	8002dfc <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e0ff      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a64:	4b57      	ldr	r3, [pc, #348]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1ef      	bne.n	8006a52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 80f3 	beq.w	8006c62 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	f040 80c9 	bne.w	8006c18 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a86:	4b4f      	ldr	r3, [pc, #316]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f003 0203 	and.w	r2, r3, #3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d12c      	bne.n	8006af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d123      	bne.n	8006af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d11b      	bne.n	8006af4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d113      	bne.n	8006af4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad6:	085b      	lsrs	r3, r3, #1
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d109      	bne.n	8006af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aea:	085b      	lsrs	r3, r3, #1
 8006aec:	3b01      	subs	r3, #1
 8006aee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d06b      	beq.n	8006bcc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2b0c      	cmp	r3, #12
 8006af8:	d062      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006afa:	4b32      	ldr	r3, [pc, #200]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e0ac      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006b10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b16:	f7fc f971 	bl	8002dfc <HAL_GetTick>
 8006b1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b1e:	f7fc f96d 	bl	8002dfc <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e099      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b30:	4b24      	ldr	r3, [pc, #144]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f0      	bne.n	8006b1e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b3c:	4b21      	ldr	r3, [pc, #132]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	4b21      	ldr	r3, [pc, #132]	@ (8006bc8 <HAL_RCC_OscConfig+0x77c>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b4c:	3a01      	subs	r2, #1
 8006b4e:	0112      	lsls	r2, r2, #4
 8006b50:	4311      	orrs	r1, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b56:	0212      	lsls	r2, r2, #8
 8006b58:	4311      	orrs	r1, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b5e:	0852      	lsrs	r2, r2, #1
 8006b60:	3a01      	subs	r2, #1
 8006b62:	0552      	lsls	r2, r2, #21
 8006b64:	4311      	orrs	r1, r2
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006b6a:	0852      	lsrs	r2, r2, #1
 8006b6c:	3a01      	subs	r2, #1
 8006b6e:	0652      	lsls	r2, r2, #25
 8006b70:	4311      	orrs	r1, r2
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b76:	06d2      	lsls	r2, r2, #27
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	4912      	ldr	r1, [pc, #72]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b80:	4b10      	ldr	r3, [pc, #64]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a0f      	ldr	r2, [pc, #60]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	4a0c      	ldr	r2, [pc, #48]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b98:	f7fc f930 	bl	8002dfc <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba0:	f7fc f92c 	bl	8002dfc <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e058      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bb2:	4b04      	ldr	r3, [pc, #16]	@ (8006bc4 <HAL_RCC_OscConfig+0x778>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0f0      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bbe:	e050      	b.n	8006c62 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e04f      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bcc:	4b27      	ldr	r3, [pc, #156]	@ (8006c6c <HAL_RCC_OscConfig+0x820>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d144      	bne.n	8006c62 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006bd8:	4b24      	ldr	r3, [pc, #144]	@ (8006c6c <HAL_RCC_OscConfig+0x820>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a23      	ldr	r2, [pc, #140]	@ (8006c6c <HAL_RCC_OscConfig+0x820>)
 8006bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006be2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006be4:	4b21      	ldr	r3, [pc, #132]	@ (8006c6c <HAL_RCC_OscConfig+0x820>)
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	4a20      	ldr	r2, [pc, #128]	@ (8006c6c <HAL_RCC_OscConfig+0x820>)
 8006bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bf0:	f7fc f904 	bl	8002dfc <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf8:	f7fc f900 	bl	8002dfc <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e02c      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c0a:	4b18      	ldr	r3, [pc, #96]	@ (8006c6c <HAL_RCC_OscConfig+0x820>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x7ac>
 8006c16:	e024      	b.n	8006c62 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b0c      	cmp	r3, #12
 8006c1c:	d01f      	beq.n	8006c5e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1e:	4b13      	ldr	r3, [pc, #76]	@ (8006c6c <HAL_RCC_OscConfig+0x820>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a12      	ldr	r2, [pc, #72]	@ (8006c6c <HAL_RCC_OscConfig+0x820>)
 8006c24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2a:	f7fc f8e7 	bl	8002dfc <HAL_GetTick>
 8006c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c30:	e008      	b.n	8006c44 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c32:	f7fc f8e3 	bl	8002dfc <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e00f      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c44:	4b09      	ldr	r3, [pc, #36]	@ (8006c6c <HAL_RCC_OscConfig+0x820>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1f0      	bne.n	8006c32 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006c50:	4b06      	ldr	r3, [pc, #24]	@ (8006c6c <HAL_RCC_OscConfig+0x820>)
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	4905      	ldr	r1, [pc, #20]	@ (8006c6c <HAL_RCC_OscConfig+0x820>)
 8006c56:	4b06      	ldr	r3, [pc, #24]	@ (8006c70 <HAL_RCC_OscConfig+0x824>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	60cb      	str	r3, [r1, #12]
 8006c5c:	e001      	b.n	8006c62 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	feeefffc 	.word	0xfeeefffc

08006c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0e7      	b.n	8006e58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c88:	4b75      	ldr	r3, [pc, #468]	@ (8006e60 <HAL_RCC_ClockConfig+0x1ec>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d910      	bls.n	8006cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c96:	4b72      	ldr	r3, [pc, #456]	@ (8006e60 <HAL_RCC_ClockConfig+0x1ec>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f023 0207 	bic.w	r2, r3, #7
 8006c9e:	4970      	ldr	r1, [pc, #448]	@ (8006e60 <HAL_RCC_ClockConfig+0x1ec>)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ca6:	4b6e      	ldr	r3, [pc, #440]	@ (8006e60 <HAL_RCC_ClockConfig+0x1ec>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0307 	and.w	r3, r3, #7
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d001      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e0cf      	b.n	8006e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d010      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	4b66      	ldr	r3, [pc, #408]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d908      	bls.n	8006ce6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cd4:	4b63      	ldr	r3, [pc, #396]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	4960      	ldr	r1, [pc, #384]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d04c      	beq.n	8006d8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d107      	bne.n	8006d0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d121      	bne.n	8006d4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e0a6      	b.n	8006e58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d107      	bne.n	8006d22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d12:	4b54      	ldr	r3, [pc, #336]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d115      	bne.n	8006d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e09a      	b.n	8006e58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d107      	bne.n	8006d3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d2a:	4b4e      	ldr	r3, [pc, #312]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d109      	bne.n	8006d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e08e      	b.n	8006e58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e086      	b.n	8006e58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d4a:	4b46      	ldr	r3, [pc, #280]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f023 0203 	bic.w	r2, r3, #3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	4943      	ldr	r1, [pc, #268]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d5c:	f7fc f84e 	bl	8002dfc <HAL_GetTick>
 8006d60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d62:	e00a      	b.n	8006d7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d64:	f7fc f84a 	bl	8002dfc <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e06e      	b.n	8006e58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d7a:	4b3a      	ldr	r3, [pc, #232]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f003 020c 	and.w	r2, r3, #12
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d1eb      	bne.n	8006d64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d010      	beq.n	8006dba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	4b31      	ldr	r3, [pc, #196]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d208      	bcs.n	8006dba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006da8:	4b2e      	ldr	r3, [pc, #184]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	492b      	ldr	r1, [pc, #172]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dba:	4b29      	ldr	r3, [pc, #164]	@ (8006e60 <HAL_RCC_ClockConfig+0x1ec>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d210      	bcs.n	8006dea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dc8:	4b25      	ldr	r3, [pc, #148]	@ (8006e60 <HAL_RCC_ClockConfig+0x1ec>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f023 0207 	bic.w	r2, r3, #7
 8006dd0:	4923      	ldr	r1, [pc, #140]	@ (8006e60 <HAL_RCC_ClockConfig+0x1ec>)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dd8:	4b21      	ldr	r3, [pc, #132]	@ (8006e60 <HAL_RCC_ClockConfig+0x1ec>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0307 	and.w	r3, r3, #7
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d001      	beq.n	8006dea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e036      	b.n	8006e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d008      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006df6:	4b1b      	ldr	r3, [pc, #108]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	4918      	ldr	r1, [pc, #96]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d009      	beq.n	8006e28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e14:	4b13      	ldr	r3, [pc, #76]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	4910      	ldr	r1, [pc, #64]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e28:	f000 f824 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e64 <HAL_RCC_ClockConfig+0x1f0>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	f003 030f 	and.w	r3, r3, #15
 8006e38:	490b      	ldr	r1, [pc, #44]	@ (8006e68 <HAL_RCC_ClockConfig+0x1f4>)
 8006e3a:	5ccb      	ldrb	r3, [r1, r3]
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
 8006e44:	4a09      	ldr	r2, [pc, #36]	@ (8006e6c <HAL_RCC_ClockConfig+0x1f8>)
 8006e46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e48:	4b09      	ldr	r3, [pc, #36]	@ (8006e70 <HAL_RCC_ClockConfig+0x1fc>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fb ff85 	bl	8002d5c <HAL_InitTick>
 8006e52:	4603      	mov	r3, r0
 8006e54:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e56:	7afb      	ldrb	r3, [r7, #11]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	40022000 	.word	0x40022000
 8006e64:	40021000 	.word	0x40021000
 8006e68:	080078e4 	.word	0x080078e4
 8006e6c:	20000000 	.word	0x20000000
 8006e70:	20000004 	.word	0x20000004

08006e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b089      	sub	sp, #36	@ 0x24
 8006e78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e82:	4b3e      	ldr	r3, [pc, #248]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 030c 	and.w	r3, r3, #12
 8006e8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	2b0c      	cmp	r3, #12
 8006ea0:	d121      	bne.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d11e      	bne.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ea8:	4b34      	ldr	r3, [pc, #208]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0308 	and.w	r3, r3, #8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d107      	bne.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006eb4:	4b31      	ldr	r3, [pc, #196]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	e005      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	091b      	lsrs	r3, r3, #4
 8006eca:	f003 030f 	and.w	r3, r3, #15
 8006ece:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8006f80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ed8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10d      	bne.n	8006efc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ee4:	e00a      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d102      	bne.n	8006ef2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006eec:	4b25      	ldr	r3, [pc, #148]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8006eee:	61bb      	str	r3, [r7, #24]
 8006ef0:	e004      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d101      	bne.n	8006efc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ef8:	4b23      	ldr	r3, [pc, #140]	@ (8006f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8006efa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b0c      	cmp	r3, #12
 8006f00:	d134      	bne.n	8006f6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f02:	4b1e      	ldr	r3, [pc, #120]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d003      	beq.n	8006f1a <HAL_RCC_GetSysClockFreq+0xa6>
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d003      	beq.n	8006f20 <HAL_RCC_GetSysClockFreq+0xac>
 8006f18:	e005      	b.n	8006f26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f1c:	617b      	str	r3, [r7, #20]
      break;
 8006f1e:	e005      	b.n	8006f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f20:	4b19      	ldr	r3, [pc, #100]	@ (8006f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f22:	617b      	str	r3, [r7, #20]
      break;
 8006f24:	e002      	b.n	8006f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	617b      	str	r3, [r7, #20]
      break;
 8006f2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f2c:	4b13      	ldr	r3, [pc, #76]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	091b      	lsrs	r3, r3, #4
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	3301      	adds	r3, #1
 8006f38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f3a:	4b10      	ldr	r3, [pc, #64]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	0a1b      	lsrs	r3, r3, #8
 8006f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	fb03 f202 	mul.w	r2, r3, r2
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f52:	4b0a      	ldr	r3, [pc, #40]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	0e5b      	lsrs	r3, r3, #25
 8006f58:	f003 0303 	and.w	r3, r3, #3
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f6c:	69bb      	ldr	r3, [r7, #24]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3724      	adds	r7, #36	@ 0x24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	080078f4 	.word	0x080078f4
 8006f84:	00f42400 	.word	0x00f42400
 8006f88:	007a1200 	.word	0x007a1200

08006f8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f94:	2300      	movs	r3, #0
 8006f96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f98:	4b2a      	ldr	r3, [pc, #168]	@ (8007044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006fa4:	f7ff f9ee 	bl	8006384 <HAL_PWREx_GetVoltageRange>
 8006fa8:	6178      	str	r0, [r7, #20]
 8006faa:	e014      	b.n	8006fd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fac:	4b25      	ldr	r3, [pc, #148]	@ (8007044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb0:	4a24      	ldr	r2, [pc, #144]	@ (8007044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fb8:	4b22      	ldr	r3, [pc, #136]	@ (8007044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006fc4:	f7ff f9de 	bl	8006384 <HAL_PWREx_GetVoltageRange>
 8006fc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006fca:	4b1e      	ldr	r3, [pc, #120]	@ (8007044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fce:	4a1d      	ldr	r2, [pc, #116]	@ (8007044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fdc:	d10b      	bne.n	8006ff6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b80      	cmp	r3, #128	@ 0x80
 8006fe2:	d919      	bls.n	8007018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2ba0      	cmp	r3, #160	@ 0xa0
 8006fe8:	d902      	bls.n	8006ff0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fea:	2302      	movs	r3, #2
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	e013      	b.n	8007018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	e010      	b.n	8007018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b80      	cmp	r3, #128	@ 0x80
 8006ffa:	d902      	bls.n	8007002 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	e00a      	b.n	8007018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b80      	cmp	r3, #128	@ 0x80
 8007006:	d102      	bne.n	800700e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007008:	2302      	movs	r3, #2
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	e004      	b.n	8007018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b70      	cmp	r3, #112	@ 0x70
 8007012:	d101      	bne.n	8007018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007014:	2301      	movs	r3, #1
 8007016:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007018:	4b0b      	ldr	r3, [pc, #44]	@ (8007048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f023 0207 	bic.w	r2, r3, #7
 8007020:	4909      	ldr	r1, [pc, #36]	@ (8007048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007028:	4b07      	ldr	r3, [pc, #28]	@ (8007048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	429a      	cmp	r2, r3
 8007034:	d001      	beq.n	800703a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e000      	b.n	800703c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40021000 	.word	0x40021000
 8007048:	40022000 	.word	0x40022000

0800704c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007054:	2300      	movs	r3, #0
 8007056:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007058:	2300      	movs	r3, #0
 800705a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007064:	2b00      	cmp	r3, #0
 8007066:	d031      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007070:	d01a      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007072:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007076:	d814      	bhi.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007078:	2b00      	cmp	r3, #0
 800707a:	d009      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800707c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007080:	d10f      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007082:	4b5d      	ldr	r3, [pc, #372]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	4a5c      	ldr	r2, [pc, #368]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800708c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800708e:	e00c      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3304      	adds	r3, #4
 8007094:	2100      	movs	r1, #0
 8007096:	4618      	mov	r0, r3
 8007098:	f000 f9ce 	bl	8007438 <RCCEx_PLLSAI1_Config>
 800709c:	4603      	mov	r3, r0
 800709e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070a0:	e003      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	74fb      	strb	r3, [r7, #19]
      break;
 80070a6:	e000      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80070a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070aa:	7cfb      	ldrb	r3, [r7, #19]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10b      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070b0:	4b51      	ldr	r3, [pc, #324]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070be:	494e      	ldr	r1, [pc, #312]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80070c6:	e001      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	7cfb      	ldrb	r3, [r7, #19]
 80070ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 809e 	beq.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070da:	2300      	movs	r3, #0
 80070dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80070de:	4b46      	ldr	r3, [pc, #280]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80070ee:	2300      	movs	r3, #0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00d      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070f4:	4b40      	ldr	r3, [pc, #256]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f8:	4a3f      	ldr	r2, [pc, #252]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007100:	4b3d      	ldr	r3, [pc, #244]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800710c:	2301      	movs	r3, #1
 800710e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007110:	4b3a      	ldr	r3, [pc, #232]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a39      	ldr	r2, [pc, #228]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800711a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800711c:	f7fb fe6e 	bl	8002dfc <HAL_GetTick>
 8007120:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007122:	e009      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007124:	f7fb fe6a 	bl	8002dfc <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d902      	bls.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	74fb      	strb	r3, [r7, #19]
        break;
 8007136:	e005      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007138:	4b30      	ldr	r3, [pc, #192]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0ef      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007144:	7cfb      	ldrb	r3, [r7, #19]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d15a      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800714a:	4b2b      	ldr	r3, [pc, #172]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800714c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007154:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01e      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	429a      	cmp	r2, r3
 8007164:	d019      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007166:	4b24      	ldr	r3, [pc, #144]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800716c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007170:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007172:	4b21      	ldr	r3, [pc, #132]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007178:	4a1f      	ldr	r2, [pc, #124]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800717a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800717e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007182:	4b1d      	ldr	r3, [pc, #116]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007188:	4a1b      	ldr	r2, [pc, #108]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800718a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800718e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007192:	4a19      	ldr	r2, [pc, #100]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d016      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a4:	f7fb fe2a 	bl	8002dfc <HAL_GetTick>
 80071a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071aa:	e00b      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ac:	f7fb fe26 	bl	8002dfc <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d902      	bls.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	74fb      	strb	r3, [r7, #19]
            break;
 80071c2:	e006      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071c4:	4b0c      	ldr	r3, [pc, #48]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0ec      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80071d2:	7cfb      	ldrb	r3, [r7, #19]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10b      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071d8:	4b07      	ldr	r3, [pc, #28]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e6:	4904      	ldr	r1, [pc, #16]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80071ee:	e009      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071f0:	7cfb      	ldrb	r3, [r7, #19]
 80071f2:	74bb      	strb	r3, [r7, #18]
 80071f4:	e006      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80071f6:	bf00      	nop
 80071f8:	40021000 	.word	0x40021000
 80071fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007200:	7cfb      	ldrb	r3, [r7, #19]
 8007202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007204:	7c7b      	ldrb	r3, [r7, #17]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d105      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800720a:	4b8a      	ldr	r3, [pc, #552]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800720c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800720e:	4a89      	ldr	r2, [pc, #548]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007214:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007222:	4b84      	ldr	r3, [pc, #528]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007228:	f023 0203 	bic.w	r2, r3, #3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	4980      	ldr	r1, [pc, #512]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007232:	4313      	orrs	r3, r2
 8007234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007244:	4b7b      	ldr	r3, [pc, #492]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800724a:	f023 020c 	bic.w	r2, r3, #12
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007252:	4978      	ldr	r1, [pc, #480]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007254:	4313      	orrs	r3, r2
 8007256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007266:	4b73      	ldr	r3, [pc, #460]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800726c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007274:	496f      	ldr	r1, [pc, #444]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00a      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007288:	4b6a      	ldr	r3, [pc, #424]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800728a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800728e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007296:	4967      	ldr	r1, [pc, #412]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007298:	4313      	orrs	r3, r2
 800729a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072aa:	4b62      	ldr	r3, [pc, #392]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b8:	495e      	ldr	r1, [pc, #376]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072cc:	4b59      	ldr	r3, [pc, #356]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	4956      	ldr	r1, [pc, #344]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072ee:	4b51      	ldr	r3, [pc, #324]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fc:	494d      	ldr	r1, [pc, #308]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d028      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007310:	4b48      	ldr	r3, [pc, #288]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007316:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731e:	4945      	ldr	r1, [pc, #276]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007320:	4313      	orrs	r3, r2
 8007322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800732e:	d106      	bne.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007330:	4b40      	ldr	r3, [pc, #256]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	4a3f      	ldr	r2, [pc, #252]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800733a:	60d3      	str	r3, [r2, #12]
 800733c:	e011      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007342:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007346:	d10c      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3304      	adds	r3, #4
 800734c:	2101      	movs	r1, #1
 800734e:	4618      	mov	r0, r3
 8007350:	f000 f872 	bl	8007438 <RCCEx_PLLSAI1_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007358:	7cfb      	ldrb	r3, [r7, #19]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800735e:	7cfb      	ldrb	r3, [r7, #19]
 8007360:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d028      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800736e:	4b31      	ldr	r3, [pc, #196]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007374:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800737c:	492d      	ldr	r1, [pc, #180]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800737e:	4313      	orrs	r3, r2
 8007380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800738c:	d106      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800738e:	4b29      	ldr	r3, [pc, #164]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	4a28      	ldr	r2, [pc, #160]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007394:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007398:	60d3      	str	r3, [r2, #12]
 800739a:	e011      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073a4:	d10c      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3304      	adds	r3, #4
 80073aa:	2101      	movs	r1, #1
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 f843 	bl	8007438 <RCCEx_PLLSAI1_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073b6:	7cfb      	ldrb	r3, [r7, #19]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80073bc:	7cfb      	ldrb	r3, [r7, #19]
 80073be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01c      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073cc:	4b19      	ldr	r3, [pc, #100]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073da:	4916      	ldr	r1, [pc, #88]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ea:	d10c      	bne.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3304      	adds	r3, #4
 80073f0:	2102      	movs	r1, #2
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 f820 	bl	8007438 <RCCEx_PLLSAI1_Config>
 80073f8:	4603      	mov	r3, r0
 80073fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073fc:	7cfb      	ldrb	r3, [r7, #19]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007402:	7cfb      	ldrb	r3, [r7, #19]
 8007404:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007412:	4b08      	ldr	r3, [pc, #32]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007418:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007420:	4904      	ldr	r1, [pc, #16]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007428:	7cbb      	ldrb	r3, [r7, #18]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	40021000 	.word	0x40021000

08007438 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007446:	4b74      	ldr	r3, [pc, #464]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d018      	beq.n	8007484 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007452:	4b71      	ldr	r3, [pc, #452]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f003 0203 	and.w	r2, r3, #3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d10d      	bne.n	800747e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
       ||
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800746a:	4b6b      	ldr	r3, [pc, #428]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	091b      	lsrs	r3, r3, #4
 8007470:	f003 0307 	and.w	r3, r3, #7
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
       ||
 800747a:	429a      	cmp	r2, r3
 800747c:	d047      	beq.n	800750e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	73fb      	strb	r3, [r7, #15]
 8007482:	e044      	b.n	800750e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d018      	beq.n	80074be <RCCEx_PLLSAI1_Config+0x86>
 800748c:	2b03      	cmp	r3, #3
 800748e:	d825      	bhi.n	80074dc <RCCEx_PLLSAI1_Config+0xa4>
 8007490:	2b01      	cmp	r3, #1
 8007492:	d002      	beq.n	800749a <RCCEx_PLLSAI1_Config+0x62>
 8007494:	2b02      	cmp	r3, #2
 8007496:	d009      	beq.n	80074ac <RCCEx_PLLSAI1_Config+0x74>
 8007498:	e020      	b.n	80074dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800749a:	4b5f      	ldr	r3, [pc, #380]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d11d      	bne.n	80074e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074aa:	e01a      	b.n	80074e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074ac:	4b5a      	ldr	r3, [pc, #360]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d116      	bne.n	80074e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074bc:	e013      	b.n	80074e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074be:	4b56      	ldr	r3, [pc, #344]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10f      	bne.n	80074ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074ca:	4b53      	ldr	r3, [pc, #332]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d109      	bne.n	80074ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074da:	e006      	b.n	80074ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
      break;
 80074e0:	e004      	b.n	80074ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074e2:	bf00      	nop
 80074e4:	e002      	b.n	80074ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074e6:	bf00      	nop
 80074e8:	e000      	b.n	80074ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10d      	bne.n	800750e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80074f2:	4b49      	ldr	r3, [pc, #292]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6819      	ldr	r1, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	3b01      	subs	r3, #1
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	430b      	orrs	r3, r1
 8007508:	4943      	ldr	r1, [pc, #268]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800750a:	4313      	orrs	r3, r2
 800750c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d17c      	bne.n	800760e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007514:	4b40      	ldr	r3, [pc, #256]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a3f      	ldr	r2, [pc, #252]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800751a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800751e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007520:	f7fb fc6c 	bl	8002dfc <HAL_GetTick>
 8007524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007526:	e009      	b.n	800753c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007528:	f7fb fc68 	bl	8002dfc <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d902      	bls.n	800753c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	73fb      	strb	r3, [r7, #15]
        break;
 800753a:	e005      	b.n	8007548 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800753c:	4b36      	ldr	r3, [pc, #216]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1ef      	bne.n	8007528 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d15f      	bne.n	800760e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d110      	bne.n	8007576 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007554:	4b30      	ldr	r3, [pc, #192]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800755c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6892      	ldr	r2, [r2, #8]
 8007564:	0211      	lsls	r1, r2, #8
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	68d2      	ldr	r2, [r2, #12]
 800756a:	06d2      	lsls	r2, r2, #27
 800756c:	430a      	orrs	r2, r1
 800756e:	492a      	ldr	r1, [pc, #168]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007570:	4313      	orrs	r3, r2
 8007572:	610b      	str	r3, [r1, #16]
 8007574:	e027      	b.n	80075c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d112      	bne.n	80075a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800757c:	4b26      	ldr	r3, [pc, #152]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007584:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6892      	ldr	r2, [r2, #8]
 800758c:	0211      	lsls	r1, r2, #8
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6912      	ldr	r2, [r2, #16]
 8007592:	0852      	lsrs	r2, r2, #1
 8007594:	3a01      	subs	r2, #1
 8007596:	0552      	lsls	r2, r2, #21
 8007598:	430a      	orrs	r2, r1
 800759a:	491f      	ldr	r1, [pc, #124]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800759c:	4313      	orrs	r3, r2
 800759e:	610b      	str	r3, [r1, #16]
 80075a0:	e011      	b.n	80075c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075a2:	4b1d      	ldr	r3, [pc, #116]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80075aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6892      	ldr	r2, [r2, #8]
 80075b2:	0211      	lsls	r1, r2, #8
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	6952      	ldr	r2, [r2, #20]
 80075b8:	0852      	lsrs	r2, r2, #1
 80075ba:	3a01      	subs	r2, #1
 80075bc:	0652      	lsls	r2, r2, #25
 80075be:	430a      	orrs	r2, r1
 80075c0:	4915      	ldr	r1, [pc, #84]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80075c6:	4b14      	ldr	r3, [pc, #80]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a13      	ldr	r2, [pc, #76]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d2:	f7fb fc13 	bl	8002dfc <HAL_GetTick>
 80075d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075d8:	e009      	b.n	80075ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075da:	f7fb fc0f 	bl	8002dfc <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d902      	bls.n	80075ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	73fb      	strb	r3, [r7, #15]
          break;
 80075ec:	e005      	b.n	80075fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0ef      	beq.n	80075da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d106      	bne.n	800760e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007600:	4b05      	ldr	r3, [pc, #20]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007602:	691a      	ldr	r2, [r3, #16]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	4903      	ldr	r1, [pc, #12]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e0>)
 800760a:	4313      	orrs	r3, r2
 800760c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800760e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40021000 	.word	0x40021000

0800761c <memset>:
 800761c:	4402      	add	r2, r0
 800761e:	4603      	mov	r3, r0
 8007620:	4293      	cmp	r3, r2
 8007622:	d100      	bne.n	8007626 <memset+0xa>
 8007624:	4770      	bx	lr
 8007626:	f803 1b01 	strb.w	r1, [r3], #1
 800762a:	e7f9      	b.n	8007620 <memset+0x4>

0800762c <__errno>:
 800762c:	4b01      	ldr	r3, [pc, #4]	@ (8007634 <__errno+0x8>)
 800762e:	6818      	ldr	r0, [r3, #0]
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	2000000c 	.word	0x2000000c

08007638 <__libc_init_array>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	4d0d      	ldr	r5, [pc, #52]	@ (8007670 <__libc_init_array+0x38>)
 800763c:	4c0d      	ldr	r4, [pc, #52]	@ (8007674 <__libc_init_array+0x3c>)
 800763e:	1b64      	subs	r4, r4, r5
 8007640:	10a4      	asrs	r4, r4, #2
 8007642:	2600      	movs	r6, #0
 8007644:	42a6      	cmp	r6, r4
 8007646:	d109      	bne.n	800765c <__libc_init_array+0x24>
 8007648:	4d0b      	ldr	r5, [pc, #44]	@ (8007678 <__libc_init_array+0x40>)
 800764a:	4c0c      	ldr	r4, [pc, #48]	@ (800767c <__libc_init_array+0x44>)
 800764c:	f000 f93e 	bl	80078cc <_init>
 8007650:	1b64      	subs	r4, r4, r5
 8007652:	10a4      	asrs	r4, r4, #2
 8007654:	2600      	movs	r6, #0
 8007656:	42a6      	cmp	r6, r4
 8007658:	d105      	bne.n	8007666 <__libc_init_array+0x2e>
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007660:	4798      	blx	r3
 8007662:	3601      	adds	r6, #1
 8007664:	e7ee      	b.n	8007644 <__libc_init_array+0xc>
 8007666:	f855 3b04 	ldr.w	r3, [r5], #4
 800766a:	4798      	blx	r3
 800766c:	3601      	adds	r6, #1
 800766e:	e7f2      	b.n	8007656 <__libc_init_array+0x1e>
 8007670:	08007928 	.word	0x08007928
 8007674:	08007928 	.word	0x08007928
 8007678:	08007928 	.word	0x08007928
 800767c:	0800792c 	.word	0x0800792c

08007680 <logf>:
 8007680:	b508      	push	{r3, lr}
 8007682:	ed2d 8b02 	vpush	{d8}
 8007686:	eeb0 8a40 	vmov.f32	s16, s0
 800768a:	f000 f82d 	bl	80076e8 <__ieee754_logf>
 800768e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007696:	d60f      	bvs.n	80076b8 <logf+0x38>
 8007698:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800769c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a0:	dc0a      	bgt.n	80076b8 <logf+0x38>
 80076a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80076a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076aa:	d108      	bne.n	80076be <logf+0x3e>
 80076ac:	f7ff ffbe 	bl	800762c <__errno>
 80076b0:	2322      	movs	r3, #34	@ 0x22
 80076b2:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80076d4 <logf+0x54>
 80076b6:	6003      	str	r3, [r0, #0]
 80076b8:	ecbd 8b02 	vpop	{d8}
 80076bc:	bd08      	pop	{r3, pc}
 80076be:	f7ff ffb5 	bl	800762c <__errno>
 80076c2:	ecbd 8b02 	vpop	{d8}
 80076c6:	2321      	movs	r3, #33	@ 0x21
 80076c8:	6003      	str	r3, [r0, #0]
 80076ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80076ce:	4802      	ldr	r0, [pc, #8]	@ (80076d8 <logf+0x58>)
 80076d0:	f000 b804 	b.w	80076dc <nanf>
 80076d4:	ff800000 	.word	0xff800000
 80076d8:	08007924 	.word	0x08007924

080076dc <nanf>:
 80076dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80076e4 <nanf+0x8>
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	7fc00000 	.word	0x7fc00000

080076e8 <__ieee754_logf>:
 80076e8:	ee10 3a10 	vmov	r3, s0
 80076ec:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80076f0:	d106      	bne.n	8007700 <__ieee754_logf+0x18>
 80076f2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800788c <__ieee754_logf+0x1a4>
 80076f6:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8007890 <__ieee754_logf+0x1a8>
 80076fa:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80076fe:	4770      	bx	lr
 8007700:	2b00      	cmp	r3, #0
 8007702:	461a      	mov	r2, r3
 8007704:	da02      	bge.n	800770c <__ieee754_logf+0x24>
 8007706:	ee30 7a40 	vsub.f32	s14, s0, s0
 800770a:	e7f4      	b.n	80076f6 <__ieee754_logf+0xe>
 800770c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007710:	db02      	blt.n	8007718 <__ieee754_logf+0x30>
 8007712:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007716:	4770      	bx	lr
 8007718:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800771c:	bfb8      	it	lt
 800771e:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8007894 <__ieee754_logf+0x1ac>
 8007722:	485d      	ldr	r0, [pc, #372]	@ (8007898 <__ieee754_logf+0x1b0>)
 8007724:	bfbe      	ittt	lt
 8007726:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800772a:	f06f 0118 	mvnlt.w	r1, #24
 800772e:	ee17 2a90 	vmovlt	r2, s15
 8007732:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007736:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800773a:	4410      	add	r0, r2
 800773c:	bfa8      	it	ge
 800773e:	2100      	movge	r1, #0
 8007740:	3b7f      	subs	r3, #127	@ 0x7f
 8007742:	440b      	add	r3, r1
 8007744:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8007748:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800774c:	4311      	orrs	r1, r2
 800774e:	ee00 1a10 	vmov	s0, r1
 8007752:	4952      	ldr	r1, [pc, #328]	@ (800789c <__ieee754_logf+0x1b4>)
 8007754:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8007758:	f102 000f 	add.w	r0, r2, #15
 800775c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007760:	4001      	ands	r1, r0
 8007762:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007766:	bb89      	cbnz	r1, 80077cc <__ieee754_logf+0xe4>
 8007768:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800776c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007770:	d10f      	bne.n	8007792 <__ieee754_logf+0xaa>
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 8087 	beq.w	8007886 <__ieee754_logf+0x19e>
 8007778:	ee07 3a90 	vmov	s15, r3
 800777c:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80078a0 <__ieee754_logf+0x1b8>
 8007780:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80078a4 <__ieee754_logf+0x1bc>
 8007784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007788:	ee27 0a80 	vmul.f32	s0, s15, s0
 800778c:	eea7 0a87 	vfma.f32	s0, s15, s14
 8007790:	4770      	bx	lr
 8007792:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80078a8 <__ieee754_logf+0x1c0>
 8007796:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800779a:	eee0 7a66 	vfms.f32	s15, s0, s13
 800779e:	ee20 7a00 	vmul.f32	s14, s0, s0
 80077a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077a6:	b913      	cbnz	r3, 80077ae <__ieee754_logf+0xc6>
 80077a8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80077ac:	4770      	bx	lr
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80078a0 <__ieee754_logf+0x1b8>
 80077b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077ba:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80077be:	ee37 0a40 	vsub.f32	s0, s14, s0
 80077c2:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80078a4 <__ieee754_logf+0x1bc>
 80077c6:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80077ca:	4770      	bx	lr
 80077cc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80077d0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80077d4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80078ac <__ieee754_logf+0x1c4>
 80077d8:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80078b0 <__ieee754_logf+0x1c8>
 80077dc:	4935      	ldr	r1, [pc, #212]	@ (80078b4 <__ieee754_logf+0x1cc>)
 80077de:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80077e2:	4411      	add	r1, r2
 80077e4:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80077e8:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80077ec:	430a      	orrs	r2, r1
 80077ee:	2a00      	cmp	r2, #0
 80077f0:	ee07 3a90 	vmov	s15, r3
 80077f4:	ee26 5a06 	vmul.f32	s10, s12, s12
 80077f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80077fc:	ee25 7a05 	vmul.f32	s14, s10, s10
 8007800:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80078b8 <__ieee754_logf+0x1d0>
 8007804:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007808:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80078bc <__ieee754_logf+0x1d4>
 800780c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8007810:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80078c0 <__ieee754_logf+0x1d8>
 8007814:	eee7 7a24 	vfma.f32	s15, s14, s9
 8007818:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80078c4 <__ieee754_logf+0x1dc>
 800781c:	eee7 4a87 	vfma.f32	s9, s15, s14
 8007820:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80078c8 <__ieee754_logf+0x1e0>
 8007824:	eee4 7a87 	vfma.f32	s15, s9, s14
 8007828:	ee67 7a85 	vmul.f32	s15, s15, s10
 800782c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8007830:	dd1a      	ble.n	8007868 <__ieee754_logf+0x180>
 8007832:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007836:	ee20 7a07 	vmul.f32	s14, s0, s14
 800783a:	ee27 7a00 	vmul.f32	s14, s14, s0
 800783e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007842:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007846:	b913      	cbnz	r3, 800784e <__ieee754_logf+0x166>
 8007848:	ee37 7a67 	vsub.f32	s14, s14, s15
 800784c:	e7ac      	b.n	80077a8 <__ieee754_logf+0xc0>
 800784e:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80078a0 <__ieee754_logf+0x1b8>
 8007852:	eee6 7a86 	vfma.f32	s15, s13, s12
 8007856:	ee37 7a67 	vsub.f32	s14, s14, s15
 800785a:	ee37 0a40 	vsub.f32	s0, s14, s0
 800785e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80078a4 <__ieee754_logf+0x1bc>
 8007862:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8007866:	4770      	bx	lr
 8007868:	ee70 7a67 	vsub.f32	s15, s0, s15
 800786c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007870:	b913      	cbnz	r3, 8007878 <__ieee754_logf+0x190>
 8007872:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007876:	4770      	bx	lr
 8007878:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80078a0 <__ieee754_logf+0x1b8>
 800787c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8007880:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007884:	e7eb      	b.n	800785e <__ieee754_logf+0x176>
 8007886:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8007890 <__ieee754_logf+0x1a8>
 800788a:	4770      	bx	lr
 800788c:	cc000000 	.word	0xcc000000
 8007890:	00000000 	.word	0x00000000
 8007894:	4c000000 	.word	0x4c000000
 8007898:	004afb20 	.word	0x004afb20
 800789c:	007ffff0 	.word	0x007ffff0
 80078a0:	3717f7d1 	.word	0x3717f7d1
 80078a4:	3f317180 	.word	0x3f317180
 80078a8:	3eaaaaab 	.word	0x3eaaaaab
 80078ac:	3e1cd04f 	.word	0x3e1cd04f
 80078b0:	3e178897 	.word	0x3e178897
 80078b4:	ffcf5c30 	.word	0xffcf5c30
 80078b8:	3e638e29 	.word	0x3e638e29
 80078bc:	3ecccccd 	.word	0x3ecccccd
 80078c0:	3e3a3325 	.word	0x3e3a3325
 80078c4:	3e924925 	.word	0x3e924925
 80078c8:	3f2aaaab 	.word	0x3f2aaaab

080078cc <_init>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	bf00      	nop
 80078d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d2:	bc08      	pop	{r3}
 80078d4:	469e      	mov	lr, r3
 80078d6:	4770      	bx	lr

080078d8 <_fini>:
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	bf00      	nop
 80078dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078de:	bc08      	pop	{r3}
 80078e0:	469e      	mov	lr, r3
 80078e2:	4770      	bx	lr
