
ISO_CAN_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006674  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006800  08006800  00007800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006840  08006840  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006840  08006840  0000800c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006840  08006840  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006840  08006840  00007840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006844  08006844  00007844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006848  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08006854  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08006854  00008168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011286  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce9  00000000  00000000  000192c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  0001bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf5  00000000  00000000  0001cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022412  00000000  00000000  0001db6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b70  00000000  00000000  0003ff7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceda4  00000000  00000000  00053aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122893  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e0  00000000  00000000  001228d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001269b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080067e8 	.word	0x080067e8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080067e8 	.word	0x080067e8

080001cc <ADC_ReadValue>:
/**
  * @brief  Read ADC value from PA0 (ADC channel 5)
  * @retval ADC value (0-4095 for 12-bit resolution)
  */
uint16_t ADC_ReadValue(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  uint16_t adc_value = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	80fb      	strh	r3, [r7, #6]
  
  // Start ADC conversion
  if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 80001d6:	480d      	ldr	r0, [pc, #52]	@ (800020c <ADC_ReadValue+0x40>)
 80001d8:	f002 fa52 	bl	8002680 <HAL_ADC_Start>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d10f      	bne.n	8000202 <ADC_ReadValue+0x36>
    // Wait for conversion to complete
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80001e2:	f04f 31ff 	mov.w	r1, #4294967295
 80001e6:	4809      	ldr	r0, [pc, #36]	@ (800020c <ADC_ReadValue+0x40>)
 80001e8:	f002 fae0 	bl	80027ac <HAL_ADC_PollForConversion>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d104      	bne.n	80001fc <ADC_ReadValue+0x30>
      // Get ADC value
      adc_value = HAL_ADC_GetValue(&hadc1);
 80001f2:	4806      	ldr	r0, [pc, #24]	@ (800020c <ADC_ReadValue+0x40>)
 80001f4:	f002 fb69 	bl	80028ca <HAL_ADC_GetValue>
 80001f8:	4603      	mov	r3, r0
 80001fa:	80fb      	strh	r3, [r7, #6]
    }
    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <ADC_ReadValue+0x40>)
 80001fe:	f002 faa2 	bl	8002746 <HAL_ADC_Stop>
  }
  
  return adc_value;
 8000202:	88fb      	ldrh	r3, [r7, #6]
}
 8000204:	4618      	mov	r0, r3
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	2000004c 	.word	0x2000004c

08000210 <BQ76952_ReadStackVoltage>:
/**
  * @brief  Read stack voltage from BQ76952 via I2C
  * @retval Stack voltage in millivolts (0 if communication failed)
  */
uint16_t BQ76952_ReadStackVoltage(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af04      	add	r7, sp, #16
  uint8_t reg_addr = BQ76952_STACK_VOLTAGE;
 8000216:	2334      	movs	r3, #52	@ 0x34
 8000218:	717b      	strb	r3, [r7, #5]
  uint8_t rx_data[2] = {0};
 800021a:	2300      	movs	r3, #0
 800021c:	803b      	strh	r3, [r7, #0]
  uint16_t stack_voltage_mv = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	80fb      	strh	r3, [r7, #6]
  
  // Read 2 bytes from BQ76952 stack voltage register
  if (HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), reg_addr, 1, rx_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 8000222:	797b      	ldrb	r3, [r7, #5]
 8000224:	b29a      	uxth	r2, r3
 8000226:	f04f 33ff 	mov.w	r3, #4294967295
 800022a:	9302      	str	r3, [sp, #8]
 800022c:	2302      	movs	r3, #2
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	463b      	mov	r3, r7
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2301      	movs	r3, #1
 8000236:	2110      	movs	r1, #16
 8000238:	480c      	ldr	r0, [pc, #48]	@ (800026c <BQ76952_ReadStackVoltage+0x5c>)
 800023a:	f004 fce9 	bl	8004c10 <HAL_I2C_Mem_Read>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d10e      	bne.n	8000262 <BQ76952_ReadStackVoltage+0x52>
    // Convert to millivolts (BQ76952 returns voltage in 0.01V units)
    // Combine low and high bytes (little endian)
    stack_voltage_mv = ((uint16_t)rx_data[1] << 8) | rx_data[0];
 8000244:	787b      	ldrb	r3, [r7, #1]
 8000246:	b21b      	sxth	r3, r3
 8000248:	021b      	lsls	r3, r3, #8
 800024a:	b21a      	sxth	r2, r3
 800024c:	783b      	ldrb	r3, [r7, #0]
 800024e:	b21b      	sxth	r3, r3
 8000250:	4313      	orrs	r3, r2
 8000252:	b21b      	sxth	r3, r3
 8000254:	80fb      	strh	r3, [r7, #6]
    stack_voltage_mv *= 10; // Convert from 0.01V to mV
 8000256:	88fb      	ldrh	r3, [r7, #6]
 8000258:	461a      	mov	r2, r3
 800025a:	0092      	lsls	r2, r2, #2
 800025c:	4413      	add	r3, r2
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	80fb      	strh	r3, [r7, #6]
  }
  
  return stack_voltage_mv;
 8000262:	88fb      	ldrh	r3, [r7, #6]
}
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200000fc 	.word	0x200000fc

08000270 <BQ76952_ReadCellVoltage>:
  * @brief  Read individual cell voltage from BQ76952 via I2C
  * @param  cell_number: Cell number (1-16)
  * @retval Cell voltage in millivolts (0 if communication failed)
  */
uint16_t BQ76952_ReadCellVoltage(uint8_t cell_number)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af04      	add	r7, sp, #16
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  uint8_t reg_addr;
  uint8_t rx_data[2] = {0};
 800027a:	2300      	movs	r3, #0
 800027c:	813b      	strh	r3, [r7, #8]
  uint16_t cell_voltage_mv = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	81fb      	strh	r3, [r7, #14]
  
  // Validate cell number
  if (cell_number < 1 || cell_number > BQ76952_MAX_CELLS) {
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d002      	beq.n	800028e <BQ76952_ReadCellVoltage+0x1e>
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	2b10      	cmp	r3, #16
 800028c:	d901      	bls.n	8000292 <BQ76952_ReadCellVoltage+0x22>
    return 0;
 800028e:	2300      	movs	r3, #0
 8000290:	e020      	b.n	80002d4 <BQ76952_ReadCellVoltage+0x64>
  }
  
  // Calculate register address for the cell (Cell 1 starts at 0x14, increment by 2 for each cell)
  reg_addr = BQ76952_CELL1_VOLTAGE + ((cell_number - 1) * 2);
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	3309      	adds	r3, #9
 8000296:	b2db      	uxtb	r3, r3
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	737b      	strb	r3, [r7, #13]
  
  // Read 2 bytes from BQ76952 cell voltage register
  if (HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), reg_addr, 1, rx_data, 2, HAL_MAX_DELAY) == HAL_OK) {
 800029c:	7b7b      	ldrb	r3, [r7, #13]
 800029e:	b29a      	uxth	r2, r3
 80002a0:	f04f 33ff 	mov.w	r3, #4294967295
 80002a4:	9302      	str	r3, [sp, #8]
 80002a6:	2302      	movs	r3, #2
 80002a8:	9301      	str	r3, [sp, #4]
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	2301      	movs	r3, #1
 80002b2:	2110      	movs	r1, #16
 80002b4:	4809      	ldr	r0, [pc, #36]	@ (80002dc <BQ76952_ReadCellVoltage+0x6c>)
 80002b6:	f004 fcab 	bl	8004c10 <HAL_I2C_Mem_Read>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d108      	bne.n	80002d2 <BQ76952_ReadCellVoltage+0x62>
    // Convert to millivolts (BQ76952 returns voltage in 1mV units)
    // Combine low and high bytes (little endian)
    cell_voltage_mv = ((uint16_t)rx_data[1] << 8) | rx_data[0];
 80002c0:	7a7b      	ldrb	r3, [r7, #9]
 80002c2:	b21b      	sxth	r3, r3
 80002c4:	021b      	lsls	r3, r3, #8
 80002c6:	b21a      	sxth	r2, r3
 80002c8:	7a3b      	ldrb	r3, [r7, #8]
 80002ca:	b21b      	sxth	r3, r3
 80002cc:	4313      	orrs	r3, r2
 80002ce:	b21b      	sxth	r3, r3
 80002d0:	81fb      	strh	r3, [r7, #14]
  }
  
  return cell_voltage_mv;
 80002d2:	89fb      	ldrh	r3, [r7, #14]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200000fc 	.word	0x200000fc

080002e0 <BQ76952_WriteDataMemory>:
  * @param  data: Pointer to data to write
  * @param  length: Number of bytes to write (max 32)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76952_WriteDataMemory(uint16_t address, uint8_t *data, uint8_t length)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08a      	sub	sp, #40	@ 0x28
 80002e4:	af04      	add	r7, sp, #16
 80002e6:	4603      	mov	r3, r0
 80002e8:	6039      	str	r1, [r7, #0]
 80002ea:	80fb      	strh	r3, [r7, #6]
 80002ec:	4613      	mov	r3, r2
 80002ee:	717b      	strb	r3, [r7, #5]
  uint8_t subcommand[2];
  uint8_t checksum = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	75fb      	strb	r3, [r7, #23]
  uint8_t data_length;
  uint8_t verify_bytes[2];
  uint8_t i;
  uint8_t retry_count = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	757b      	strb	r3, [r7, #21]
  
  if (length > 32 || data == NULL) {
 80002f8:	797b      	ldrb	r3, [r7, #5]
 80002fa:	2b20      	cmp	r3, #32
 80002fc:	d802      	bhi.n	8000304 <BQ76952_WriteDataMemory+0x24>
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <BQ76952_WriteDataMemory+0x28>
    return HAL_ERROR;  // Maximum block size is 32 bytes
 8000304:	2301      	movs	r3, #1
 8000306:	e0e9      	b.n	80004dc <BQ76952_WriteDataMemory+0x1fc>
  }
  
  // Add substantial delay before starting new data memory operation
  HAL_Delay(200);  // Give BMS time to finish any previous operations
 8000308:	20c8      	movs	r0, #200	@ 0xc8
 800030a:	f001 fe3d 	bl	8001f88 <HAL_Delay>
  
  // Step 1: Write subcommand address to 0x3E and 0x3F
  subcommand[0] = (uint8_t)(address & 0xFF);        // Low byte to 0x3E
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	743b      	strb	r3, [r7, #16]
  subcommand[1] = (uint8_t)((address >> 8) & 0xFF); // High byte to 0x3F
 8000314:	88fb      	ldrh	r3, [r7, #6]
 8000316:	0a1b      	lsrs	r3, r3, #8
 8000318:	b29b      	uxth	r3, r3
 800031a:	b2db      	uxtb	r3, r3
 800031c:	747b      	strb	r3, [r7, #17]
  
  if (HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_LOW, 1, &subcommand[0], 1, HAL_MAX_DELAY) != HAL_OK) {
 800031e:	f04f 33ff 	mov.w	r3, #4294967295
 8000322:	9302      	str	r3, [sp, #8]
 8000324:	2301      	movs	r3, #1
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	f107 0310 	add.w	r3, r7, #16
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	2301      	movs	r3, #1
 8000330:	223e      	movs	r2, #62	@ 0x3e
 8000332:	2110      	movs	r1, #16
 8000334:	486b      	ldr	r0, [pc, #428]	@ (80004e4 <BQ76952_WriteDataMemory+0x204>)
 8000336:	f004 fb57 	bl	80049e8 <HAL_I2C_Mem_Write>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d004      	beq.n	800034a <BQ76952_WriteDataMemory+0x6a>
    System_SendErrorMessage(ERROR_I2C_COMMUNICATION);
 8000340:	2002      	movs	r0, #2
 8000342:	f001 fd63 	bl	8001e0c <System_SendErrorMessage>
    return HAL_ERROR;
 8000346:	2301      	movs	r3, #1
 8000348:	e0c8      	b.n	80004dc <BQ76952_WriteDataMemory+0x1fc>
  }
  HAL_Delay(10);  // Delay between subcommand writes
 800034a:	200a      	movs	r0, #10
 800034c:	f001 fe1c 	bl	8001f88 <HAL_Delay>
  
  if (HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_HIGH, 1, &subcommand[1], 1, HAL_MAX_DELAY) != HAL_OK) {
 8000350:	f04f 33ff 	mov.w	r3, #4294967295
 8000354:	9302      	str	r3, [sp, #8]
 8000356:	2301      	movs	r3, #1
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	3301      	adds	r3, #1
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2301      	movs	r3, #1
 8000364:	223f      	movs	r2, #63	@ 0x3f
 8000366:	2110      	movs	r1, #16
 8000368:	485e      	ldr	r0, [pc, #376]	@ (80004e4 <BQ76952_WriteDataMemory+0x204>)
 800036a:	f004 fb3d 	bl	80049e8 <HAL_I2C_Mem_Write>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d004      	beq.n	800037e <BQ76952_WriteDataMemory+0x9e>
    System_SendErrorMessage(ERROR_I2C_COMMUNICATION);
 8000374:	2002      	movs	r0, #2
 8000376:	f001 fd49 	bl	8001e0c <System_SendErrorMessage>
    return HAL_ERROR;
 800037a:	2301      	movs	r3, #1
 800037c:	e0ae      	b.n	80004dc <BQ76952_WriteDataMemory+0x1fc>
  }
  
  // Step 2: Wait for subcommand completion (per datasheet page 13)
  // Read 0x3E and 0x3F until they return original values (not 0xFF)
  HAL_Delay(50);  // Initial delay for subcommand processing
 800037e:	2032      	movs	r0, #50	@ 0x32
 8000380:	f001 fe02 	bl	8001f88 <HAL_Delay>
  
  for (retry_count = 0; retry_count < 10; retry_count++) {
 8000384:	2300      	movs	r3, #0
 8000386:	757b      	strb	r3, [r7, #21]
 8000388:	e03a      	b.n	8000400 <BQ76952_WriteDataMemory+0x120>
    if (HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_LOW, 1, &verify_bytes[0], 1, HAL_MAX_DELAY) != HAL_OK) {
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
 800038e:	9302      	str	r3, [sp, #8]
 8000390:	2301      	movs	r3, #1
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	f107 030c 	add.w	r3, r7, #12
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	2301      	movs	r3, #1
 800039c:	223e      	movs	r2, #62	@ 0x3e
 800039e:	2110      	movs	r1, #16
 80003a0:	4850      	ldr	r0, [pc, #320]	@ (80004e4 <BQ76952_WriteDataMemory+0x204>)
 80003a2:	f004 fc35 	bl	8004c10 <HAL_I2C_Mem_Read>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d004      	beq.n	80003b6 <BQ76952_WriteDataMemory+0xd6>
      System_SendErrorMessage(ERROR_I2C_COMMUNICATION);
 80003ac:	2002      	movs	r0, #2
 80003ae:	f001 fd2d 	bl	8001e0c <System_SendErrorMessage>
      return HAL_ERROR;
 80003b2:	2301      	movs	r3, #1
 80003b4:	e092      	b.n	80004dc <BQ76952_WriteDataMemory+0x1fc>
    }
    if (HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_HIGH, 1, &verify_bytes[1], 1, HAL_MAX_DELAY) != HAL_OK) {
 80003b6:	f04f 33ff 	mov.w	r3, #4294967295
 80003ba:	9302      	str	r3, [sp, #8]
 80003bc:	2301      	movs	r3, #1
 80003be:	9301      	str	r3, [sp, #4]
 80003c0:	f107 030c 	add.w	r3, r7, #12
 80003c4:	3301      	adds	r3, #1
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2301      	movs	r3, #1
 80003ca:	223f      	movs	r2, #63	@ 0x3f
 80003cc:	2110      	movs	r1, #16
 80003ce:	4845      	ldr	r0, [pc, #276]	@ (80004e4 <BQ76952_WriteDataMemory+0x204>)
 80003d0:	f004 fc1e 	bl	8004c10 <HAL_I2C_Mem_Read>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d004      	beq.n	80003e4 <BQ76952_WriteDataMemory+0x104>
      System_SendErrorMessage(ERROR_I2C_COMMUNICATION);
 80003da:	2002      	movs	r0, #2
 80003dc:	f001 fd16 	bl	8001e0c <System_SendErrorMessage>
      return HAL_ERROR;
 80003e0:	2301      	movs	r3, #1
 80003e2:	e07b      	b.n	80004dc <BQ76952_WriteDataMemory+0x1fc>
    }
    
    // Check if subcommand completed (returns original values, not 0xFF)
    if (verify_bytes[0] == subcommand[0] && verify_bytes[1] == subcommand[1]) {
 80003e4:	7b3a      	ldrb	r2, [r7, #12]
 80003e6:	7c3b      	ldrb	r3, [r7, #16]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d103      	bne.n	80003f4 <BQ76952_WriteDataMemory+0x114>
 80003ec:	7b7a      	ldrb	r2, [r7, #13]
 80003ee:	7c7b      	ldrb	r3, [r7, #17]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d009      	beq.n	8000408 <BQ76952_WriteDataMemory+0x128>
      break;  // Subcommand completed successfully
    }
    
    HAL_Delay(20);  // Wait before retry
 80003f4:	2014      	movs	r0, #20
 80003f6:	f001 fdc7 	bl	8001f88 <HAL_Delay>
  for (retry_count = 0; retry_count < 10; retry_count++) {
 80003fa:	7d7b      	ldrb	r3, [r7, #21]
 80003fc:	3301      	adds	r3, #1
 80003fe:	757b      	strb	r3, [r7, #21]
 8000400:	7d7b      	ldrb	r3, [r7, #21]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d9c1      	bls.n	800038a <BQ76952_WriteDataMemory+0xaa>
 8000406:	e000      	b.n	800040a <BQ76952_WriteDataMemory+0x12a>
      break;  // Subcommand completed successfully
 8000408:	bf00      	nop
  }
  
  if (retry_count >= 10) {
 800040a:	7d7b      	ldrb	r3, [r7, #21]
 800040c:	2b09      	cmp	r3, #9
 800040e:	d904      	bls.n	800041a <BQ76952_WriteDataMemory+0x13a>
    System_SendErrorMessage(ERROR_DATA_MEMORY_WRITE);
 8000410:	2003      	movs	r0, #3
 8000412:	f001 fcfb 	bl	8001e0c <System_SendErrorMessage>
    return HAL_ERROR;  // Subcommand did not complete
 8000416:	2301      	movs	r3, #1
 8000418:	e060      	b.n	80004dc <BQ76952_WriteDataMemory+0x1fc>
  }
  
  // Step 3: Write data to transfer buffer (0x40-0x5F)
  for (i = 0; i < length; i++) {
 800041a:	2300      	movs	r3, #0
 800041c:	75bb      	strb	r3, [r7, #22]
 800041e:	e020      	b.n	8000462 <BQ76952_WriteDataMemory+0x182>
    if (HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_BLOCK_DATA_BASE + i, 1, &data[i], 1, HAL_MAX_DELAY) != HAL_OK) {
 8000420:	7dbb      	ldrb	r3, [r7, #22]
 8000422:	b29b      	uxth	r3, r3
 8000424:	3340      	adds	r3, #64	@ 0x40
 8000426:	b299      	uxth	r1, r3
 8000428:	7dbb      	ldrb	r3, [r7, #22]
 800042a:	683a      	ldr	r2, [r7, #0]
 800042c:	4413      	add	r3, r2
 800042e:	f04f 32ff 	mov.w	r2, #4294967295
 8000432:	9202      	str	r2, [sp, #8]
 8000434:	2201      	movs	r2, #1
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	2301      	movs	r3, #1
 800043c:	460a      	mov	r2, r1
 800043e:	2110      	movs	r1, #16
 8000440:	4828      	ldr	r0, [pc, #160]	@ (80004e4 <BQ76952_WriteDataMemory+0x204>)
 8000442:	f004 fad1 	bl	80049e8 <HAL_I2C_Mem_Write>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d004      	beq.n	8000456 <BQ76952_WriteDataMemory+0x176>
      System_SendErrorMessage(ERROR_I2C_COMMUNICATION);
 800044c:	2002      	movs	r0, #2
 800044e:	f001 fcdd 	bl	8001e0c <System_SendErrorMessage>
      return HAL_ERROR;
 8000452:	2301      	movs	r3, #1
 8000454:	e042      	b.n	80004dc <BQ76952_WriteDataMemory+0x1fc>
    }
    HAL_Delay(5);  // Increased delay between each data byte
 8000456:	2005      	movs	r0, #5
 8000458:	f001 fd96 	bl	8001f88 <HAL_Delay>
  for (i = 0; i < length; i++) {
 800045c:	7dbb      	ldrb	r3, [r7, #22]
 800045e:	3301      	adds	r3, #1
 8000460:	75bb      	strb	r3, [r7, #22]
 8000462:	7dba      	ldrb	r2, [r7, #22]
 8000464:	797b      	ldrb	r3, [r7, #5]
 8000466:	429a      	cmp	r2, r3
 8000468:	d3da      	bcc.n	8000420 <BQ76952_WriteDataMemory+0x140>
  }
  
  // Step 4: Calculate checksum (sum of subcommand bytes + data bytes, then bitwise inverted)
  checksum = subcommand[0] + subcommand[1];
 800046a:	7c3a      	ldrb	r2, [r7, #16]
 800046c:	7c7b      	ldrb	r3, [r7, #17]
 800046e:	4413      	add	r3, r2
 8000470:	75fb      	strb	r3, [r7, #23]
  for (i = 0; i < length; i++) {
 8000472:	2300      	movs	r3, #0
 8000474:	75bb      	strb	r3, [r7, #22]
 8000476:	e009      	b.n	800048c <BQ76952_WriteDataMemory+0x1ac>
    checksum += data[i];
 8000478:	7dbb      	ldrb	r3, [r7, #22]
 800047a:	683a      	ldr	r2, [r7, #0]
 800047c:	4413      	add	r3, r2
 800047e:	781a      	ldrb	r2, [r3, #0]
 8000480:	7dfb      	ldrb	r3, [r7, #23]
 8000482:	4413      	add	r3, r2
 8000484:	75fb      	strb	r3, [r7, #23]
  for (i = 0; i < length; i++) {
 8000486:	7dbb      	ldrb	r3, [r7, #22]
 8000488:	3301      	adds	r3, #1
 800048a:	75bb      	strb	r3, [r7, #22]
 800048c:	7dba      	ldrb	r2, [r7, #22]
 800048e:	797b      	ldrb	r3, [r7, #5]
 8000490:	429a      	cmp	r2, r3
 8000492:	d3f1      	bcc.n	8000478 <BQ76952_WriteDataMemory+0x198>
  }
  checksum = ~checksum;  // Bitwise invert (per datasheet)
 8000494:	7dfb      	ldrb	r3, [r7, #23]
 8000496:	43db      	mvns	r3, r3
 8000498:	75fb      	strb	r3, [r7, #23]
  
  // Step 5: Calculate data length (includes 0x3E, 0x3F, 0x60, 0x61 + buffer length)
  data_length = length + 4;
 800049a:	797b      	ldrb	r3, [r7, #5]
 800049c:	3304      	adds	r3, #4
 800049e:	753b      	strb	r3, [r7, #20]
  
  // Step 6: Write checksum and length together as a word to 0x60 and 0x61
  uint8_t checksum_length[2] = {checksum, data_length};
 80004a0:	7dfb      	ldrb	r3, [r7, #23]
 80004a2:	723b      	strb	r3, [r7, #8]
 80004a4:	7d3b      	ldrb	r3, [r7, #20]
 80004a6:	727b      	strb	r3, [r7, #9]
  if (HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_BLOCK_DATA_CHECKSUM, 1, checksum_length, 2, HAL_MAX_DELAY) != HAL_OK) {
 80004a8:	f04f 33ff 	mov.w	r3, #4294967295
 80004ac:	9302      	str	r3, [sp, #8]
 80004ae:	2302      	movs	r3, #2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	f107 0308 	add.w	r3, r7, #8
 80004b6:	9300      	str	r3, [sp, #0]
 80004b8:	2301      	movs	r3, #1
 80004ba:	2260      	movs	r2, #96	@ 0x60
 80004bc:	2110      	movs	r1, #16
 80004be:	4809      	ldr	r0, [pc, #36]	@ (80004e4 <BQ76952_WriteDataMemory+0x204>)
 80004c0:	f004 fa92 	bl	80049e8 <HAL_I2C_Mem_Write>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d004      	beq.n	80004d4 <BQ76952_WriteDataMemory+0x1f4>
    System_SendErrorMessage(ERROR_I2C_COMMUNICATION);
 80004ca:	2002      	movs	r0, #2
 80004cc:	f001 fc9e 	bl	8001e0c <System_SendErrorMessage>
    return HAL_ERROR;
 80004d0:	2301      	movs	r3, #1
 80004d2:	e003      	b.n	80004dc <BQ76952_WriteDataMemory+0x1fc>
  }
  
  // Step 7: Extended delay to allow BMS to process the complete transaction
  HAL_Delay(250);  // Substantial delay for data memory write completion
 80004d4:	20fa      	movs	r0, #250	@ 0xfa
 80004d6:	f001 fd57 	bl	8001f88 <HAL_Delay>
  
  return HAL_OK;
 80004da:	2300      	movs	r3, #0
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3718      	adds	r7, #24
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200000fc 	.word	0x200000fc

080004e8 <BQ76952_SetTemperatureThresholds>:
  * @param  min_temp_c: Minimum temperature in Celsius (-40 to 120)
  * @param  max_temp_c: Maximum temperature in Celsius (-40 to 120)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76952_SetTemperatureThresholds(int8_t min_temp_c, int8_t max_temp_c)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
  uint8_t temp_data;
  
  // Validate temperature range
  if (min_temp_c < -40 || min_temp_c > 120 || max_temp_c < -40 || max_temp_c > 120) {
 80004f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fc:	f113 0f28 	cmn.w	r3, #40	@ 0x28
 8000500:	db0c      	blt.n	800051c <BQ76952_SetTemperatureThresholds+0x34>
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	2b78      	cmp	r3, #120	@ 0x78
 8000508:	dc08      	bgt.n	800051c <BQ76952_SetTemperatureThresholds+0x34>
 800050a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800050e:	f113 0f28 	cmn.w	r3, #40	@ 0x28
 8000512:	db03      	blt.n	800051c <BQ76952_SetTemperatureThresholds+0x34>
 8000514:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000518:	2b78      	cmp	r3, #120	@ 0x78
 800051a:	dd04      	ble.n	8000526 <BQ76952_SetTemperatureThresholds+0x3e>
    System_SendErrorMessage(ERROR_TEMP_RANGE_INVALID);
 800051c:	2001      	movs	r0, #1
 800051e:	f001 fc75 	bl	8001e0c <System_SendErrorMessage>
    return HAL_ERROR;
 8000522:	2301      	movs	r3, #1
 8000524:	e032      	b.n	800058c <BQ76952_SetTemperatureThresholds+0xa4>
  }
  
  // Debug: Send what we're about to write for minimum temp
  temp_data = (uint8_t)min_temp_c;
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	73fb      	strb	r3, [r7, #15]
  System_SendErrorMessage(temp_data);  // Debug: Show what we're writing for min temp
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	4618      	mov	r0, r3
 800052e:	f001 fc6d 	bl	8001e0c <System_SendErrorMessage>
  
  // Set UTC (Under Temperature Charge) threshold - minimum temperature
  if (BQ76952_WriteDataMemory(BQ76952_UTC_THRESHOLD, &temp_data, 1) != HAL_OK) {
 8000532:	f107 030f 	add.w	r3, r7, #15
 8000536:	2201      	movs	r2, #1
 8000538:	4619      	mov	r1, r3
 800053a:	f249 20a6 	movw	r0, #37542	@ 0x92a6
 800053e:	f7ff fecf 	bl	80002e0 <BQ76952_WriteDataMemory>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d004      	beq.n	8000552 <BQ76952_SetTemperatureThresholds+0x6a>
    System_SendErrorMessage(ERROR_DATA_MEMORY_WRITE);
 8000548:	2003      	movs	r0, #3
 800054a:	f001 fc5f 	bl	8001e0c <System_SendErrorMessage>
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e01c      	b.n	800058c <BQ76952_SetTemperatureThresholds+0xa4>
  }
  
  // Extended delay between consecutive data memory writes
  HAL_Delay(500);  // Give BMS substantial time to process first write before second
 8000552:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000556:	f001 fd17 	bl	8001f88 <HAL_Delay>
  
  // Debug: Send what we're about to write for maximum temp (with offset to distinguish)
  temp_data = (uint8_t)max_temp_c;
 800055a:	79bb      	ldrb	r3, [r7, #6]
 800055c:	73fb      	strb	r3, [r7, #15]
  System_SendErrorMessage(temp_data + 0x40);  // Debug: Show what we're writing for max temp (offset)
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	3340      	adds	r3, #64	@ 0x40
 8000562:	b2db      	uxtb	r3, r3
 8000564:	4618      	mov	r0, r3
 8000566:	f001 fc51 	bl	8001e0c <System_SendErrorMessage>
  
  // Set OTC (Over Temperature Charge) threshold - maximum temperature
  if (BQ76952_WriteDataMemory(BQ76952_OTC_THRESHOLD, &temp_data, 1) != HAL_OK) {
 800056a:	f107 030f 	add.w	r3, r7, #15
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f249 209a 	movw	r0, #37530	@ 0x929a
 8000576:	f7ff feb3 	bl	80002e0 <BQ76952_WriteDataMemory>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d004      	beq.n	800058a <BQ76952_SetTemperatureThresholds+0xa2>
    System_SendErrorMessage(ERROR_DATA_MEMORY_WRITE);
 8000580:	2003      	movs	r0, #3
 8000582:	f001 fc43 	bl	8001e0c <System_SendErrorMessage>
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e000      	b.n	800058c <BQ76952_SetTemperatureThresholds+0xa4>
  }
  
  return HAL_OK;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <BQ76952_ResetCommState>:
/**
  * @brief  Reset BQ76952 communication state with multiple attempts
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76952_ResetCommState(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af04      	add	r7, sp, #16
  uint8_t dummy_data = 0x00;
 800059a:	2300      	movs	r3, #0
 800059c:	71bb      	strb	r3, [r7, #6]
  uint8_t retry_count;
  
  // Try multiple reset attempts to ensure state is cleared
  for (retry_count = 0; retry_count < 3; retry_count++) {
 800059e:	2300      	movs	r3, #0
 80005a0:	71fb      	strb	r3, [r7, #7]
 80005a2:	e042      	b.n	800062a <BQ76952_ResetCommState+0x96>
    // Clear subcommand registers
    HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_LOW, 1, &dummy_data, 1, HAL_MAX_DELAY);
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	9302      	str	r3, [sp, #8]
 80005aa:	2301      	movs	r3, #1
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	1dbb      	adds	r3, r7, #6
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2301      	movs	r3, #1
 80005b4:	223e      	movs	r2, #62	@ 0x3e
 80005b6:	2110      	movs	r1, #16
 80005b8:	4820      	ldr	r0, [pc, #128]	@ (800063c <BQ76952_ResetCommState+0xa8>)
 80005ba:	f004 fa15 	bl	80049e8 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80005be:	200a      	movs	r0, #10
 80005c0:	f001 fce2 	bl	8001f88 <HAL_Delay>
    HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_HIGH, 1, &dummy_data, 1, HAL_MAX_DELAY);
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	9302      	str	r3, [sp, #8]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	1dbb      	adds	r3, r7, #6
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	223f      	movs	r2, #63	@ 0x3f
 80005d6:	2110      	movs	r1, #16
 80005d8:	4818      	ldr	r0, [pc, #96]	@ (800063c <BQ76952_ResetCommState+0xa8>)
 80005da:	f004 fa05 	bl	80049e8 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80005de:	200a      	movs	r0, #10
 80005e0:	f001 fcd2 	bl	8001f88 <HAL_Delay>
    
    // Clear the data buffer control register
    HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_BLOCK_DATA_CONTROL, 1, &dummy_data, 1, HAL_MAX_DELAY);
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	9302      	str	r3, [sp, #8]
 80005ea:	2301      	movs	r3, #1
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	1dbb      	adds	r3, r7, #6
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2301      	movs	r3, #1
 80005f4:	2261      	movs	r2, #97	@ 0x61
 80005f6:	2110      	movs	r1, #16
 80005f8:	4810      	ldr	r0, [pc, #64]	@ (800063c <BQ76952_ResetCommState+0xa8>)
 80005fa:	f004 f9f5 	bl	80049e8 <HAL_I2C_Mem_Write>
    HAL_Delay(20);
 80005fe:	2014      	movs	r0, #20
 8000600:	f001 fcc2 	bl	8001f88 <HAL_Delay>
    
    // Clear checksum register as well
    HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_BLOCK_DATA_CHECKSUM, 1, &dummy_data, 1, HAL_MAX_DELAY);
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	9302      	str	r3, [sp, #8]
 800060a:	2301      	movs	r3, #1
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	1dbb      	adds	r3, r7, #6
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2301      	movs	r3, #1
 8000614:	2260      	movs	r2, #96	@ 0x60
 8000616:	2110      	movs	r1, #16
 8000618:	4808      	ldr	r0, [pc, #32]	@ (800063c <BQ76952_ResetCommState+0xa8>)
 800061a:	f004 f9e5 	bl	80049e8 <HAL_I2C_Mem_Write>
    HAL_Delay(30);  // Longer delay between reset attempts
 800061e:	201e      	movs	r0, #30
 8000620:	f001 fcb2 	bl	8001f88 <HAL_Delay>
  for (retry_count = 0; retry_count < 3; retry_count++) {
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	3301      	adds	r3, #1
 8000628:	71fb      	strb	r3, [r7, #7]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d9b9      	bls.n	80005a4 <BQ76952_ResetCommState+0x10>
  }
  
  return HAL_OK;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000fc 	.word	0x200000fc

08000640 <BQ76952_ReadTemperatureThresholds>:
  * @param  min_temp_c: Pointer to store minimum temperature in Celsius
  * @param  max_temp_c: Pointer to store maximum temperature in Celsius
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76952_ReadTemperatureThresholds(int8_t *min_temp_c, int8_t *max_temp_c)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af04      	add	r7, sp, #16
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
  uint8_t test_data[2];
  uint8_t buffer_data = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	72fb      	strb	r3, [r7, #11]
  uint8_t subcommand[2];
  int result;
  uint8_t retry_attempt;
  uint8_t comm_test_passed = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	75bb      	strb	r3, [r7, #22]
  
  if (min_temp_c == NULL || max_temp_c == NULL) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <BQ76952_ReadTemperatureThresholds+0x1e>
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d101      	bne.n	8000662 <BQ76952_ReadTemperatureThresholds+0x22>
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e14b      	b.n	80008fa <BQ76952_ReadTemperatureThresholds+0x2ba>
  }
  
  // Set default values
  *min_temp_c = -10;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	22f6      	movs	r2, #246	@ 0xf6
 8000666:	701a      	strb	r2, [r3, #0]
  *max_temp_c = 60;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	223c      	movs	r2, #60	@ 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
  
  // Try communication test with retries
  for (retry_attempt = 0; retry_attempt < 3; retry_attempt++) {
 800066e:	2300      	movs	r3, #0
 8000670:	75fb      	strb	r3, [r7, #23]
 8000672:	e020      	b.n	80006b6 <BQ76952_ReadTemperatureThresholds+0x76>
    // Always reset communication state first
    BQ76952_ResetCommState();
 8000674:	f7ff ff8e 	bl	8000594 <BQ76952_ResetCommState>
    HAL_Delay(100);  // Extra delay after reset
 8000678:	2064      	movs	r0, #100	@ 0x64
 800067a:	f001 fc85 	bl	8001f88 <HAL_Delay>
    
    // Test basic I2C communication with stack voltage read
    result = HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_STACK_VOLTAGE, 1, test_data, 2, HAL_MAX_DELAY);
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	9302      	str	r3, [sp, #8]
 8000684:	2302      	movs	r3, #2
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	2234      	movs	r2, #52	@ 0x34
 8000692:	2110      	movs	r1, #16
 8000694:	489b      	ldr	r0, [pc, #620]	@ (8000904 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 8000696:	f004 fabb 	bl	8004c10 <HAL_I2C_Mem_Read>
 800069a:	4603      	mov	r3, r0
 800069c:	613b      	str	r3, [r7, #16]
    if (result == HAL_OK) {
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <BQ76952_ReadTemperatureThresholds+0x6a>
      comm_test_passed = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	75bb      	strb	r3, [r7, #22]
      break;  // Communication works, proceed
 80006a8:	e008      	b.n	80006bc <BQ76952_ReadTemperatureThresholds+0x7c>
    }
    
    HAL_Delay(200);  // Wait before retry
 80006aa:	20c8      	movs	r0, #200	@ 0xc8
 80006ac:	f001 fc6c 	bl	8001f88 <HAL_Delay>
  for (retry_attempt = 0; retry_attempt < 3; retry_attempt++) {
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	3301      	adds	r3, #1
 80006b4:	75fb      	strb	r3, [r7, #23]
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d9db      	bls.n	8000674 <BQ76952_ReadTemperatureThresholds+0x34>
  }
  
  if (!comm_test_passed) {
 80006bc:	7dbb      	ldrb	r3, [r7, #22]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d104      	bne.n	80006cc <BQ76952_ReadTemperatureThresholds+0x8c>
    System_SendErrorMessage(0xFF);  // Basic I2C failure after retries
 80006c2:	20ff      	movs	r0, #255	@ 0xff
 80006c4:	f001 fba2 	bl	8001e0c <System_SendErrorMessage>
    return HAL_OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	e116      	b.n	80008fa <BQ76952_ReadTemperatureThresholds+0x2ba>
  }
  
  // === Read UTC Threshold (Min Temp) with retry logic ===
  for (retry_attempt = 0; retry_attempt < 2; retry_attempt++) {
 80006cc:	2300      	movs	r3, #0
 80006ce:	75fb      	strb	r3, [r7, #23]
 80006d0:	e080      	b.n	80007d4 <BQ76952_ReadTemperatureThresholds+0x194>
    subcommand[0] = (uint8_t)(BQ76952_UTC_THRESHOLD & 0xFF);        
 80006d2:	23a6      	movs	r3, #166	@ 0xa6
 80006d4:	723b      	strb	r3, [r7, #8]
    subcommand[1] = (uint8_t)((BQ76952_UTC_THRESHOLD >> 8) & 0xFF); 
 80006d6:	2392      	movs	r3, #146	@ 0x92
 80006d8:	727b      	strb	r3, [r7, #9]
    
    // Write subcommand with extended delays
    result = HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_LOW, 1, &subcommand[0], 1, HAL_MAX_DELAY);
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	9302      	str	r3, [sp, #8]
 80006e0:	2301      	movs	r3, #1
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	223e      	movs	r2, #62	@ 0x3e
 80006ee:	2110      	movs	r1, #16
 80006f0:	4884      	ldr	r0, [pc, #528]	@ (8000904 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 80006f2:	f004 f979 	bl	80049e8 <HAL_I2C_Mem_Write>
 80006f6:	4603      	mov	r3, r0
 80006f8:	613b      	str	r3, [r7, #16]
    if (result != HAL_OK) {
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d00f      	beq.n	8000720 <BQ76952_ReadTemperatureThresholds+0xe0>
      if (retry_attempt == 0) {
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d105      	bne.n	8000712 <BQ76952_ReadTemperatureThresholds+0xd2>
        BQ76952_ResetCommState();
 8000706:	f7ff ff45 	bl	8000594 <BQ76952_ResetCommState>
        HAL_Delay(200);
 800070a:	20c8      	movs	r0, #200	@ 0xc8
 800070c:	f001 fc3c 	bl	8001f88 <HAL_Delay>
        continue;  // Retry
 8000710:	e05d      	b.n	80007ce <BQ76952_ReadTemperatureThresholds+0x18e>
      } else {
        System_SendErrorMessage(0xFE);  // Final failure
 8000712:	20fe      	movs	r0, #254	@ 0xfe
 8000714:	f001 fb7a 	bl	8001e0c <System_SendErrorMessage>
        BQ76952_ResetCommState();
 8000718:	f7ff ff3c 	bl	8000594 <BQ76952_ResetCommState>
        return HAL_OK;
 800071c:	2300      	movs	r3, #0
 800071e:	e0ec      	b.n	80008fa <BQ76952_ReadTemperatureThresholds+0x2ba>
      }
    }
    
    HAL_Delay(30);  // Longer delay between subcommand bytes
 8000720:	201e      	movs	r0, #30
 8000722:	f001 fc31 	bl	8001f88 <HAL_Delay>
    
    result = HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_HIGH, 1, &subcommand[1], 1, HAL_MAX_DELAY);
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	9302      	str	r3, [sp, #8]
 800072c:	2301      	movs	r3, #1
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	3301      	adds	r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2301      	movs	r3, #1
 800073a:	223f      	movs	r2, #63	@ 0x3f
 800073c:	2110      	movs	r1, #16
 800073e:	4871      	ldr	r0, [pc, #452]	@ (8000904 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 8000740:	f004 f952 	bl	80049e8 <HAL_I2C_Mem_Write>
 8000744:	4603      	mov	r3, r0
 8000746:	613b      	str	r3, [r7, #16]
    if (result != HAL_OK) {
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d00f      	beq.n	800076e <BQ76952_ReadTemperatureThresholds+0x12e>
      if (retry_attempt == 0) {
 800074e:	7dfb      	ldrb	r3, [r7, #23]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d105      	bne.n	8000760 <BQ76952_ReadTemperatureThresholds+0x120>
        BQ76952_ResetCommState();
 8000754:	f7ff ff1e 	bl	8000594 <BQ76952_ResetCommState>
        HAL_Delay(200);
 8000758:	20c8      	movs	r0, #200	@ 0xc8
 800075a:	f001 fc15 	bl	8001f88 <HAL_Delay>
        continue;  // Retry
 800075e:	e036      	b.n	80007ce <BQ76952_ReadTemperatureThresholds+0x18e>
      } else {
        System_SendErrorMessage(0xFD);  // Final failure
 8000760:	20fd      	movs	r0, #253	@ 0xfd
 8000762:	f001 fb53 	bl	8001e0c <System_SendErrorMessage>
        BQ76952_ResetCommState();
 8000766:	f7ff ff15 	bl	8000594 <BQ76952_ResetCommState>
        return HAL_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	e0c5      	b.n	80008fa <BQ76952_ReadTemperatureThresholds+0x2ba>
      }
    }
    
    // Extended wait for BMS to process subcommand and populate buffer
    HAL_Delay(300);  // Longer processing delay
 800076e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000772:	f001 fc09 	bl	8001f88 <HAL_Delay>
    
    // Read from buffer
    result = HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_BLOCK_DATA_BASE, 1, &buffer_data, 1, HAL_MAX_DELAY);
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	2301      	movs	r3, #1
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	f107 030b 	add.w	r3, r7, #11
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	2240      	movs	r2, #64	@ 0x40
 800078a:	2110      	movs	r1, #16
 800078c:	485d      	ldr	r0, [pc, #372]	@ (8000904 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 800078e:	f004 fa3f 	bl	8004c10 <HAL_I2C_Mem_Read>
 8000792:	4603      	mov	r3, r0
 8000794:	613b      	str	r3, [r7, #16]
    if (result == HAL_OK) {
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d108      	bne.n	80007ae <BQ76952_ReadTemperatureThresholds+0x16e>
      System_SendErrorMessage(buffer_data);  // Show min temp data
 800079c:	7afb      	ldrb	r3, [r7, #11]
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fb34 	bl	8001e0c <System_SendErrorMessage>
      *min_temp_c = (int8_t)buffer_data;
 80007a4:	7afb      	ldrb	r3, [r7, #11]
 80007a6:	b25a      	sxtb	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	701a      	strb	r2, [r3, #0]
      break;  // Success, exit retry loop
 80007ac:	e016      	b.n	80007dc <BQ76952_ReadTemperatureThresholds+0x19c>
    } else if (retry_attempt == 0) {
 80007ae:	7dfb      	ldrb	r3, [r7, #23]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d105      	bne.n	80007c0 <BQ76952_ReadTemperatureThresholds+0x180>
      BQ76952_ResetCommState();
 80007b4:	f7ff feee 	bl	8000594 <BQ76952_ResetCommState>
      HAL_Delay(200);
 80007b8:	20c8      	movs	r0, #200	@ 0xc8
 80007ba:	f001 fbe5 	bl	8001f88 <HAL_Delay>
 80007be:	e006      	b.n	80007ce <BQ76952_ReadTemperatureThresholds+0x18e>
      // Continue to retry
    } else {
      System_SendErrorMessage(0xFC);  // Final buffer read failure
 80007c0:	20fc      	movs	r0, #252	@ 0xfc
 80007c2:	f001 fb23 	bl	8001e0c <System_SendErrorMessage>
      BQ76952_ResetCommState();
 80007c6:	f7ff fee5 	bl	8000594 <BQ76952_ResetCommState>
      return HAL_OK;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e095      	b.n	80008fa <BQ76952_ReadTemperatureThresholds+0x2ba>
  for (retry_attempt = 0; retry_attempt < 2; retry_attempt++) {
 80007ce:	7dfb      	ldrb	r3, [r7, #23]
 80007d0:	3301      	adds	r3, #1
 80007d2:	75fb      	strb	r3, [r7, #23]
 80007d4:	7dfb      	ldrb	r3, [r7, #23]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	f67f af7b 	bls.w	80006d2 <BQ76952_ReadTemperatureThresholds+0x92>
    }
  }
  
  // Clear state and wait before next operation
  BQ76952_ResetCommState();
 80007dc:	f7ff feda 	bl	8000594 <BQ76952_ResetCommState>
  HAL_Delay(800);  // Even longer delay between operations
 80007e0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80007e4:	f001 fbd0 	bl	8001f88 <HAL_Delay>
  
  // === Read OTC Threshold (Max Temp) with same retry logic ===
  for (retry_attempt = 0; retry_attempt < 2; retry_attempt++) {
 80007e8:	2300      	movs	r3, #0
 80007ea:	75fb      	strb	r3, [r7, #23]
 80007ec:	e07e      	b.n	80008ec <BQ76952_ReadTemperatureThresholds+0x2ac>
    subcommand[0] = (uint8_t)(BQ76952_OTC_THRESHOLD & 0xFF);        
 80007ee:	239a      	movs	r3, #154	@ 0x9a
 80007f0:	723b      	strb	r3, [r7, #8]
    subcommand[1] = (uint8_t)((BQ76952_OTC_THRESHOLD >> 8) & 0xFF); 
 80007f2:	2392      	movs	r3, #146	@ 0x92
 80007f4:	727b      	strb	r3, [r7, #9]
    
    result = HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_LOW, 1, &subcommand[0], 1, HAL_MAX_DELAY);
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	9302      	str	r3, [sp, #8]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2301      	movs	r3, #1
 8000808:	223e      	movs	r2, #62	@ 0x3e
 800080a:	2110      	movs	r1, #16
 800080c:	483d      	ldr	r0, [pc, #244]	@ (8000904 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 800080e:	f004 f8eb 	bl	80049e8 <HAL_I2C_Mem_Write>
 8000812:	4603      	mov	r3, r0
 8000814:	613b      	str	r3, [r7, #16]
    if (result != HAL_OK) {
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00f      	beq.n	800083c <BQ76952_ReadTemperatureThresholds+0x1fc>
      if (retry_attempt == 0) {
 800081c:	7dfb      	ldrb	r3, [r7, #23]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d105      	bne.n	800082e <BQ76952_ReadTemperatureThresholds+0x1ee>
        BQ76952_ResetCommState();
 8000822:	f7ff feb7 	bl	8000594 <BQ76952_ResetCommState>
        HAL_Delay(200);
 8000826:	20c8      	movs	r0, #200	@ 0xc8
 8000828:	f001 fbae 	bl	8001f88 <HAL_Delay>
        continue;
 800082c:	e05b      	b.n	80008e6 <BQ76952_ReadTemperatureThresholds+0x2a6>
      } else {
        System_SendErrorMessage(0xFA);
 800082e:	20fa      	movs	r0, #250	@ 0xfa
 8000830:	f001 faec 	bl	8001e0c <System_SendErrorMessage>
        BQ76952_ResetCommState();
 8000834:	f7ff feae 	bl	8000594 <BQ76952_ResetCommState>
        return HAL_OK;
 8000838:	2300      	movs	r3, #0
 800083a:	e05e      	b.n	80008fa <BQ76952_ReadTemperatureThresholds+0x2ba>
      }
    }
    
    HAL_Delay(30);
 800083c:	201e      	movs	r0, #30
 800083e:	f001 fba3 	bl	8001f88 <HAL_Delay>
    
    result = HAL_I2C_Mem_Write(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_SUBCOMMAND_HIGH, 1, &subcommand[1], 1, HAL_MAX_DELAY);
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	2301      	movs	r3, #1
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	3301      	adds	r3, #1
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	223f      	movs	r2, #63	@ 0x3f
 8000858:	2110      	movs	r1, #16
 800085a:	482a      	ldr	r0, [pc, #168]	@ (8000904 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 800085c:	f004 f8c4 	bl	80049e8 <HAL_I2C_Mem_Write>
 8000860:	4603      	mov	r3, r0
 8000862:	613b      	str	r3, [r7, #16]
    if (result != HAL_OK) {
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00f      	beq.n	800088a <BQ76952_ReadTemperatureThresholds+0x24a>
      if (retry_attempt == 0) {
 800086a:	7dfb      	ldrb	r3, [r7, #23]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d105      	bne.n	800087c <BQ76952_ReadTemperatureThresholds+0x23c>
        BQ76952_ResetCommState();
 8000870:	f7ff fe90 	bl	8000594 <BQ76952_ResetCommState>
        HAL_Delay(200);
 8000874:	20c8      	movs	r0, #200	@ 0xc8
 8000876:	f001 fb87 	bl	8001f88 <HAL_Delay>
        continue;
 800087a:	e034      	b.n	80008e6 <BQ76952_ReadTemperatureThresholds+0x2a6>
      } else {
        System_SendErrorMessage(0xF9);
 800087c:	20f9      	movs	r0, #249	@ 0xf9
 800087e:	f001 fac5 	bl	8001e0c <System_SendErrorMessage>
        BQ76952_ResetCommState();
 8000882:	f7ff fe87 	bl	8000594 <BQ76952_ResetCommState>
        return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e037      	b.n	80008fa <BQ76952_ReadTemperatureThresholds+0x2ba>
      }
    }
    
    HAL_Delay(300);
 800088a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800088e:	f001 fb7b 	bl	8001f88 <HAL_Delay>
    
    result = HAL_I2C_Mem_Read(&hi2c1, (BQ76952_I2C_ADDRESS << 1), BQ76952_BLOCK_DATA_BASE, 1, &buffer_data, 1, HAL_MAX_DELAY);
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	9302      	str	r3, [sp, #8]
 8000898:	2301      	movs	r3, #1
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	f107 030b 	add.w	r3, r7, #11
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2301      	movs	r3, #1
 80008a4:	2240      	movs	r2, #64	@ 0x40
 80008a6:	2110      	movs	r1, #16
 80008a8:	4816      	ldr	r0, [pc, #88]	@ (8000904 <BQ76952_ReadTemperatureThresholds+0x2c4>)
 80008aa:	f004 f9b1 	bl	8004c10 <HAL_I2C_Mem_Read>
 80008ae:	4603      	mov	r3, r0
 80008b0:	613b      	str	r3, [r7, #16]
    if (result == HAL_OK) {
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d10a      	bne.n	80008ce <BQ76952_ReadTemperatureThresholds+0x28e>
      System_SendErrorMessage(buffer_data + 0x80);  // Show max temp data (with offset)
 80008b8:	7afb      	ldrb	r3, [r7, #11]
 80008ba:	3b80      	subs	r3, #128	@ 0x80
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 faa4 	bl	8001e0c <System_SendErrorMessage>
      *max_temp_c = (int8_t)buffer_data;
 80008c4:	7afb      	ldrb	r3, [r7, #11]
 80008c6:	b25a      	sxtb	r2, r3
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	701a      	strb	r2, [r3, #0]
      break;  // Success
 80008cc:	e012      	b.n	80008f4 <BQ76952_ReadTemperatureThresholds+0x2b4>
    } else if (retry_attempt == 0) {
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d105      	bne.n	80008e0 <BQ76952_ReadTemperatureThresholds+0x2a0>
      BQ76952_ResetCommState();
 80008d4:	f7ff fe5e 	bl	8000594 <BQ76952_ResetCommState>
      HAL_Delay(200);
 80008d8:	20c8      	movs	r0, #200	@ 0xc8
 80008da:	f001 fb55 	bl	8001f88 <HAL_Delay>
 80008de:	e002      	b.n	80008e6 <BQ76952_ReadTemperatureThresholds+0x2a6>
      // Continue to retry
    } else {
      System_SendErrorMessage(0xF8);  // Final failure
 80008e0:	20f8      	movs	r0, #248	@ 0xf8
 80008e2:	f001 fa93 	bl	8001e0c <System_SendErrorMessage>
  for (retry_attempt = 0; retry_attempt < 2; retry_attempt++) {
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
 80008e8:	3301      	adds	r3, #1
 80008ea:	75fb      	strb	r3, [r7, #23]
 80008ec:	7dfb      	ldrb	r3, [r7, #23]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	f67f af7d 	bls.w	80007ee <BQ76952_ReadTemperatureThresholds+0x1ae>
    }
  }
  
  // Final cleanup
  BQ76952_ResetCommState();
 80008f4:	f7ff fe4e 	bl	8000594 <BQ76952_ResetCommState>
  
  return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000fc 	.word	0x200000fc

08000908 <CAN_Config>:
/**
  * @brief  Configure CAN filter
  * @retval None
  */
void CAN_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;

  // Configure CAN Filter to accept all messages
  sFilterConfig.FilterBank = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000932:	230e      	movs	r3, #14
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	480f      	ldr	r0, [pc, #60]	@ (8000978 <CAN_Config+0x70>)
 800093c:	f002 fedd 	bl	80036fa <HAL_CAN_ConfigFilter>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <CAN_Config+0x42>
    Error_Handler();
 8000946:	f001 f8c3 	bl	8001ad0 <Error_Handler>
  }

  // Configure TX Header for ADC telemetry messages
  TxHeader.StdId = CAN_ID_TELEMETRY_ADC;
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <CAN_Config+0x74>)
 800094c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000950:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x00;
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <CAN_Config+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <CAN_Config+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 800095e:	4b07      	ldr	r3, [pc, #28]	@ (800097c <CAN_Config+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8000964:	4b05      	ldr	r3, [pc, #20]	@ (800097c <CAN_Config+0x74>)
 8000966:	2208      	movs	r2, #8
 8000968:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 800096a:	4b04      	ldr	r3, [pc, #16]	@ (800097c <CAN_Config+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	751a      	strb	r2, [r3, #20]
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000b0 	.word	0x200000b0
 800097c:	20000028 	.word	0x20000028

08000980 <CAN_TxData>:
  * @brief  Send ADC value over CAN
  * @param  adc_value: ADC reading to send
  * @retval None
  */
void CAN_TxData(uint16_t adc_value)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	80fb      	strh	r3, [r7, #6]
  // Clear TX data buffer
  for (int i = 0; i < 8; i++) {
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e007      	b.n	80009a0 <CAN_TxData+0x20>
    TxData[i] = 0;
 8000990:	4a11      	ldr	r2, [pc, #68]	@ (80009d8 <CAN_TxData+0x58>)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	4413      	add	r3, r2
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 8; i++) {
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b07      	cmp	r3, #7
 80009a4:	ddf4      	ble.n	8000990 <CAN_TxData+0x10>
  }
  
  // Pack ADC value into first two bytes (little endian)
  TxData[0] = (uint8_t)(adc_value & 0xFF);        // LSB
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <CAN_TxData+0x58>)
 80009ac:	701a      	strb	r2, [r3, #0]
  TxData[1] = (uint8_t)((adc_value >> 8) & 0xFF); // MSB
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <CAN_TxData+0x58>)
 80009b8:	705a      	strb	r2, [r3, #1]
  
  // Send CAN message
  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <CAN_TxData+0x5c>)
 80009bc:	4a06      	ldr	r2, [pc, #24]	@ (80009d8 <CAN_TxData+0x58>)
 80009be:	4908      	ldr	r1, [pc, #32]	@ (80009e0 <CAN_TxData+0x60>)
 80009c0:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <CAN_TxData+0x64>)
 80009c2:	f002 ffa8 	bl	8003916 <HAL_CAN_AddTxMessage>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <CAN_TxData+0x50>
    Error_Handler();
 80009cc:	f001 f880 	bl	8001ad0 <Error_Handler>
  }
}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000044 	.word	0x20000044
 80009dc:	20000040 	.word	0x20000040
 80009e0:	20000028 	.word	0x20000028
 80009e4:	200000b0 	.word	0x200000b0

080009e8 <CAN_TxStackVoltage>:
  * @brief  Send stack voltage over CAN telemetry
  * @param  stack_voltage_mv: Stack voltage in millivolts
  * @retval None
  */
void CAN_TxStackVoltage(uint16_t stack_voltage_mv)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	@ 0x30
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	80fb      	strh	r3, [r7, #6]
  CAN_TxHeaderTypeDef TxHeader_Stack;
  uint8_t TxData_Stack[8] = {0};
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
  uint32_t TxMailbox_Stack;
  
  // Configure TX Header for stack voltage telemetry message
  TxHeader_Stack.StdId = CAN_ID_TELEMETRY_STACK_VOLTAGE;
 80009fc:	f240 6301 	movw	r3, #1537	@ 0x601
 8000a00:	61bb      	str	r3, [r7, #24]
  TxHeader_Stack.ExtId = 0x00;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  TxHeader_Stack.RTR = CAN_RTR_DATA;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  TxHeader_Stack.IDE = CAN_ID_STD;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  TxHeader_Stack.DLC = 8;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxHeader_Stack.TransmitGlobalTime = DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  
  // Pack stack voltage into first two bytes (little endian)
  TxData_Stack[0] = (uint8_t)(stack_voltage_mv & 0xFF);        // LSB
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	743b      	strb	r3, [r7, #16]
  TxData_Stack[1] = (uint8_t)((stack_voltage_mv >> 8) & 0xFF); // MSB
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	747b      	strb	r3, [r7, #17]
  
  // Send CAN message
  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Stack, TxData_Stack, &TxMailbox_Stack) != HAL_OK) {
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	f107 0210 	add.w	r2, r7, #16
 8000a30:	f107 0118 	add.w	r1, r7, #24
 8000a34:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <CAN_TxStackVoltage+0x64>)
 8000a36:	f002 ff6e 	bl	8003916 <HAL_CAN_AddTxMessage>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <CAN_TxStackVoltage+0x5c>
    Error_Handler();
 8000a40:	f001 f846 	bl	8001ad0 <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3730      	adds	r7, #48	@ 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000b0 	.word	0x200000b0

08000a50 <CAN_TxAllCellVoltagesMux>:
/**
  * @brief  Send all cell voltages using multiplexed format (4 cells per message, 4 mux values)
  * @retval None
  */
void CAN_TxAllCellVoltagesMux(void)
{
 8000a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a54:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8000a58:	af00      	add	r7, sp, #0
  CAN_TxHeaderTypeDef TxHeader_Cell;
  uint8_t TxData_Cell[8] = {0};
 8000a5a:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 8000a5e:	2300      	movs	r3, #0
 8000a60:	6013      	str	r3, [r2, #0]
 8000a62:	6053      	str	r3, [r2, #4]
  uint32_t TxMailbox_Cell;
  uint16_t cell_voltages[16];
  
  // Read all cell voltages first
  for (uint8_t cell = 1; cell <= BQ76952_MAX_CELLS; cell++) {
 8000a64:	2301      	movs	r3, #1
 8000a66:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8000a6a:	e015      	b.n	8000a98 <CAN_TxAllCellVoltagesMux+0x48>
    cell_voltages[cell - 1] = BQ76952_ReadCellVoltage(cell);
 8000a6c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fbfa 	bl	8000270 <BQ76952_ReadCellVoltage>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	0073      	lsls	r3, r6, #1
 8000a82:	3358      	adds	r3, #88	@ 0x58
 8000a84:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 8000a88:	440b      	add	r3, r1
 8000a8a:	f823 2c54 	strh.w	r2, [r3, #-84]
  for (uint8_t cell = 1; cell <= BQ76952_MAX_CELLS; cell++) {
 8000a8e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8000a92:	3301      	adds	r3, #1
 8000a94:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8000a98:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8000a9c:	2b10      	cmp	r3, #16
 8000a9e:	d9e5      	bls.n	8000a6c <CAN_TxAllCellVoltagesMux+0x1c>
  }
  
  // Configure TX Header (same ID for all mux messages)
  TxHeader_Cell.StdId = CAN_ID_CELL_VOLTAGES;
 8000aa0:	f240 6302 	movw	r3, #1538	@ 0x602
 8000aa4:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  TxHeader_Cell.ExtId = 0x00;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  TxHeader_Cell.RTR = CAN_RTR_DATA;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  TxHeader_Cell.IDE = CAN_ID_STD;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  TxHeader_Cell.DLC = 8;
 8000aba:	2308      	movs	r3, #8
 8000abc:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  TxHeader_Cell.TransmitGlobalTime = DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3204 	strb.w	r3, [r7, #516]	@ 0x204
  
  // Send Cells 1-4 (mux index 0)
  // Format: [mux_index(2bits) | cell1_voltage(14bits) | cell2_voltage(14bits) | cell3_voltage(14bits) | cell4_voltage(14bits)]
  // Pack 4 x 14-bit values into 58 bits (7.25 bytes - fits in 8 bytes)
  uint64_t packed_data = 0;
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	f04f 0300 	mov.w	r3, #0
 8000ace:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
  packed_data |= (uint64_t)0x00;  // Mux index 0 (2 bits)
  packed_data |= ((uint64_t)(cell_voltages[0] & 0x3FFF)) << 2;   // Cell 1 (14 bits)
 8000ad2:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	@ 0x1c4
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000ade:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8000ae2:	f04f 0200 	mov.w	r2, #0
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	f8d7 118c 	ldr.w	r1, [r7, #396]	@ 0x18c
 8000aee:	008b      	lsls	r3, r1, #2
 8000af0:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8000af4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000af8:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8000afc:	008a      	lsls	r2, r1, #2
 8000afe:	fa1f fa82 	uxth.w	sl, r2
 8000b02:	f04f 0b00 	mov.w	fp, #0
 8000b06:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000b0a:	ea42 010a 	orr.w	r1, r2, sl
 8000b0e:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8000b12:	ea43 030b 	orr.w	r3, r3, fp
 8000b16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000b1a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8000b1e:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[1] & 0x3FFF)) << 16;  // Cell 2 (14 bits)
 8000b22:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	@ 0x1c6
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000b2e:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8000b32:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8000b36:	460b      	mov	r3, r1
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000b3e:	460b      	mov	r3, r1
 8000b40:	041b      	lsls	r3, r3, #16
 8000b42:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8000b46:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8000b4a:	f023 4440 	bic.w	r4, r3, #3221225472	@ 0xc0000000
 8000b4e:	0c24      	lsrs	r4, r4, #16
 8000b50:	0424      	lsls	r4, r4, #16
 8000b52:	2500      	movs	r5, #0
 8000b54:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000b58:	ea42 0104 	orr.w	r1, r2, r4
 8000b5c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8000b60:	432b      	orrs	r3, r5
 8000b62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000b66:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8000b6a:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[2] & 0x3FFF)) << 30;  // Cell 3 (14 bits)
 8000b6e:	f8b7 31c8 	ldrh.w	r3, [r7, #456]	@ 0x1c8
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	2200      	movs	r2, #0
 8000b76:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8000b7a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8000b7e:	e9d7 125c 	ldrd	r1, r2, [r7, #368]	@ 0x170
 8000b82:	460b      	mov	r3, r1
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	079b      	lsls	r3, r3, #30
 8000b8e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8000b92:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8000b96:	460b      	mov	r3, r1
 8000b98:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8000b9c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8000baa:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000bae:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8000bb2:	4621      	mov	r1, r4
 8000bb4:	4311      	orrs	r1, r2
 8000bb6:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8000bba:	4629      	mov	r1, r5
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 8000bc2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8000bc6:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[3] & 0x3FFF)) << 44;  // Cell 4 (14 bits)
 8000bca:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	@ 0x1ca
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000bd6:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8000bda:	f04f 0200 	mov.w	r2, #0
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8000be6:	030b      	lsls	r3, r1, #12
 8000be8:	2200      	movs	r2, #0
 8000bea:	f04f 0800 	mov.w	r8, #0
 8000bee:	f023 497c 	bic.w	r9, r3, #4227858432	@ 0xfc000000
 8000bf2:	f429 697f 	bic.w	r9, r9, #4080	@ 0xff0
 8000bf6:	f029 090f 	bic.w	r9, r9, #15
 8000bfa:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000bfe:	ea42 0108 	orr.w	r1, r2, r8
 8000c02:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000c04:	ea43 0309 	orr.w	r3, r3, r9
 8000c08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000c0a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8000c0e:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  
  TxData_Cell[0] = (uint8_t)(packed_data & 0xFF);
 8000c12:	f897 3208 	ldrb.w	r3, [r7, #520]	@ 0x208
 8000c16:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
  TxData_Cell[1] = (uint8_t)((packed_data >> 8) & 0xFF);
 8000c1a:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	f04f 0100 	mov.w	r1, #0
 8000c26:	0a10      	lsrs	r0, r2, #8
 8000c28:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c2c:	0a19      	lsrs	r1, r3, #8
 8000c2e:	b2c3      	uxtb	r3, r0
 8000c30:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
  TxData_Cell[2] = (uint8_t)((packed_data >> 16) & 0xFF);
 8000c34:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	f04f 0100 	mov.w	r1, #0
 8000c40:	0c10      	lsrs	r0, r2, #16
 8000c42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c46:	0c19      	lsrs	r1, r3, #16
 8000c48:	b2c3      	uxtb	r3, r0
 8000c4a:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
  TxData_Cell[3] = (uint8_t)((packed_data >> 24) & 0xFF);
 8000c4e:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	f04f 0100 	mov.w	r1, #0
 8000c5a:	0e10      	lsrs	r0, r2, #24
 8000c5c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8000c60:	0e19      	lsrs	r1, r3, #24
 8000c62:	b2c3      	uxtb	r3, r0
 8000c64:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
  TxData_Cell[4] = (uint8_t)((packed_data >> 32) & 0xFF);
 8000c68:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	f04f 0100 	mov.w	r1, #0
 8000c74:	0018      	movs	r0, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	b2c3      	uxtb	r3, r0
 8000c7a:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
  TxData_Cell[5] = (uint8_t)((packed_data >> 40) & 0xFF);
 8000c7e:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000c82:	f04f 0000 	mov.w	r0, #0
 8000c86:	f04f 0100 	mov.w	r1, #0
 8000c8a:	0a18      	lsrs	r0, r3, #8
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	b2c3      	uxtb	r3, r0
 8000c90:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  TxData_Cell[6] = (uint8_t)((packed_data >> 48) & 0xFF);
 8000c94:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000c98:	f04f 0000 	mov.w	r0, #0
 8000c9c:	f04f 0100 	mov.w	r1, #0
 8000ca0:	0c18      	lsrs	r0, r3, #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b2c3      	uxtb	r3, r0
 8000ca6:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
  TxData_Cell[7] = (uint8_t)((packed_data >> 56) & 0xFF);
 8000caa:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	f04f 0100 	mov.w	r1, #0
 8000cb6:	0e18      	lsrs	r0, r3, #24
 8000cb8:	2100      	movs	r1, #0
 8000cba:	b2c3      	uxtb	r3, r0
 8000cbc:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Cell, TxData_Cell, &TxMailbox_Cell);
 8000cc0:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8000cc4:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 8000cc8:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8000ccc:	48eb      	ldr	r0, [pc, #940]	@ (800107c <CAN_TxAllCellVoltagesMux+0x62c>)
 8000cce:	f002 fe22 	bl	8003916 <HAL_CAN_AddTxMessage>
  HAL_Delay(2);
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f001 f958 	bl	8001f88 <HAL_Delay>
  
  // Send Cells 5-8 (mux index 1)
  packed_data = 0;
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
  packed_data |= (uint64_t)0x01;  // Mux index 1 (2 bits)
 8000ce4:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000ce8:	f042 0101 	orr.w	r1, r2, #1
 8000cec:	6739      	str	r1, [r7, #112]	@ 0x70
 8000cee:	677b      	str	r3, [r7, #116]	@ 0x74
 8000cf0:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8000cf4:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[4] & 0x3FFF)) << 2;   // Cell 5 (14 bits)
 8000cf8:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	@ 0x1cc
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000d04:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8000d14:	4629      	mov	r1, r5
 8000d16:	008b      	lsls	r3, r1, #2
 8000d18:	4621      	mov	r1, r4
 8000d1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d1e:	4621      	mov	r1, r4
 8000d20:	008a      	lsls	r2, r1, #2
 8000d22:	b293      	uxth	r3, r2
 8000d24:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000d2e:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000d32:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8000d36:	4621      	mov	r1, r4
 8000d38:	4311      	orrs	r1, r2
 8000d3a:	66b9      	str	r1, [r7, #104]	@ 0x68
 8000d3c:	4629      	mov	r1, r5
 8000d3e:	4319      	orrs	r1, r3
 8000d40:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8000d42:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8000d46:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[5] & 0x3FFF)) << 16;  // Cell 6 (14 bits)
 8000d4a:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	@ 0x1ce
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	2200      	movs	r2, #0
 8000d52:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8000d56:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8000d5a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8000d5e:	460b      	mov	r3, r1
 8000d60:	0c1b      	lsrs	r3, r3, #16
 8000d62:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000d66:	460b      	mov	r3, r1
 8000d68:	041b      	lsls	r3, r3, #16
 8000d6a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8000d6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000d72:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000d76:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8000d7a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8000d84:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8000d88:	041b      	lsls	r3, r3, #16
 8000d8a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000d94:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000d98:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 8000d9c:	4621      	mov	r1, r4
 8000d9e:	4311      	orrs	r1, r2
 8000da0:	6639      	str	r1, [r7, #96]	@ 0x60
 8000da2:	4629      	mov	r1, r5
 8000da4:	4319      	orrs	r1, r3
 8000da6:	6679      	str	r1, [r7, #100]	@ 0x64
 8000da8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 8000dac:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[6] & 0x3FFF)) << 30;  // Cell 7 (14 bits)
 8000db0:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	@ 0x1d0
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	2200      	movs	r2, #0
 8000db8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8000dbc:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8000dc0:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000dcc:	460b      	mov	r3, r1
 8000dce:	079b      	lsls	r3, r3, #30
 8000dd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000dd4:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8000dd8:	460b      	mov	r3, r1
 8000dda:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8000dde:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000de2:	4613      	mov	r3, r2
 8000de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000dec:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000df0:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8000df4:	4621      	mov	r1, r4
 8000df6:	4311      	orrs	r1, r2
 8000df8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4319      	orrs	r1, r3
 8000dfe:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8000e00:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8000e04:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[7] & 0x3FFF)) << 44;  // Cell 8 (14 bits)
 8000e08:	f8b7 31d2 	ldrh.w	r3, [r7, #466]	@ 0x1d2
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000e14:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8000e24:	030b      	lsls	r3, r1, #12
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 8000e2e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8000e32:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8000e36:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000e3a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8000e3e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8000e42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000e46:	f023 030f 	bic.w	r3, r3, #15
 8000e4a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8000e4e:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000e52:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	@ 0x1b0
 8000e56:	4621      	mov	r1, r4
 8000e58:	4311      	orrs	r1, r2
 8000e5a:	6539      	str	r1, [r7, #80]	@ 0x50
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	4319      	orrs	r1, r3
 8000e60:	6579      	str	r1, [r7, #84]	@ 0x54
 8000e62:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8000e66:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  
  TxData_Cell[0] = (uint8_t)(packed_data & 0xFF);
 8000e6a:	f897 3208 	ldrb.w	r3, [r7, #520]	@ 0x208
 8000e6e:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
  TxData_Cell[1] = (uint8_t)((packed_data >> 8) & 0xFF);
 8000e72:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000e76:	f04f 0000 	mov.w	r0, #0
 8000e7a:	f04f 0100 	mov.w	r1, #0
 8000e7e:	0a10      	lsrs	r0, r2, #8
 8000e80:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000e84:	0a19      	lsrs	r1, r3, #8
 8000e86:	b2c3      	uxtb	r3, r0
 8000e88:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
  TxData_Cell[2] = (uint8_t)((packed_data >> 16) & 0xFF);
 8000e8c:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000e90:	f04f 0000 	mov.w	r0, #0
 8000e94:	f04f 0100 	mov.w	r1, #0
 8000e98:	0c10      	lsrs	r0, r2, #16
 8000e9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e9e:	0c19      	lsrs	r1, r3, #16
 8000ea0:	b2c3      	uxtb	r3, r0
 8000ea2:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
  TxData_Cell[3] = (uint8_t)((packed_data >> 24) & 0xFF);
 8000ea6:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000eaa:	f04f 0000 	mov.w	r0, #0
 8000eae:	f04f 0100 	mov.w	r1, #0
 8000eb2:	0e10      	lsrs	r0, r2, #24
 8000eb4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8000eb8:	0e19      	lsrs	r1, r3, #24
 8000eba:	b2c3      	uxtb	r3, r0
 8000ebc:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
  TxData_Cell[4] = (uint8_t)((packed_data >> 32) & 0xFF);
 8000ec0:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000ec4:	f04f 0000 	mov.w	r0, #0
 8000ec8:	f04f 0100 	mov.w	r1, #0
 8000ecc:	0018      	movs	r0, r3
 8000ece:	2100      	movs	r1, #0
 8000ed0:	b2c3      	uxtb	r3, r0
 8000ed2:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
  TxData_Cell[5] = (uint8_t)((packed_data >> 40) & 0xFF);
 8000ed6:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000eda:	f04f 0000 	mov.w	r0, #0
 8000ede:	f04f 0100 	mov.w	r1, #0
 8000ee2:	0a18      	lsrs	r0, r3, #8
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	b2c3      	uxtb	r3, r0
 8000ee8:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  TxData_Cell[6] = (uint8_t)((packed_data >> 48) & 0xFF);
 8000eec:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000ef0:	f04f 0000 	mov.w	r0, #0
 8000ef4:	f04f 0100 	mov.w	r1, #0
 8000ef8:	0c18      	lsrs	r0, r3, #16
 8000efa:	2100      	movs	r1, #0
 8000efc:	b2c3      	uxtb	r3, r0
 8000efe:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
  TxData_Cell[7] = (uint8_t)((packed_data >> 56) & 0xFF);
 8000f02:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000f06:	f04f 0000 	mov.w	r0, #0
 8000f0a:	f04f 0100 	mov.w	r1, #0
 8000f0e:	0e18      	lsrs	r0, r3, #24
 8000f10:	2100      	movs	r1, #0
 8000f12:	b2c3      	uxtb	r3, r0
 8000f14:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Cell, TxData_Cell, &TxMailbox_Cell);
 8000f18:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8000f1c:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 8000f20:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8000f24:	4855      	ldr	r0, [pc, #340]	@ (800107c <CAN_TxAllCellVoltagesMux+0x62c>)
 8000f26:	f002 fcf6 	bl	8003916 <HAL_CAN_AddTxMessage>
  HAL_Delay(2);
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	f001 f82c 	bl	8001f88 <HAL_Delay>
  
  // Send Cells 9-12 (mux index 2)
  packed_data = 0;
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
  packed_data |= (uint64_t)0x02;  // Mux index 2 (2 bits)
 8000f3c:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000f40:	f042 0102 	orr.w	r1, r2, #2
 8000f44:	64b9      	str	r1, [r7, #72]	@ 0x48
 8000f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f48:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8000f4c:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[8] & 0x3FFF)) << 2;   // Cell 9 (14 bits)
 8000f50:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	@ 0x1d4
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	2200      	movs	r2, #0
 8000f58:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000f5c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	008b      	lsls	r3, r1, #2
 8000f70:	4621      	mov	r1, r4
 8000f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000f76:	4621      	mov	r1, r4
 8000f78:	008a      	lsls	r2, r1, #2
 8000f7a:	b293      	uxth	r3, r2
 8000f7c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000f86:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000f8a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8000f8e:	4621      	mov	r1, r4
 8000f90:	4311      	orrs	r1, r2
 8000f92:	6439      	str	r1, [r7, #64]	@ 0x40
 8000f94:	4629      	mov	r1, r5
 8000f96:	4319      	orrs	r1, r3
 8000f98:	6479      	str	r1, [r7, #68]	@ 0x44
 8000f9a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000f9e:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[9] & 0x3FFF)) << 16;  // Cell 10 (14 bits)
 8000fa2:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000fae:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8000fb2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	0c1b      	lsrs	r3, r3, #16
 8000fba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000fca:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000fce:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000fd2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000fd6:	0c1b      	lsrs	r3, r3, #16
 8000fd8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000fdc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000fe0:	041b      	lsls	r3, r3, #16
 8000fe2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8000fec:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8000ff0:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	4311      	orrs	r1, r2
 8000ff8:	63b9      	str	r1, [r7, #56]	@ 0x38
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	4319      	orrs	r1, r3
 8000ffe:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8001000:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001004:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[10] & 0x3FFF)) << 30; // Cell 11 (14 bits)
 8001008:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	@ 0x1d8
 800100c:	b29b      	uxth	r3, r3
 800100e:	2200      	movs	r2, #0
 8001010:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001014:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001018:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800101c:	460b      	mov	r3, r1
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001024:	460b      	mov	r3, r1
 8001026:	079b      	lsls	r3, r3, #30
 8001028:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800102c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8001030:	460b      	mov	r3, r1
 8001032:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001036:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800103a:	4613      	mov	r3, r2
 800103c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001040:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001044:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001048:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800104c:	4621      	mov	r1, r4
 800104e:	4311      	orrs	r1, r2
 8001050:	6339      	str	r1, [r7, #48]	@ 0x30
 8001052:	4629      	mov	r1, r5
 8001054:	4319      	orrs	r1, r3
 8001056:	6379      	str	r1, [r7, #52]	@ 0x34
 8001058:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800105c:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[11] & 0x3FFF)) << 44; // Cell 12 (14 bits)
 8001060:	f8b7 31da 	ldrh.w	r3, [r7, #474]	@ 0x1da
 8001064:	b29b      	uxth	r3, r3
 8001066:	2200      	movs	r2, #0
 8001068:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800106c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	e002      	b.n	8001080 <CAN_TxAllCellVoltagesMux+0x630>
 800107a:	bf00      	nop
 800107c:	200000b0 	.word	0x200000b0
 8001080:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8001084:	030b      	lsls	r3, r1, #12
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 800108e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8001092:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001096:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800109a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800109e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80010a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80010a6:	f023 030f 	bic.w	r3, r3, #15
 80010aa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80010ae:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80010b2:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 80010b6:	4621      	mov	r1, r4
 80010b8:	4311      	orrs	r1, r2
 80010ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80010bc:	4629      	mov	r1, r5
 80010be:	4319      	orrs	r1, r3
 80010c0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80010c2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80010c6:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  
  TxData_Cell[0] = (uint8_t)(packed_data & 0xFF);
 80010ca:	f897 3208 	ldrb.w	r3, [r7, #520]	@ 0x208
 80010ce:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
  TxData_Cell[1] = (uint8_t)((packed_data >> 8) & 0xFF);
 80010d2:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	f04f 0100 	mov.w	r1, #0
 80010de:	0a10      	lsrs	r0, r2, #8
 80010e0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80010e4:	0a19      	lsrs	r1, r3, #8
 80010e6:	b2c3      	uxtb	r3, r0
 80010e8:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
  TxData_Cell[2] = (uint8_t)((packed_data >> 16) & 0xFF);
 80010ec:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	f04f 0100 	mov.w	r1, #0
 80010f8:	0c10      	lsrs	r0, r2, #16
 80010fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010fe:	0c19      	lsrs	r1, r3, #16
 8001100:	b2c3      	uxtb	r3, r0
 8001102:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
  TxData_Cell[3] = (uint8_t)((packed_data >> 24) & 0xFF);
 8001106:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 800110a:	f04f 0000 	mov.w	r0, #0
 800110e:	f04f 0100 	mov.w	r1, #0
 8001112:	0e10      	lsrs	r0, r2, #24
 8001114:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001118:	0e19      	lsrs	r1, r3, #24
 800111a:	b2c3      	uxtb	r3, r0
 800111c:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
  TxData_Cell[4] = (uint8_t)((packed_data >> 32) & 0xFF);
 8001120:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001124:	f04f 0000 	mov.w	r0, #0
 8001128:	f04f 0100 	mov.w	r1, #0
 800112c:	0018      	movs	r0, r3
 800112e:	2100      	movs	r1, #0
 8001130:	b2c3      	uxtb	r3, r0
 8001132:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
  TxData_Cell[5] = (uint8_t)((packed_data >> 40) & 0xFF);
 8001136:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	f04f 0100 	mov.w	r1, #0
 8001142:	0a18      	lsrs	r0, r3, #8
 8001144:	2100      	movs	r1, #0
 8001146:	b2c3      	uxtb	r3, r0
 8001148:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  TxData_Cell[6] = (uint8_t)((packed_data >> 48) & 0xFF);
 800114c:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	f04f 0100 	mov.w	r1, #0
 8001158:	0c18      	lsrs	r0, r3, #16
 800115a:	2100      	movs	r1, #0
 800115c:	b2c3      	uxtb	r3, r0
 800115e:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
  TxData_Cell[7] = (uint8_t)((packed_data >> 56) & 0xFF);
 8001162:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	f04f 0100 	mov.w	r1, #0
 800116e:	0e18      	lsrs	r0, r3, #24
 8001170:	2100      	movs	r1, #0
 8001172:	b2c3      	uxtb	r3, r0
 8001174:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Cell, TxData_Cell, &TxMailbox_Cell);
 8001178:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 800117c:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 8001180:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8001184:	489a      	ldr	r0, [pc, #616]	@ (80013f0 <CAN_TxAllCellVoltagesMux+0x9a0>)
 8001186:	f002 fbc6 	bl	8003916 <HAL_CAN_AddTxMessage>
  HAL_Delay(2);
 800118a:	2002      	movs	r0, #2
 800118c:	f000 fefc 	bl	8001f88 <HAL_Delay>
  
  // Send Cells 13-16 (mux index 3)
  packed_data = 0;
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
  packed_data |= (uint64_t)0x03;  // Mux index 3 (2 bits)
 800119c:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80011a0:	f042 0103 	orr.w	r1, r2, #3
 80011a4:	6239      	str	r1, [r7, #32]
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80011a8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80011ac:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[12] & 0x3FFF)) << 2;  // Cell 13 (14 bits)
 80011b0:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	@ 0x1dc
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80011bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80011cc:	4629      	mov	r1, r5
 80011ce:	008b      	lsls	r3, r1, #2
 80011d0:	4621      	mov	r1, r4
 80011d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011d6:	4621      	mov	r1, r4
 80011d8:	008a      	lsls	r2, r1, #2
 80011da:	b293      	uxth	r3, r2
 80011dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80011e6:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80011ea:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80011ee:	4621      	mov	r1, r4
 80011f0:	4311      	orrs	r1, r2
 80011f2:	61b9      	str	r1, [r7, #24]
 80011f4:	4629      	mov	r1, r5
 80011f6:	4319      	orrs	r1, r3
 80011f8:	61f9      	str	r1, [r7, #28]
 80011fa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80011fe:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[13] & 0x3FFF)) << 16; // Cell 14 (14 bits)
 8001202:	f8b7 31de 	ldrh.w	r3, [r7, #478]	@ 0x1de
 8001206:	b29b      	uxth	r3, r3
 8001208:	2200      	movs	r2, #0
 800120a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800120e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001212:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001216:	460b      	mov	r3, r1
 8001218:	0c1b      	lsrs	r3, r3, #16
 800121a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800121e:	460b      	mov	r3, r1
 8001220:	041b      	lsls	r3, r3, #16
 8001222:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001226:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800122a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800122e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001232:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8001236:	0c1b      	lsrs	r3, r3, #16
 8001238:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800123c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8001240:	041b      	lsls	r3, r3, #16
 8001242:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800124c:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001250:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	@ 0x198
 8001254:	4621      	mov	r1, r4
 8001256:	4311      	orrs	r1, r2
 8001258:	6139      	str	r1, [r7, #16]
 800125a:	4629      	mov	r1, r5
 800125c:	4319      	orrs	r1, r3
 800125e:	6179      	str	r1, [r7, #20]
 8001260:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001264:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[14] & 0x3FFF)) << 30; // Cell 15 (14 bits)
 8001268:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	@ 0x1e0
 800126c:	b29b      	uxth	r3, r3
 800126e:	2200      	movs	r2, #0
 8001270:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001274:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001278:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800127c:	460b      	mov	r3, r1
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001284:	460b      	mov	r3, r1
 8001286:	079b      	lsls	r3, r3, #30
 8001288:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800128c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001290:	460b      	mov	r3, r1
 8001292:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001296:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800129a:	4613      	mov	r3, r2
 800129c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80012a4:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80012a8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80012ac:	4621      	mov	r1, r4
 80012ae:	4311      	orrs	r1, r2
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	4629      	mov	r1, r5
 80012b4:	4319      	orrs	r1, r3
 80012b6:	60f9      	str	r1, [r7, #12]
 80012b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012bc:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  packed_data |= ((uint64_t)(cell_voltages[15] & 0x3FFF)) << 44; // Cell 16 (14 bits)
 80012c0:	f8b7 31e2 	ldrh.w	r3, [r7, #482]	@ 0x1e2
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	2200      	movs	r2, #0
 80012c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80012cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80012dc:	030b      	lsls	r3, r1, #12
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 80012e6:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80012ea:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80012ee:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012f2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80012f6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80012fa:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012fe:	f023 030f 	bic.w	r3, r3, #15
 8001302:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001306:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 800130a:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 800130e:	4621      	mov	r1, r4
 8001310:	4311      	orrs	r1, r2
 8001312:	6039      	str	r1, [r7, #0]
 8001314:	4629      	mov	r1, r5
 8001316:	4319      	orrs	r1, r3
 8001318:	6079      	str	r1, [r7, #4]
 800131a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800131e:	e9c7 3482 	strd	r3, r4, [r7, #520]	@ 0x208
  
  TxData_Cell[0] = (uint8_t)(packed_data & 0xFF);
 8001322:	f897 3208 	ldrb.w	r3, [r7, #520]	@ 0x208
 8001326:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
  TxData_Cell[1] = (uint8_t)((packed_data >> 8) & 0xFF);
 800132a:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	0a02      	lsrs	r2, r0, #8
 8001338:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800133c:	0a0b      	lsrs	r3, r1, #8
 800133e:	b2d3      	uxtb	r3, r2
 8001340:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
  TxData_Cell[2] = (uint8_t)((packed_data >> 16) & 0xFF);
 8001344:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	0c02      	lsrs	r2, r0, #16
 8001352:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001356:	0c0b      	lsrs	r3, r1, #16
 8001358:	b2d3      	uxtb	r3, r2
 800135a:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
  TxData_Cell[3] = (uint8_t)((packed_data >> 24) & 0xFF);
 800135e:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	0e02      	lsrs	r2, r0, #24
 800136c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001370:	0e0b      	lsrs	r3, r1, #24
 8001372:	b2d3      	uxtb	r3, r2
 8001374:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
  TxData_Cell[4] = (uint8_t)((packed_data >> 32) & 0xFF);
 8001378:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	000a      	movs	r2, r1
 8001386:	2300      	movs	r3, #0
 8001388:	b2d3      	uxtb	r3, r2
 800138a:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
  TxData_Cell[5] = (uint8_t)((packed_data >> 40) & 0xFF);
 800138e:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	0a0a      	lsrs	r2, r1, #8
 800139c:	2300      	movs	r3, #0
 800139e:	b2d3      	uxtb	r3, r2
 80013a0:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  TxData_Cell[6] = (uint8_t)((packed_data >> 48) & 0xFF);
 80013a4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	0c0a      	lsrs	r2, r1, #16
 80013b2:	2300      	movs	r3, #0
 80013b4:	b2d3      	uxtb	r3, r2
 80013b6:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
  TxData_Cell[7] = (uint8_t)((packed_data >> 56) & 0xFF);
 80013ba:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	0e0a      	lsrs	r2, r1, #24
 80013c8:	2300      	movs	r3, #0
 80013ca:	b2d3      	uxtb	r3, r2
 80013cc:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Cell, TxData_Cell, &TxMailbox_Cell);
 80013d0:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 80013d4:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 80013d8:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 80013dc:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <CAN_TxAllCellVoltagesMux+0x9a0>)
 80013de:	f002 fa9a 	bl	8003916 <HAL_CAN_AddTxMessage>
}
 80013e2:	bf00      	nop
 80013e4:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 80013e8:	46bd      	mov	sp, r7
 80013ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ee:	bf00      	nop
 80013f0:	200000b0 	.word	0x200000b0

080013f4 <CAN_SendErrorMessage>:
  * @brief  Send CAN error message
  * @param  error_code: Error code to send
  * @retval None
  */
void CAN_SendErrorMessage(uint8_t error_code) 
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	@ 0x30
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  CAN_TxHeaderTypeDef TxHeader_Error;
  uint8_t TxData_Error[8] = {0};
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
  uint32_t TxMailbox_Error;
  
  // Configure error message header
  TxHeader_Error.StdId = 0x7FE;  // Error message CAN ID
 8001408:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800140c:	61bb      	str	r3, [r7, #24]
  TxHeader_Error.ExtId = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  TxHeader_Error.RTR = CAN_RTR_DATA;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  TxHeader_Error.IDE = CAN_ID_STD;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  TxHeader_Error.DLC = 1;  // Only send error code
 800141a:	2301      	movs	r3, #1
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  TxData_Error[0] = error_code;
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	743b      	strb	r3, [r7, #16]
  
  // Send error message
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Error, TxData_Error, &TxMailbox_Error);
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	f107 0210 	add.w	r2, r7, #16
 800142a:	f107 0118 	add.w	r1, r7, #24
 800142e:	4803      	ldr	r0, [pc, #12]	@ (800143c <CAN_SendErrorMessage+0x48>)
 8001430:	f002 fa71 	bl	8003916 <HAL_CAN_AddTxMessage>
}
 8001434:	bf00      	nop
 8001436:	3730      	adds	r7, #48	@ 0x30
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200000b0 	.word	0x200000b0

08001440 <CAN_SendHeartbeat>:
  * @brief  Send heartbeat message
  * @param  counter: Heartbeat counter value
  * @retval None
  */
void CAN_SendHeartbeat(uint32_t counter)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	@ 0x30
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  CAN_TxHeaderTypeDef TxHeader_Heartbeat;
  uint8_t TxData_Heartbeat[8] = {0xAA, 0xBB, 0xCC, 0xDD, 
 8001448:	23aa      	movs	r3, #170	@ 0xaa
 800144a:	743b      	strb	r3, [r7, #16]
 800144c:	23bb      	movs	r3, #187	@ 0xbb
 800144e:	747b      	strb	r3, [r7, #17]
 8001450:	23cc      	movs	r3, #204	@ 0xcc
 8001452:	74bb      	strb	r3, [r7, #18]
 8001454:	23dd      	movs	r3, #221	@ 0xdd
 8001456:	74fb      	strb	r3, [r7, #19]
                                 (uint8_t)(counter & 0xFF), 
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	b2db      	uxtb	r3, r3
  uint8_t TxData_Heartbeat[8] = {0xAA, 0xBB, 0xCC, 0xDD, 
 800145c:	753b      	strb	r3, [r7, #20]
                                 (uint8_t)((counter >> 8) & 0xFF), 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	b2db      	uxtb	r3, r3
  uint8_t TxData_Heartbeat[8] = {0xAA, 0xBB, 0xCC, 0xDD, 
 8001464:	757b      	strb	r3, [r7, #21]
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <CAN_SendHeartbeat+0x68>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	75bb      	strb	r3, [r7, #22]
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
                                 can_rx_flag, 0x00};
  uint32_t TxMailbox_Heartbeat;
  
  TxHeader_Heartbeat.StdId = CAN_ID_TELEMETRY_HEARTBEAT;  // New organized heartbeat ID
 8001472:	f240 6303 	movw	r3, #1539	@ 0x603
 8001476:	61bb      	str	r3, [r7, #24]
  TxHeader_Heartbeat.ExtId = 0x00;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  TxHeader_Heartbeat.RTR = CAN_RTR_DATA;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  TxHeader_Heartbeat.IDE = CAN_ID_STD;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  TxHeader_Heartbeat.DLC = 8;
 8001484:	2308      	movs	r3, #8
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxHeader_Heartbeat.TransmitGlobalTime = DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Heartbeat, TxData_Heartbeat, &TxMailbox_Heartbeat);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	f107 0210 	add.w	r2, r7, #16
 8001496:	f107 0118 	add.w	r1, r7, #24
 800149a:	4804      	ldr	r0, [pc, #16]	@ (80014ac <CAN_SendHeartbeat+0x6c>)
 800149c:	f002 fa3b 	bl	8003916 <HAL_CAN_AddTxMessage>
}
 80014a0:	bf00      	nop
 80014a2:	3730      	adds	r7, #48	@ 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000154 	.word	0x20000154
 80014ac:	200000b0 	.word	0x200000b0

080014b0 <CAN_ProcessTemperatureRequests>:
/**
  * @brief  Process temperature-related CAN requests
  * @retval None
  */
void CAN_ProcessTemperatureRequests(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b096      	sub	sp, #88	@ 0x58
 80014b4:	af00      	add	r7, sp, #0
  // Check if we received a temperature threshold write command (new or legacy)
  if (new_7ff_message == 1) {
 80014b6:	4b4c      	ldr	r3, [pc, #304]	@ (80015e8 <CAN_ProcessTemperatureRequests+0x138>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d14d      	bne.n	800155c <CAN_ProcessTemperatureRequests+0xac>
    new_7ff_message = 0; // Clear flag
 80014c0:	4b49      	ldr	r3, [pc, #292]	@ (80015e8 <CAN_ProcessTemperatureRequests+0x138>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
    
    // Extract temperature values from received message
    int8_t min_temp = (int8_t)last_7ff_data[0];  // Byte 0: Min temperature
 80014c6:	4b49      	ldr	r3, [pc, #292]	@ (80015ec <CAN_ProcessTemperatureRequests+0x13c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    int8_t max_temp = (int8_t)last_7ff_data[1];  // Byte 1: Max temperature
 80014d0:	4b46      	ldr	r3, [pc, #280]	@ (80015ec <CAN_ProcessTemperatureRequests+0x13c>)
 80014d2:	785b      	ldrb	r3, [r3, #1]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    CAN_TxHeaderTypeDef TxHeader_WriteResp;
    uint8_t TxData_WriteResp[8];
    uint32_t TxMailbox_WriteResp;
    
    // Try to set temperature thresholds
    if (BQ76952_SetTemperatureThresholds(min_temp, max_temp) == HAL_OK) {
 80014da:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 80014de:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ffff 	bl	80004e8 <BQ76952_SetTemperatureThresholds>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10f      	bne.n	8001510 <CAN_ProcessTemperatureRequests+0x60>
      // Send success reply message (all 0xFF)
      for (int i = 0; i < 8; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80014f4:	e008      	b.n	8001508 <CAN_ProcessTemperatureRequests+0x58>
        TxData_WriteResp[i] = 0xFF;
 80014f6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80014fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014fc:	4413      	add	r3, r2
 80014fe:	22ff      	movs	r2, #255	@ 0xff
 8001500:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 8; i++) {
 8001502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001504:	3301      	adds	r3, #1
 8001506:	657b      	str	r3, [r7, #84]	@ 0x54
 8001508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800150a:	2b07      	cmp	r3, #7
 800150c:	ddf3      	ble.n	80014f6 <CAN_ProcessTemperatureRequests+0x46>
 800150e:	e00e      	b.n	800152e <CAN_ProcessTemperatureRequests+0x7e>
      }
    } else {
      // Send failure reply message (all 0x00)  
      for (int i = 0; i < 8; i++) {
 8001510:	2300      	movs	r3, #0
 8001512:	653b      	str	r3, [r7, #80]	@ 0x50
 8001514:	e008      	b.n	8001528 <CAN_ProcessTemperatureRequests+0x78>
        TxData_WriteResp[i] = 0x00;
 8001516:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800151a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800151c:	4413      	add	r3, r2
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 8; i++) {
 8001522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001524:	3301      	adds	r3, #1
 8001526:	653b      	str	r3, [r7, #80]	@ 0x50
 8001528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800152a:	2b07      	cmp	r3, #7
 800152c:	ddf3      	ble.n	8001516 <CAN_ProcessTemperatureRequests+0x66>
      }
    }
    
    // Configure and send reply message on new organized response ID
    TxHeader_WriteResp.StdId = CAN_ID_WRITE_TEMP_THRESHOLDS_RESP;
 800152e:	f240 1307 	movw	r3, #263	@ 0x107
 8001532:	637b      	str	r3, [r7, #52]	@ 0x34
    TxHeader_WriteResp.ExtId = 0x00;
 8001534:	2300      	movs	r3, #0
 8001536:	63bb      	str	r3, [r7, #56]	@ 0x38
    TxHeader_WriteResp.RTR = CAN_RTR_DATA;
 8001538:	2300      	movs	r3, #0
 800153a:	643b      	str	r3, [r7, #64]	@ 0x40
    TxHeader_WriteResp.IDE = CAN_ID_STD;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TxHeader_WriteResp.DLC = 8;
 8001540:	2308      	movs	r3, #8
 8001542:	647b      	str	r3, [r7, #68]	@ 0x44
    TxHeader_WriteResp.TransmitGlobalTime = DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    
    HAL_CAN_AddTxMessage(&hcan1, &TxHeader_WriteResp, TxData_WriteResp, &TxMailbox_WriteResp);
 800154a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800154e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001552:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001556:	4826      	ldr	r0, [pc, #152]	@ (80015f0 <CAN_ProcessTemperatureRequests+0x140>)
 8001558:	f002 f9dd 	bl	8003916 <HAL_CAN_AddTxMessage>
  }
  
  // Check if we received a read temperature thresholds request
  if (new_read_temp_request == 1) {
 800155c:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <CAN_ProcessTemperatureRequests+0x144>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d13b      	bne.n	80015de <CAN_ProcessTemperatureRequests+0x12e>
    new_read_temp_request = 0; // Clear flag
 8001566:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <CAN_ProcessTemperatureRequests+0x144>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
    
    CAN_TxHeaderTypeDef TxHeader_ReadResp;
    uint8_t TxData_ReadResp[8] = {0};
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
    uint32_t TxMailbox_ReadResp;
    
    int8_t current_min_temp = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	70fb      	strb	r3, [r7, #3]
    int8_t current_max_temp = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	70bb      	strb	r3, [r7, #2]
    
    // Try to read current temperature thresholds from BMS
    if (BQ76952_ReadTemperatureThresholds(&current_min_temp, &current_max_temp) == HAL_OK) {
 800157e:	1cba      	adds	r2, r7, #2
 8001580:	1cfb      	adds	r3, r7, #3
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff f85b 	bl	8000640 <BQ76952_ReadTemperatureThresholds>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10a      	bne.n	80015a6 <CAN_ProcessTemperatureRequests+0xf6>
      // Pack current thresholds in response
      TxData_ReadResp[0] = (uint8_t)current_min_temp;  // Byte 0: Current min temperature
 8001590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	723b      	strb	r3, [r7, #8]
      TxData_ReadResp[1] = (uint8_t)current_max_temp;  // Byte 1: Current max temperature
 8001598:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	727b      	strb	r3, [r7, #9]
      TxData_ReadResp[2] = 0x01;  // Byte 2: Success flag
 80015a0:	2301      	movs	r3, #1
 80015a2:	72bb      	strb	r3, [r7, #10]
 80015a4:	e005      	b.n	80015b2 <CAN_ProcessTemperatureRequests+0x102>
      // Bytes 3-7: Reserved/unused
    } else {
      // Send error response
      TxData_ReadResp[0] = 0x00;  // Byte 0: Error value
 80015a6:	2300      	movs	r3, #0
 80015a8:	723b      	strb	r3, [r7, #8]
      TxData_ReadResp[1] = 0x00;  // Byte 1: Error value  
 80015aa:	2300      	movs	r3, #0
 80015ac:	727b      	strb	r3, [r7, #9]
      TxData_ReadResp[2] = 0x00;  // Byte 2: Error flag
 80015ae:	2300      	movs	r3, #0
 80015b0:	72bb      	strb	r3, [r7, #10]
      // Bytes 3-7: Reserved/unused
    }
    
    // Configure and send response message
    TxHeader_ReadResp.StdId = CAN_ID_READ_TEMP_THRESHOLDS_RESP;
 80015b2:	f240 1305 	movw	r3, #261	@ 0x105
 80015b6:	613b      	str	r3, [r7, #16]
    TxHeader_ReadResp.ExtId = 0x00;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
    TxHeader_ReadResp.RTR = CAN_RTR_DATA;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
    TxHeader_ReadResp.IDE = CAN_ID_STD;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
    TxHeader_ReadResp.DLC = 8;
 80015c4:	2308      	movs	r3, #8
 80015c6:	623b      	str	r3, [r7, #32]
    TxHeader_ReadResp.TransmitGlobalTime = DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    
    HAL_CAN_AddTxMessage(&hcan1, &TxHeader_ReadResp, TxData_ReadResp, &TxMailbox_ReadResp);
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	f107 0208 	add.w	r2, r7, #8
 80015d4:	f107 0110 	add.w	r1, r7, #16
 80015d8:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <CAN_ProcessTemperatureRequests+0x140>)
 80015da:	f002 f99c 	bl	8003916 <HAL_CAN_AddTxMessage>
  }
}
 80015de:	bf00      	nop
 80015e0:	3758      	adds	r7, #88	@ 0x58
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000160 	.word	0x20000160
 80015ec:	20000158 	.word	0x20000158
 80015f0:	200000b0 	.word	0x200000b0
 80015f4:	20000161 	.word	0x20000161

080015f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief  CAN Receive Callback - handles incoming temperature threshold commands
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	@ 0x38
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef RxHeader_Temp;
  uint8_t RxData_Temp[8];
  
  // Set debug flag to indicate RX callback was triggered
  can_rx_flag = 1;
 8001600:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
  
  // Simply clear the FIFO without any complex processing
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader_Temp, RxData_Temp);
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	f107 0214 	add.w	r2, r7, #20
 800160e:	2100      	movs	r1, #0
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f002 fa50 	bl	8003ab6 <HAL_CAN_GetRxMessage>
  
  // Check for new organized write temperature threshold command
  if (RxHeader_Temp.StdId == CAN_ID_WRITE_TEMP_THRESHOLDS_REQ) {
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800161c:	d119      	bne.n	8001652 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
    can_rx_flag = 2;  // Special value to indicate write command was received
 800161e:	4b23      	ldr	r3, [pc, #140]	@ (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001620:	2202      	movs	r2, #2
 8001622:	701a      	strb	r2, [r3, #0]
    // Copy message data for main loop to process
    for (int i = 0; i < 8; i++) {
 8001624:	2300      	movs	r3, #0
 8001626:	637b      	str	r3, [r7, #52]	@ 0x34
 8001628:	e00c      	b.n	8001644 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
      last_7ff_data[i] = RxData_Temp[i];
 800162a:	f107 020c 	add.w	r2, r7, #12
 800162e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001630:	4413      	add	r3, r2
 8001632:	7819      	ldrb	r1, [r3, #0]
 8001634:	4a1e      	ldr	r2, [pc, #120]	@ (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001638:	4413      	add	r3, r2
 800163a:	460a      	mov	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 800163e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001640:	3301      	adds	r3, #1
 8001642:	637b      	str	r3, [r7, #52]	@ 0x34
 8001644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001646:	2b07      	cmp	r3, #7
 8001648:	ddef      	ble.n	800162a <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
    }
    new_7ff_message = 1;  // Flag for main loop
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
    }
    new_7ff_message = 1;  // Flag for main loop
  }
  
  // Don't try to transmit from within interrupt - let main loop handle it
}
 8001650:	e028      	b.n	80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
  else if (RxHeader_Temp.StdId == CAN_ID_READ_TEMP_THRESHOLDS_REQ) {
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001658:	d106      	bne.n	8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
    can_rx_flag = 3;  // Special value to indicate read command was received
 800165a:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800165c:	2203      	movs	r2, #3
 800165e:	701a      	strb	r2, [r3, #0]
    new_read_temp_request = 1;  // Flag for main loop
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
}
 8001666:	e01d      	b.n	80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
  else if (RxHeader_Temp.StdId == CAN_ID_LEGACY_TEMP_THRESHOLDS) {
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f240 7201 	movw	r2, #1793	@ 0x701
 800166e:	4293      	cmp	r3, r2
 8001670:	d118      	bne.n	80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
    can_rx_flag = 2;  // Special value to indicate legacy 7FF was received
 8001672:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001674:	2202      	movs	r2, #2
 8001676:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8001678:	2300      	movs	r3, #0
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
 800167c:	e00c      	b.n	8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
      last_7ff_data[i] = RxData_Temp[i];
 800167e:	f107 020c 	add.w	r2, r7, #12
 8001682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001684:	4413      	add	r3, r2
 8001686:	7819      	ldrb	r1, [r3, #0]
 8001688:	4a09      	ldr	r2, [pc, #36]	@ (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800168a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800168c:	4413      	add	r3, r2
 800168e:	460a      	mov	r2, r1
 8001690:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8001692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001694:	3301      	adds	r3, #1
 8001696:	633b      	str	r3, [r7, #48]	@ 0x30
 8001698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800169a:	2b07      	cmp	r3, #7
 800169c:	ddef      	ble.n	800167e <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
    new_7ff_message = 1;  // Flag for main loop
 800169e:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
}
 80016a4:	bf00      	nop
 80016a6:	3738      	adds	r7, #56	@ 0x38
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000154 	.word	0x20000154
 80016b0:	20000158 	.word	0x20000158
 80016b4:	20000160 	.word	0x20000160
 80016b8:	20000161 	.word	0x20000161

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c2:	f000 fbec 	bl	8001e9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c6:	f000 f86b 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ca:	f000 f9ab 	bl	8001a24 <MX_GPIO_Init>
  MX_ADC1_Init();
 80016ce:	f000 f8ad 	bl	800182c <MX_ADC1_Init>
  MX_CAN1_Init();
 80016d2:	f000 f90f 	bl	80018f4 <MX_CAN1_Init>
  MX_CRC_Init();
 80016d6:	f000 f943 	bl	8001960 <MX_CRC_Init>
  MX_I2C1_Init();
 80016da:	f000 f963 	bl	80019a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  
  // Configure CAN
  CAN_Config();
 80016de:	f7ff f913 	bl	8000908 <CAN_Config>
  
  // Start CAN
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80016e2:	482a      	ldr	r0, [pc, #168]	@ (800178c <main+0xd0>)
 80016e4:	f002 f8d3 	bl	800388e <HAL_CAN_Start>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <main+0x36>
    Error_Handler();
 80016ee:	f000 f9ef 	bl	8001ad0 <Error_Handler>
  }
  
  // Enable CAN RX interrupt for receiving temperature threshold commands
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80016f2:	2102      	movs	r1, #2
 80016f4:	4825      	ldr	r0, [pc, #148]	@ (800178c <main+0xd0>)
 80016f6:	f002 fb00 	bl	8003cfa <HAL_CAN_ActivateNotification>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <main+0x48>
    Error_Handler();
 8001700:	f000 f9e6 	bl	8001ad0 <Error_Handler>
  }
  
  // Enable CAN TX interrupt for transmission complete notifications
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 8001704:	2101      	movs	r1, #1
 8001706:	4821      	ldr	r0, [pc, #132]	@ (800178c <main+0xd0>)
 8001708:	f002 faf7 	bl	8003cfa <HAL_CAN_ActivateNotification>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <main+0x5a>
    Error_Handler();
 8001712:	f000 f9dd 	bl	8001ad0 <Error_Handler>
  }
  
  // Calibrate ADC
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8001716:	217f      	movs	r1, #127	@ 0x7f
 8001718:	481d      	ldr	r0, [pc, #116]	@ (8001790 <main+0xd4>)
 800171a:	f001 fe93 	bl	8003444 <HAL_ADCEx_Calibration_Start>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <main+0x6c>
    Error_Handler();
 8001724:	f000 f9d4 	bl	8001ad0 <Error_Handler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    // Read ADC value from thermistor MUX
    uint16_t adc_value = ADC_ReadValue();
 8001728:	f7fe fd50 	bl	80001cc <ADC_ReadValue>
 800172c:	4603      	mov	r3, r0
 800172e:	80fb      	strh	r3, [r7, #6]
    
    // Send ADC telemetry on new organized ID
    CAN_TxData(adc_value);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f924 	bl	8000980 <CAN_TxData>
    
    // Read stack voltage from BQ76952 BMS
    uint16_t stack_voltage_mv = BQ76952_ReadStackVoltage();
 8001738:	f7fe fd6a 	bl	8000210 <BQ76952_ReadStackVoltage>
 800173c:	4603      	mov	r3, r0
 800173e:	80bb      	strh	r3, [r7, #4]
    
    // Send stack voltage telemetry on new organized ID
    CAN_TxStackVoltage(stack_voltage_mv);
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f950 	bl	80009e8 <CAN_TxStackVoltage>
    
    // Send all cell voltages in grouped format every cycle (increased sampling rate)
    CAN_TxAllCellVoltagesMux();
 8001748:	f7ff f982 	bl	8000a50 <CAN_TxAllCellVoltagesMux>
    
    // Process temperature-related CAN requests
    CAN_ProcessTemperatureRequests();
 800174c:	f7ff feb0 	bl	80014b0 <CAN_ProcessTemperatureRequests>
    
    // Send heartbeat message every 100 cycles to verify CAN TX is working
    if ((heartbeat_counter % 100) == 0) {
 8001750:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <main+0xd8>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <main+0xdc>)
 8001756:	fba3 1302 	umull	r1, r3, r3, r2
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2164      	movs	r1, #100	@ 0x64
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <main+0xbc>
      CAN_SendHeartbeat(heartbeat_counter);
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <main+0xd8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fe67 	bl	8001440 <CAN_SendHeartbeat>
      
      // Reset the RX flag after reporting it in heartbeat
      can_rx_flag = 0;
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <main+0xe0>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
    }
    
    heartbeat_counter++;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <main+0xd8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <main+0xd8>)
 8001780:	6013      	str	r3, [r2, #0]
    
    // Reduced delay for faster sampling rate (100ms instead of 500ms)
    HAL_Delay(100);
 8001782:	2064      	movs	r0, #100	@ 0x64
 8001784:	f000 fc00 	bl	8001f88 <HAL_Delay>
  {
 8001788:	e7ce      	b.n	8001728 <main+0x6c>
 800178a:	bf00      	nop
 800178c:	200000b0 	.word	0x200000b0
 8001790:	2000004c 	.word	0x2000004c
 8001794:	20000150 	.word	0x20000150
 8001798:	51eb851f 	.word	0x51eb851f
 800179c:	20000154 	.word	0x20000154

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b096      	sub	sp, #88	@ 0x58
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	2244      	movs	r2, #68	@ 0x44
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 ffee 	bl	8006790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017c6:	f003 fea5 	bl	8005514 <HAL_PWREx_ControlVoltageScaling>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017d0:	f000 f97e 	bl	8001ad0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80017d4:	2310      	movs	r3, #16
 80017d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017d8:	2301      	movs	r3, #1
 80017da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80017e0:	23b0      	movs	r3, #176	@ 0xb0
 80017e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fee7 	bl	80055c0 <HAL_RCC_OscConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80017f8:	f000 f96a 	bl	8001ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fc:	230f      	movs	r3, #15
 80017fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	2102      	movs	r1, #2
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fae7 	bl	8005de8 <HAL_RCC_ClockConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001820:	f000 f956 	bl	8001ad0 <Error_Handler>
  }
}
 8001824:	bf00      	nop
 8001826:	3758      	adds	r7, #88	@ 0x58
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001832:	463b      	mov	r3, r7
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001842:	4b29      	ldr	r3, [pc, #164]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 8001844:	4a29      	ldr	r2, [pc, #164]	@ (80018ec <MX_ADC1_Init+0xc0>)
 8001846:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001848:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 800184a:	2200      	movs	r2, #0
 800184c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800184e:	4b26      	ldr	r3, [pc, #152]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001854:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800185a:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001860:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 8001862:	2204      	movs	r2, #4
 8001864:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 8001868:	2200      	movs	r2, #0
 800186a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 800186e:	2200      	movs	r2, #0
 8001870:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 8001874:	2201      	movs	r2, #1
 8001876:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 8001882:	2200      	movs	r2, #0
 8001884:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 8001888:	2200      	movs	r2, #0
 800188a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800188c:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001894:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 8001896:	2200      	movs	r2, #0
 8001898:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800189a:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018a2:	4811      	ldr	r0, [pc, #68]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 80018a4:	f000 fdaa 	bl	80023fc <HAL_ADC_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80018ae:	f000 f90f 	bl	8001ad0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_ADC1_Init+0xc4>)
 80018b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018b6:	2306      	movs	r3, #6
 80018b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018be:	237f      	movs	r3, #127	@ 0x7f
 80018c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018c2:	2304      	movs	r3, #4
 80018c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ca:	463b      	mov	r3, r7
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	@ (80018e8 <MX_ADC1_Init+0xbc>)
 80018d0:	f001 f808 	bl	80028e4 <HAL_ADC_ConfigChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80018da:	f000 f8f9 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000004c 	.word	0x2000004c
 80018ec:	50040000 	.word	0x50040000
 80018f0:	14f00020 	.word	0x14f00020

080018f4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80018f8:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <MX_CAN1_Init+0x64>)
 80018fa:	4a18      	ldr	r2, [pc, #96]	@ (800195c <MX_CAN1_Init+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80018fe:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <MX_CAN1_Init+0x64>)
 8001900:	2206      	movs	r2, #6
 8001902:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001904:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <MX_CAN1_Init+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <MX_CAN1_Init+0x64>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_CAN1_Init+0x64>)
 8001912:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001916:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001918:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <MX_CAN1_Init+0x64>)
 800191a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800191e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001920:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <MX_CAN1_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001926:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <MX_CAN1_Init+0x64>)
 8001928:	2201      	movs	r2, #1
 800192a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 800192c:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <MX_CAN1_Init+0x64>)
 800192e:	2201      	movs	r2, #1
 8001930:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <MX_CAN1_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001938:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <MX_CAN1_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <MX_CAN1_Init+0x64>)
 8001940:	2200      	movs	r2, #0
 8001942:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	@ (8001958 <MX_CAN1_Init+0x64>)
 8001946:	f001 fddd 	bl	8003504 <HAL_CAN_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001950:	f000 f8be 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200000b0 	.word	0x200000b0
 800195c:	40006400 	.word	0x40006400

08001960 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001964:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <MX_CRC_Init+0x3c>)
 8001966:	4a0e      	ldr	r2, [pc, #56]	@ (80019a0 <MX_CRC_Init+0x40>)
 8001968:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <MX_CRC_Init+0x3c>)
 800196c:	2200      	movs	r2, #0
 800196e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001970:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <MX_CRC_Init+0x3c>)
 8001972:	2200      	movs	r2, #0
 8001974:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <MX_CRC_Init+0x3c>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800197c:	4b07      	ldr	r3, [pc, #28]	@ (800199c <MX_CRC_Init+0x3c>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <MX_CRC_Init+0x3c>)
 8001984:	2201      	movs	r2, #1
 8001986:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001988:	4804      	ldr	r0, [pc, #16]	@ (800199c <MX_CRC_Init+0x3c>)
 800198a:	f002 fd1d 	bl	80043c8 <HAL_CRC_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001994:	f000 f89c 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200000d8 	.word	0x200000d8
 80019a0:	40023000 	.word	0x40023000

080019a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <MX_I2C1_Init+0x74>)
 80019aa:	4a1c      	ldr	r2, [pc, #112]	@ (8001a1c <MX_I2C1_Init+0x78>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <MX_I2C1_Init+0x74>)
 80019b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a20 <MX_I2C1_Init+0x7c>)
 80019b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019b4:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <MX_I2C1_Init+0x74>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ba:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <MX_I2C1_Init+0x74>)
 80019bc:	2201      	movs	r2, #1
 80019be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c0:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <MX_I2C1_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <MX_I2C1_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <MX_I2C1_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <MX_I2C1_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <MX_I2C1_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019de:	480e      	ldr	r0, [pc, #56]	@ (8001a18 <MX_I2C1_Init+0x74>)
 80019e0:	f002 ff66 	bl	80048b0 <HAL_I2C_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019ea:	f000 f871 	bl	8001ad0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019ee:	2100      	movs	r1, #0
 80019f0:	4809      	ldr	r0, [pc, #36]	@ (8001a18 <MX_I2C1_Init+0x74>)
 80019f2:	f003 fce9 	bl	80053c8 <HAL_I2CEx_ConfigAnalogFilter>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019fc:	f000 f868 	bl	8001ad0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a00:	2100      	movs	r1, #0
 8001a02:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <MX_I2C1_Init+0x74>)
 8001a04:	f003 fd2b 	bl	800545e <HAL_I2CEx_ConfigDigitalFilter>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a0e:	f000 f85f 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200000fc 	.word	0x200000fc
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	10805d88 	.word	0x10805d88

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <MX_GPIO_Init+0xa4>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3e:	4a22      	ldr	r2, [pc, #136]	@ (8001ac8 <MX_GPIO_Init+0xa4>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <MX_GPIO_Init+0xa4>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <MX_GPIO_Init+0xa4>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac8 <MX_GPIO_Init+0xa4>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <MX_GPIO_Init+0xa4>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SIG1_Pin|MUX_SIG3_Pin, GPIO_PIN_SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2122      	movs	r1, #34	@ 0x22
 8001a6e:	4817      	ldr	r0, [pc, #92]	@ (8001acc <MX_GPIO_Init+0xa8>)
 8001a70:	f002 ff06 	bl	8004880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SIG2_GPIO_Port, MUX_SIG2_Pin, GPIO_PIN_SET);
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a7e:	f002 feff 	bl	8004880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MUX_SIG1_Pin MUX_SIG3_Pin */
  GPIO_InitStruct.Pin = MUX_SIG1_Pin|MUX_SIG3_Pin;
 8001a82:	2322      	movs	r3, #34	@ 0x22
 8001a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	2301      	movs	r3, #1
 8001a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	4619      	mov	r1, r3
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <MX_GPIO_Init+0xa8>)
 8001a9a:	f002 fd87 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MUX_SIG2_Pin */
  GPIO_InitStruct.Pin = MUX_SIG2_Pin;
 8001a9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MUX_SIG2_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aba:	f002 fd77 	bl	80045ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001abe:	bf00      	nop
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	48000400 	.word	0x48000400

08001ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad4:	b672      	cpsid	i
}
 8001ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <Error_Handler+0x8>

08001adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <HAL_MspInit+0x44>)
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b20 <HAL_MspInit+0x44>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aee:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <HAL_MspInit+0x44>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <HAL_MspInit+0x44>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afe:	4a08      	ldr	r2, [pc, #32]	@ (8001b20 <HAL_MspInit+0x44>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_MspInit+0x44>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b09e      	sub	sp, #120	@ 0x78
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	2254      	movs	r2, #84	@ 0x54
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 fe23 	bl	8006790 <memset>
  if(hadc->Instance==ADC1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a25      	ldr	r2, [pc, #148]	@ (8001be4 <HAL_ADC_MspInit+0xc0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d143      	bne.n	8001bdc <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b5a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b60:	2301      	movs	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 8001b64:	2303      	movs	r3, #3
 8001b66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b74:	2302      	movs	r3, #2
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 fb1c 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001b8e:	f7ff ff9f 	bl	8001ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <HAL_ADC_MspInit+0xc4>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b96:	4a14      	ldr	r2, [pc, #80]	@ (8001be8 <HAL_ADC_MspInit+0xc4>)
 8001b98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9e:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_ADC_MspInit+0xc4>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <HAL_ADC_MspInit+0xc4>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	4a0e      	ldr	r2, [pc, #56]	@ (8001be8 <HAL_ADC_MspInit+0xc4>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <HAL_ADC_MspInit+0xc4>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bc6:	230b      	movs	r3, #11
 8001bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd8:	f002 fce8 	bl	80045ac <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bdc:	bf00      	nop
 8001bde:	3778      	adds	r7, #120	@ 0x78
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	50040000 	.word	0x50040000
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a20      	ldr	r2, [pc, #128]	@ (8001c8c <HAL_CAN_MspInit+0xa0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d139      	bne.n	8001c82 <HAL_CAN_MspInit+0x96>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c0e:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <HAL_CAN_MspInit+0xa4>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c12:	4a1f      	ldr	r2, [pc, #124]	@ (8001c90 <HAL_CAN_MspInit+0xa4>)
 8001c14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <HAL_CAN_MspInit+0xa4>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <HAL_CAN_MspInit+0xa4>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2a:	4a19      	ldr	r2, [pc, #100]	@ (8001c90 <HAL_CAN_MspInit+0xa4>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c32:	4b17      	ldr	r3, [pc, #92]	@ (8001c90 <HAL_CAN_MspInit+0xa4>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c3e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c50:	2309      	movs	r3, #9
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c5e:	f002 fca5 	bl	80045ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	2013      	movs	r0, #19
 8001c68:	f002 fb77 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001c6c:	2013      	movs	r0, #19
 8001c6e:	f002 fb90 	bl	8004392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	2014      	movs	r0, #20
 8001c78:	f002 fb6f 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c7c:	2014      	movs	r0, #20
 8001c7e:	f002 fb88 	bl	8004392 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	@ 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40006400 	.word	0x40006400
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <HAL_CRC_MspInit+0x38>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d10b      	bne.n	8001cbe <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_CRC_MspInit+0x3c>)
 8001ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001caa:	4a09      	ldr	r2, [pc, #36]	@ (8001cd0 <HAL_CRC_MspInit+0x3c>)
 8001cac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cb0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <HAL_CRC_MspInit+0x3c>)
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023000 	.word	0x40023000
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b09e      	sub	sp, #120	@ 0x78
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	2254      	movs	r2, #84	@ 0x54
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fd4b 	bl	8006790 <memset>
  if(hi2c->Instance==I2C1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8001d7c <HAL_I2C_MspInit+0xa8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d137      	bne.n	8001d74 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d04:	2340      	movs	r3, #64	@ 0x40
 8001d06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 fa55 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d1c:	f7ff fed8 	bl	8001ad0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <HAL_I2C_MspInit+0xac>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d24:	4a16      	ldr	r2, [pc, #88]	@ (8001d80 <HAL_I2C_MspInit+0xac>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d2c:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_I2C_MspInit+0xac>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d38:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d3c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3e:	2312      	movs	r3, #18
 8001d40:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d58:	f002 fc28 	bl	80045ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <HAL_I2C_MspInit+0xac>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d60:	4a07      	ldr	r2, [pc, #28]	@ (8001d80 <HAL_I2C_MspInit+0xac>)
 8001d62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_I2C_MspInit+0xac>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d74:	bf00      	nop
 8001d76:	3778      	adds	r7, #120	@ 0x78
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40005400 	.word	0x40005400
 8001d80:	40021000 	.word	0x40021000

08001d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <NMI_Handler+0x4>

08001d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <HardFault_Handler+0x4>

08001d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <MemManage_Handler+0x4>

08001d9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <BusFault_Handler+0x4>

08001da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <UsageFault_Handler+0x4>

08001dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dda:	f000 f8b5 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001de8:	4802      	ldr	r0, [pc, #8]	@ (8001df4 <CAN1_TX_IRQHandler+0x10>)
 8001dea:	f001 ffac 	bl	8003d46 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200000b0 	.word	0x200000b0

08001df8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <CAN1_RX0_IRQHandler+0x10>)
 8001dfe:	f001 ffa2 	bl	8003d46 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200000b0 	.word	0x200000b0

08001e0c <System_SendErrorMessage>:
  * @brief  Send system error message via CAN
  * @param  error_code: Error code to send
  * @retval None
  */
void System_SendErrorMessage(uint8_t error_code) 
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  CAN_SendErrorMessage(error_code);
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff faeb 	bl	80013f4 <CAN_SendErrorMessage>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <SystemInit+0x20>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e32:	4a05      	ldr	r2, [pc, #20]	@ (8001e48 <SystemInit+0x20>)
 8001e34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e50:	f7ff ffea 	bl	8001e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e54:	480c      	ldr	r0, [pc, #48]	@ (8001e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e56:	490d      	ldr	r1, [pc, #52]	@ (8001e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e58:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <LoopForever+0xe>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e98 <LoopForever+0x16>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f004 fc91 	bl	80067a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e7e:	f7ff fc1d 	bl	80016bc <main>

08001e82 <LoopForever>:

LoopForever:
    b LoopForever
 8001e82:	e7fe      	b.n	8001e82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e84:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e90:	08006848 	.word	0x08006848
  ldr r2, =_sbss
 8001e94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e98:	20000168 	.word	0x20000168

08001e9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC1_IRQHandler>

08001e9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	f002 fa4b 	bl	8004344 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eae:	200f      	movs	r0, #15
 8001eb0:	f000 f80e 	bl	8001ed0 <HAL_InitTick>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	71fb      	strb	r3, [r7, #7]
 8001ebe:	e001      	b.n	8001ec4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ec0:	f7ff fe0c 	bl	8001adc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001edc:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <HAL_InitTick+0x6c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d023      	beq.n	8001f2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ee4:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <HAL_InitTick+0x70>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <HAL_InitTick+0x6c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f002 fa57 	bl	80043ae <HAL_SYSTICK_Config>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10f      	bne.n	8001f26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d809      	bhi.n	8001f20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f002 fa21 	bl	800435a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f18:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <HAL_InitTick+0x74>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e007      	b.n	8001f30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	e004      	b.n	8001f30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	e001      	b.n	8001f30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_IncTick+0x20>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_IncTick+0x24>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <HAL_IncTick+0x24>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	20000164 	.word	0x20000164

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	@ (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000164 	.word	0x20000164

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff ffee 	bl	8001f70 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d005      	beq.n	8001fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <HAL_Delay+0x44>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fae:	bf00      	nop
 8001fb0:	f7ff ffde 	bl	8001f70 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f7      	bhi.n	8001fb0 <HAL_Delay+0x28>
  {
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	609a      	str	r2, [r3, #8]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3360      	adds	r3, #96	@ 0x60
 800204a:	461a      	mov	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b08      	ldr	r3, [pc, #32]	@ (800207c <LL_ADC_SetOffset+0x44>)
 800205a:	4013      	ands	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	4313      	orrs	r3, r2
 8002068:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	03fff000 	.word	0x03fff000

08002080 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3360      	adds	r3, #96	@ 0x60
 800208e:	461a      	mov	r2, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3360      	adds	r3, #96	@ 0x60
 80020bc:	461a      	mov	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020d6:	bf00      	nop
 80020d8:	371c      	adds	r7, #28
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3330      	adds	r3, #48	@ 0x30
 8002118:	461a      	mov	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	4413      	add	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	211f      	movs	r1, #31
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	401a      	ands	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0e9b      	lsrs	r3, r3, #26
 8002140:	f003 011f 	and.w	r1, r3, #31
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	431a      	orrs	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002154:	bf00      	nop
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3314      	adds	r3, #20
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	0e5b      	lsrs	r3, r3, #25
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	4413      	add	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	0d1b      	lsrs	r3, r3, #20
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	2107      	movs	r1, #7
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	401a      	ands	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	0d1b      	lsrs	r3, r3, #20
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	431a      	orrs	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	43db      	mvns	r3, r3
 80021d2:	401a      	ands	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 0318 	and.w	r3, r3, #24
 80021da:	4908      	ldr	r1, [pc, #32]	@ (80021fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80021dc:	40d9      	lsrs	r1, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	400b      	ands	r3, r1
 80021e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e6:	431a      	orrs	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	0007ffff 	.word	0x0007ffff

08002200 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002210:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6093      	str	r3, [r2, #8]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002238:	d101      	bne.n	800223e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800225c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002260:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002288:	d101      	bne.n	800228e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022d8:	f043 0202 	orr.w	r2, r3, #2
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <LL_ADC_IsEnabled+0x18>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <LL_ADC_IsEnabled+0x1a>
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b02      	cmp	r3, #2
 8002324:	d101      	bne.n	800232a <LL_ADC_IsDisableOngoing+0x18>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_ADC_IsDisableOngoing+0x1a>
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002348:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800234c:	f043 0204 	orr.w	r2, r3, #4
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002370:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002374:	f043 0210 	orr.w	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b04      	cmp	r3, #4
 800239a:	d101      	bne.n	80023a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023c2:	f043 0220 	orr.w	r2, r3, #32
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d101      	bne.n	80023ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e126      	b.n	8002664 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff fb7d 	bl	8001b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fef1 	bl	8002224 <LL_ADC_IsDeepPowerDownEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fed7 	bl	8002200 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ff0c 	bl	8002274 <LL_ADC_IsInternalRegulatorEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d115      	bne.n	800248e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fef0 	bl	800224c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800246c:	4b7f      	ldr	r3, [pc, #508]	@ (800266c <HAL_ADC_Init+0x270>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	4a7f      	ldr	r2, [pc, #508]	@ (8002670 <HAL_ADC_Init+0x274>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	3301      	adds	r3, #1
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002480:	e002      	b.n	8002488 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3b01      	subs	r3, #1
 8002486:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f9      	bne.n	8002482 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff feee 	bl	8002274 <LL_ADC_IsInternalRegulatorEnabled>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10d      	bne.n	80024ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a2:	f043 0210 	orr.w	r2, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	f043 0201 	orr.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff62 	bl	8002388 <LL_ADC_REG_IsConversionOngoing>
 80024c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 80bf 	bne.w	8002652 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 80bb 	bne.w	8002652 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024e4:	f043 0202 	orr.w	r2, r3, #2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fefb 	bl	80022ec <LL_ADC_IsEnabled>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024fc:	485d      	ldr	r0, [pc, #372]	@ (8002674 <HAL_ADC_Init+0x278>)
 80024fe:	f7ff fef5 	bl	80022ec <LL_ADC_IsEnabled>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4619      	mov	r1, r3
 800250e:	485a      	ldr	r0, [pc, #360]	@ (8002678 <HAL_ADC_Init+0x27c>)
 8002510:	f7ff fd5e 	bl	8001fd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7e5b      	ldrb	r3, [r3, #25]
 8002518:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800251e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002524:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800252a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002532:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d106      	bne.n	8002550 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	3b01      	subs	r3, #1
 8002548:	045b      	lsls	r3, r3, #17
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	2b00      	cmp	r3, #0
 8002556:	d009      	beq.n	800256c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002564:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	4b42      	ldr	r3, [pc, #264]	@ (800267c <HAL_ADC_Init+0x280>)
 8002574:	4013      	ands	r3, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	430b      	orrs	r3, r1
 800257e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff26 	bl	80023d6 <LL_ADC_INJ_IsConversionOngoing>
 800258a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d13d      	bne.n	800260e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d13a      	bne.n	800260e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800259c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025b4:	f023 0302 	bic.w	r3, r3, #2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	69b9      	ldr	r1, [r7, #24]
 80025be:	430b      	orrs	r3, r1
 80025c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d118      	bne.n	80025fe <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025d6:	f023 0304 	bic.w	r3, r3, #4
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025e2:	4311      	orrs	r1, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025e8:	4311      	orrs	r1, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025ee:	430a      	orrs	r2, r1
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	611a      	str	r2, [r3, #16]
 80025fc:	e007      	b.n	800260e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10c      	bne.n	8002630 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	f023 010f 	bic.w	r1, r3, #15
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	1e5a      	subs	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	631a      	str	r2, [r3, #48]	@ 0x30
 800262e:	e007      	b.n	8002640 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 020f 	bic.w	r2, r2, #15
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002644:	f023 0303 	bic.w	r3, r3, #3
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002650:	e007      	b.n	8002662 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002656:	f043 0210 	orr.w	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002662:	7ffb      	ldrb	r3, [r7, #31]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000000 	.word	0x20000000
 8002670:	053e2d63 	.word	0x053e2d63
 8002674:	50040000 	.word	0x50040000
 8002678:	50040300 	.word	0x50040300
 800267c:	fff0c007 	.word	0xfff0c007

08002680 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fe7b 	bl	8002388 <LL_ADC_REG_IsConversionOngoing>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d14f      	bne.n	8002738 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_Start+0x26>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e04b      	b.n	800273e <HAL_ADC_Start+0xbe>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fdb6 	bl	8003220 <ADC_Enable>
 80026b4:	4603      	mov	r3, r0
 80026b6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d137      	bne.n	800272e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026de:	d106      	bne.n	80026ee <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	f023 0206 	bic.w	r2, r3, #6
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80026ec:	e002      	b.n	80026f4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	221c      	movs	r2, #28
 80026fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002716:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800271a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fe06 	bl	8002338 <LL_ADC_REG_StartConversion>
 800272c:	e006      	b.n	800273c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002736:	e001      	b.n	800273c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002738:	2302      	movs	r3, #2
 800273a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_ADC_Stop+0x16>
 8002758:	2302      	movs	r3, #2
 800275a:	e023      	b.n	80027a4 <HAL_ADC_Stop+0x5e>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002764:	2103      	movs	r1, #3
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fc9e 	bl	80030a8 <ADC_ConversionStop>
 800276c:	4603      	mov	r3, r0
 800276e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d111      	bne.n	800279a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fdd8 	bl	800332c <ADC_Disable>
 800277c:	4603      	mov	r3, r0
 800277e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	f043 0201 	orr.w	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d102      	bne.n	80027c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80027be:	2308      	movs	r3, #8
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e010      	b.n	80027e6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06f      	b.n	80028c2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80027e2:	2304      	movs	r3, #4
 80027e4:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027e6:	f7ff fbc3 	bl	8001f70 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027ec:	e021      	b.n	8002832 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d01d      	beq.n	8002832 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027f6:	f7ff fbbb 	bl	8001f70 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <HAL_ADC_PollForConversion+0x60>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d112      	bne.n	8002832 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281e:	f043 0204 	orr.w	r2, r3, #4
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e047      	b.n	80028c2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0d6      	beq.n	80027ee <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fc46 	bl	80020e2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01c      	beq.n	8002896 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7e5b      	ldrb	r3, [r3, #25]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d118      	bne.n	8002896 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b08      	cmp	r3, #8
 8002870:	d111      	bne.n	8002896 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002876:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002882:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d105      	bne.n	8002896 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288e:	f043 0201 	orr.w	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d104      	bne.n	80028ae <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2208      	movs	r2, #8
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e008      	b.n	80028c0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d103      	bne.n	80028c0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	220c      	movs	r2, #12
 80028be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b0b6      	sub	sp, #216	@ 0xd8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x22>
 8002902:	2302      	movs	r3, #2
 8002904:	e3bb      	b.n	800307e <HAL_ADC_ConfigChannel+0x79a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fd38 	bl	8002388 <LL_ADC_REG_IsConversionOngoing>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 83a0 	bne.w	8003060 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d824      	bhi.n	800297a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	3b02      	subs	r3, #2
 8002936:	2b03      	cmp	r3, #3
 8002938:	d81b      	bhi.n	8002972 <HAL_ADC_ConfigChannel+0x8e>
 800293a:	a201      	add	r2, pc, #4	@ (adr r2, 8002940 <HAL_ADC_ConfigChannel+0x5c>)
 800293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002940:	08002951 	.word	0x08002951
 8002944:	08002959 	.word	0x08002959
 8002948:	08002961 	.word	0x08002961
 800294c:	08002969 	.word	0x08002969
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002950:	230c      	movs	r3, #12
 8002952:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002956:	e010      	b.n	800297a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002958:	2312      	movs	r3, #18
 800295a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800295e:	e00c      	b.n	800297a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002960:	2318      	movs	r3, #24
 8002962:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002966:	e008      	b.n	800297a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002968:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800296c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002970:	e003      	b.n	800297a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002972:	2306      	movs	r3, #6
 8002974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002978:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002988:	f7ff fbbe 	bl	8002108 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fcf9 	bl	8002388 <LL_ADC_REG_IsConversionOngoing>
 8002996:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fd19 	bl	80023d6 <LL_ADC_INJ_IsConversionOngoing>
 80029a4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 81a4 	bne.w	8002cfa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 819f 	bne.w	8002cfa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	461a      	mov	r2, r3
 80029ca:	f7ff fbc9 	bl	8002160 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	08db      	lsrs	r3, r3, #3
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d00a      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6919      	ldr	r1, [r3, #16]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a00:	f7ff fb1a 	bl	8002038 <LL_ADC_SetOffset>
 8002a04:	e179      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fb37 	bl	8002080 <LL_ADC_GetOffsetChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x14e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fb2c 	bl	8002080 <LL_ADC_GetOffsetChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	0e9b      	lsrs	r3, r3, #26
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	e01e      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x18c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fb21 	bl	8002080 <LL_ADC_GetOffsetChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e004      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002a64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1a4>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0e9b      	lsrs	r3, r3, #26
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	e018      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1d6>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002a9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002aa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002aac:	2320      	movs	r3, #32
 8002aae:	e004      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002ab0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d106      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff faf0 	bl	80020ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fad4 	bl	8002080 <LL_ADC_GetOffsetChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x214>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fac9 	bl	8002080 <LL_ADC_GetOffsetChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	0e9b      	lsrs	r3, r3, #26
 8002af2:	f003 021f 	and.w	r2, r3, #31
 8002af6:	e01e      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x252>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2101      	movs	r1, #1
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fabe 	bl	8002080 <LL_ADC_GetOffsetChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002b16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e004      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002b2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x26a>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0e9b      	lsrs	r3, r3, #26
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	e018      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x29c>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002b62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b66:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002b72:	2320      	movs	r3, #32
 8002b74:	e004      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002b76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d106      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fa8d 	bl	80020ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2102      	movs	r1, #2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fa71 	bl	8002080 <LL_ADC_GetOffsetChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x2da>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2102      	movs	r1, #2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fa66 	bl	8002080 <LL_ADC_GetOffsetChannel>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	0e9b      	lsrs	r3, r3, #26
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	e01e      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x318>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fa5b 	bl	8002080 <LL_ADC_GetOffsetChannel>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002be0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e004      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x330>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	e014      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x35a>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002c22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e004      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002c34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d106      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	2102      	movs	r1, #2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fa2e 	bl	80020ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2103      	movs	r1, #3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fa12 	bl	8002080 <LL_ADC_GetOffsetChannel>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x398>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2103      	movs	r1, #3
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fa07 	bl	8002080 <LL_ADC_GetOffsetChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	0e9b      	lsrs	r3, r3, #26
 8002c76:	f003 021f 	and.w	r2, r3, #31
 8002c7a:	e017      	b.n	8002cac <HAL_ADC_ConfigChannel+0x3c8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2103      	movs	r1, #3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff f9fc 	bl	8002080 <LL_ADC_GetOffsetChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c96:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002c98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	e003      	b.n	8002caa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x3e0>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0e9b      	lsrs	r3, r3, #26
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	e011      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x404>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002cd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002cd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	e003      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ce0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d106      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff f9d9 	bl	80020ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff faf4 	bl	80022ec <LL_ADC_IsEnabled>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 8140 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f7ff fa4d 	bl	80021b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	4a8f      	ldr	r2, [pc, #572]	@ (8002f60 <HAL_ADC_ConfigChannel+0x67c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	f040 8131 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10b      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x46e>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	0e9b      	lsrs	r3, r3, #26
 8002d40:	3301      	adds	r3, #1
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	bf94      	ite	ls
 8002d4a:	2301      	movls	r3, #1
 8002d4c:	2300      	movhi	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e019      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x4a2>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e003      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2b09      	cmp	r3, #9
 8002d7e:	bf94      	ite	ls
 8002d80:	2301      	movls	r3, #1
 8002d82:	2300      	movhi	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d079      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d107      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x4c2>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0e9b      	lsrs	r3, r3, #26
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	069b      	lsls	r3, r3, #26
 8002da0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002da4:	e015      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x4ee>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002db6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	e003      	b.n	8002dca <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	069b      	lsls	r3, r3, #26
 8002dce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x50e>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	0e9b      	lsrs	r3, r3, #26
 8002de4:	3301      	adds	r3, #1
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	e017      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x53e>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e02:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	e003      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002e0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	ea42 0103 	orr.w	r1, r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x564>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f003 021f 	and.w	r2, r3, #31
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	051b      	lsls	r3, r3, #20
 8002e46:	e018      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x596>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e58:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002e60:	2320      	movs	r3, #32
 8002e62:	e003      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f003 021f 	and.w	r2, r3, #31
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	e081      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d107      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x5b6>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	0e9b      	lsrs	r3, r3, #26
 8002e90:	3301      	adds	r3, #1
 8002e92:	069b      	lsls	r3, r3, #26
 8002e94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e98:	e015      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x5e2>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	e003      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	069b      	lsls	r3, r3, #26
 8002ec2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x602>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	0e9b      	lsrs	r3, r3, #26
 8002ed8:	3301      	adds	r3, #1
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	e017      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x632>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002efe:	2320      	movs	r3, #32
 8002f00:	e003      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2101      	movs	r1, #1
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	ea42 0103 	orr.w	r1, r2, r3
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x65e>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f003 021f 	and.w	r2, r3, #31
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	3b1e      	subs	r3, #30
 8002f3a:	051b      	lsls	r3, r3, #20
 8002f3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f40:	e01e      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x69c>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	60fb      	str	r3, [r7, #12]
  return result;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	e006      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x688>
 8002f5e:	bf00      	nop
 8002f60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f003 021f 	and.w	r2, r3, #31
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	3b1e      	subs	r3, #30
 8002f7a:	051b      	lsls	r3, r3, #20
 8002f7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f86:	4619      	mov	r1, r3
 8002f88:	f7ff f8ea 	bl	8002160 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b3d      	ldr	r3, [pc, #244]	@ (8003088 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d06c      	beq.n	8003072 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f98:	483c      	ldr	r0, [pc, #240]	@ (800308c <HAL_ADC_ConfigChannel+0x7a8>)
 8002f9a:	f7ff f83f 	bl	800201c <LL_ADC_GetCommonPathInternalCh>
 8002f9e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8003090 <HAL_ADC_ConfigChannel+0x7ac>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d127      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d121      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a35      	ldr	r2, [pc, #212]	@ (8003094 <HAL_ADC_ConfigChannel+0x7b0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d157      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fc6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fca:	4619      	mov	r1, r3
 8002fcc:	482f      	ldr	r0, [pc, #188]	@ (800308c <HAL_ADC_ConfigChannel+0x7a8>)
 8002fce:	f7ff f812 	bl	8001ff6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fd2:	4b31      	ldr	r3, [pc, #196]	@ (8003098 <HAL_ADC_ConfigChannel+0x7b4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	4a30      	ldr	r2, [pc, #192]	@ (800309c <HAL_ADC_ConfigChannel+0x7b8>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fec:	e002      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f9      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ffa:	e03a      	b.n	8003072 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a27      	ldr	r2, [pc, #156]	@ (80030a0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d113      	bne.n	800302e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003006:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800300a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10d      	bne.n	800302e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1f      	ldr	r2, [pc, #124]	@ (8003094 <HAL_ADC_ConfigChannel+0x7b0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d12a      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800301c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003020:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003024:	4619      	mov	r1, r3
 8003026:	4819      	ldr	r0, [pc, #100]	@ (800308c <HAL_ADC_ConfigChannel+0x7a8>)
 8003028:	f7fe ffe5 	bl	8001ff6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800302c:	e021      	b.n	8003072 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1c      	ldr	r2, [pc, #112]	@ (80030a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d11c      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003038:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800303c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d116      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a12      	ldr	r2, [pc, #72]	@ (8003094 <HAL_ADC_ConfigChannel+0x7b0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d111      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800304e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003052:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003056:	4619      	mov	r1, r3
 8003058:	480c      	ldr	r0, [pc, #48]	@ (800308c <HAL_ADC_ConfigChannel+0x7a8>)
 800305a:	f7fe ffcc 	bl	8001ff6 <LL_ADC_SetCommonPathInternalCh>
 800305e:	e008      	b.n	8003072 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800307a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800307e:	4618      	mov	r0, r3
 8003080:	37d8      	adds	r7, #216	@ 0xd8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	80080000 	.word	0x80080000
 800308c:	50040300 	.word	0x50040300
 8003090:	c7520000 	.word	0xc7520000
 8003094:	50040000 	.word	0x50040000
 8003098:	20000000 	.word	0x20000000
 800309c:	053e2d63 	.word	0x053e2d63
 80030a0:	cb840000 	.word	0xcb840000
 80030a4:	80000001 	.word	0x80000001

080030a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff f962 	bl	8002388 <LL_ADC_REG_IsConversionOngoing>
 80030c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f983 	bl	80023d6 <LL_ADC_INJ_IsConversionOngoing>
 80030d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8098 	beq.w	8003210 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d02a      	beq.n	8003144 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7e5b      	ldrb	r3, [r3, #25]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d126      	bne.n	8003144 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	7e1b      	ldrb	r3, [r3, #24]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d122      	bne.n	8003144 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80030fe:	2301      	movs	r3, #1
 8003100:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003102:	e014      	b.n	800312e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4a45      	ldr	r2, [pc, #276]	@ (800321c <ADC_ConversionStop+0x174>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d90d      	bls.n	8003128 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e074      	b.n	8003212 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	3301      	adds	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003138:	2b40      	cmp	r3, #64	@ 0x40
 800313a:	d1e3      	bne.n	8003104 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2240      	movs	r2, #64	@ 0x40
 8003142:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d014      	beq.n	8003174 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff f91a 	bl	8002388 <LL_ADC_REG_IsConversionOngoing>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f8d7 	bl	8002312 <LL_ADC_IsDisableOngoing>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d104      	bne.n	8003174 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff f8f6 	bl	8002360 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d014      	beq.n	80031a4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f929 	bl	80023d6 <LL_ADC_INJ_IsConversionOngoing>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00c      	beq.n	80031a4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f8bf 	bl	8002312 <LL_ADC_IsDisableOngoing>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d104      	bne.n	80031a4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff f905 	bl	80023ae <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d005      	beq.n	80031b6 <ADC_ConversionStop+0x10e>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d105      	bne.n	80031bc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80031b0:	230c      	movs	r3, #12
 80031b2:	617b      	str	r3, [r7, #20]
        break;
 80031b4:	e005      	b.n	80031c2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80031b6:	2308      	movs	r3, #8
 80031b8:	617b      	str	r3, [r7, #20]
        break;
 80031ba:	e002      	b.n	80031c2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80031bc:	2304      	movs	r3, #4
 80031be:	617b      	str	r3, [r7, #20]
        break;
 80031c0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80031c2:	f7fe fed5 	bl	8001f70 <HAL_GetTick>
 80031c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031c8:	e01b      	b.n	8003202 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80031ca:	f7fe fed1 	bl	8001f70 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d914      	bls.n	8003202 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00d      	beq.n	8003202 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ea:	f043 0210 	orr.w	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e007      	b.n	8003212 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1dc      	bne.n	80031ca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	a33fffff 	.word	0xa33fffff

08003220 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff f85b 	bl	80022ec <LL_ADC_IsEnabled>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d169      	bne.n	8003310 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	4b36      	ldr	r3, [pc, #216]	@ (800331c <ADC_Enable+0xfc>)
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324e:	f043 0210 	orr.w	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325a:	f043 0201 	orr.w	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e055      	b.n	8003312 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff f816 	bl	800229c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003270:	482b      	ldr	r0, [pc, #172]	@ (8003320 <ADC_Enable+0x100>)
 8003272:	f7fe fed3 	bl	800201c <LL_ADC_GetCommonPathInternalCh>
 8003276:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003278:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003280:	4b28      	ldr	r3, [pc, #160]	@ (8003324 <ADC_Enable+0x104>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	099b      	lsrs	r3, r3, #6
 8003286:	4a28      	ldr	r2, [pc, #160]	@ (8003328 <ADC_Enable+0x108>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	099b      	lsrs	r3, r3, #6
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800329a:	e002      	b.n	80032a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	3b01      	subs	r3, #1
 80032a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f9      	bne.n	800329c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032a8:	f7fe fe62 	bl	8001f70 <HAL_GetTick>
 80032ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ae:	e028      	b.n	8003302 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff f819 	bl	80022ec <LL_ADC_IsEnabled>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe ffe9 	bl	800229c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032ca:	f7fe fe51 	bl	8001f70 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d914      	bls.n	8003302 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d00d      	beq.n	8003302 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ea:	f043 0210 	orr.w	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f6:	f043 0201 	orr.w	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e007      	b.n	8003312 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d1cf      	bne.n	80032b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	8000003f 	.word	0x8000003f
 8003320:	50040300 	.word	0x50040300
 8003324:	20000000 	.word	0x20000000
 8003328:	053e2d63 	.word	0x053e2d63

0800332c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe ffea 	bl	8002312 <LL_ADC_IsDisableOngoing>
 800333e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe ffd1 	bl	80022ec <LL_ADC_IsEnabled>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d047      	beq.n	80033e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d144      	bne.n	80033e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 030d 	and.w	r3, r3, #13
 8003360:	2b01      	cmp	r3, #1
 8003362:	d10c      	bne.n	800337e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe ffab 	bl	80022c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2203      	movs	r2, #3
 8003374:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003376:	f7fe fdfb 	bl	8001f70 <HAL_GetTick>
 800337a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800337c:	e029      	b.n	80033d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003382:	f043 0210 	orr.w	r2, r3, #16
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e023      	b.n	80033e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800339a:	f7fe fde9 	bl	8001f70 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d914      	bls.n	80033d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ba:	f043 0210 	orr.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c6:	f043 0201 	orr.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e007      	b.n	80033e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1dc      	bne.n	800339a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <LL_ADC_StartCalibration>:
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80033fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003406:	4313      	orrs	r3, r2
 8003408:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	609a      	str	r2, [r3, #8]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_ADC_IsCalibrationOnGoing>:
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800342c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003430:	d101      	bne.n	8003436 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_ADCEx_Calibration_Start+0x1c>
 800345c:	2302      	movs	r3, #2
 800345e:	e04d      	b.n	80034fc <HAL_ADCEx_Calibration_Start+0xb8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff5f 	bl	800332c <ADC_Disable>
 800346e:	4603      	mov	r3, r0
 8003470:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d136      	bne.n	80034e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003480:	f023 0302 	bic.w	r3, r3, #2
 8003484:	f043 0202 	orr.w	r2, r3, #2
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6839      	ldr	r1, [r7, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff ffa9 	bl	80033ea <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003498:	e014      	b.n	80034c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3301      	adds	r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80034a6:	d30d      	bcc.n	80034c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ac:	f023 0312 	bic.w	r3, r3, #18
 80034b0:	f043 0210 	orr.w	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e01b      	b.n	80034fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ffa7 	bl	800341c <LL_ADC_IsCalibrationOnGoing>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e2      	bne.n	800349a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d8:	f023 0303 	bic.w	r3, r3, #3
 80034dc:	f043 0201 	orr.w	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80034e4:	e005      	b.n	80034f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ea:	f043 0210 	orr.w	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0ed      	b.n	80036f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe fb62 	bl	8001bec <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003538:	f7fe fd1a 	bl	8001f70 <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800353e:	e012      	b.n	8003566 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003540:	f7fe fd16 	bl	8001f70 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b0a      	cmp	r3, #10
 800354c:	d90b      	bls.n	8003566 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2205      	movs	r2, #5
 800355e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0c5      	b.n	80036f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0e5      	beq.n	8003540 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0202 	bic.w	r2, r2, #2
 8003582:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003584:	f7fe fcf4 	bl	8001f70 <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800358a:	e012      	b.n	80035b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800358c:	f7fe fcf0 	bl	8001f70 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b0a      	cmp	r3, #10
 8003598:	d90b      	bls.n	80035b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2205      	movs	r2, #5
 80035aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e09f      	b.n	80036f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e5      	bne.n	800358c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	7e1b      	ldrb	r3, [r3, #24]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d108      	bne.n	80035da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e007      	b.n	80035ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	7e5b      	ldrb	r3, [r3, #25]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d108      	bne.n	8003604 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	e007      	b.n	8003614 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003612:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	7e9b      	ldrb	r3, [r3, #26]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d108      	bne.n	800362e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0220 	orr.w	r2, r2, #32
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e007      	b.n	800363e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0220 	bic.w	r2, r2, #32
 800363c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	7edb      	ldrb	r3, [r3, #27]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d108      	bne.n	8003658 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0210 	bic.w	r2, r2, #16
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	e007      	b.n	8003668 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0210 	orr.w	r2, r2, #16
 8003666:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7f1b      	ldrb	r3, [r3, #28]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d108      	bne.n	8003682 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0208 	orr.w	r2, r2, #8
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e007      	b.n	8003692 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0208 	bic.w	r2, r2, #8
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	7f5b      	ldrb	r3, [r3, #29]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d108      	bne.n	80036ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0204 	orr.w	r2, r2, #4
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e007      	b.n	80036bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	ea42 0103 	orr.w	r1, r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	1e5a      	subs	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b087      	sub	sp, #28
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003710:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d003      	beq.n	8003720 <HAL_CAN_ConfigFilter+0x26>
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	2b02      	cmp	r3, #2
 800371c:	f040 80aa 	bne.w	8003874 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	2201      	movs	r2, #1
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	43db      	mvns	r3, r3
 800374a:	401a      	ands	r2, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d123      	bne.n	80037a2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	43db      	mvns	r3, r3
 8003764:	401a      	ands	r2, r3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800377c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3248      	adds	r2, #72	@ 0x48
 8003782:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003796:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003798:	6979      	ldr	r1, [r7, #20]
 800379a:	3348      	adds	r3, #72	@ 0x48
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	440b      	add	r3, r1
 80037a0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d122      	bne.n	80037f0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3248      	adds	r2, #72	@ 0x48
 80037d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037e6:	6979      	ldr	r1, [r7, #20]
 80037e8:	3348      	adds	r3, #72	@ 0x48
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	440b      	add	r3, r1
 80037ee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d109      	bne.n	800380c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	401a      	ands	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800380a:	e007      	b.n	800381c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	431a      	orrs	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	43db      	mvns	r3, r3
 800382e:	401a      	ands	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003836:	e007      	b.n	8003848 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	431a      	orrs	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	431a      	orrs	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003866:	f023 0201 	bic.w	r2, r3, #1
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	e006      	b.n	8003882 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d12e      	bne.n	8003900 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038ba:	f7fe fb59 	bl	8001f70 <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038c0:	e012      	b.n	80038e8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038c2:	f7fe fb55 	bl	8001f70 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b0a      	cmp	r3, #10
 80038ce:	d90b      	bls.n	80038e8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2205      	movs	r2, #5
 80038e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e012      	b.n	800390e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e5      	bne.n	80038c2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e006      	b.n	800390e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003916:	b480      	push	{r7}
 8003918:	b089      	sub	sp, #36	@ 0x24
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 3020 	ldrb.w	r3, [r3, #32]
 800392a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003934:	7ffb      	ldrb	r3, [r7, #31]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d003      	beq.n	8003942 <HAL_CAN_AddTxMessage+0x2c>
 800393a:	7ffb      	ldrb	r3, [r7, #31]
 800393c:	2b02      	cmp	r3, #2
 800393e:	f040 80ad 	bne.w	8003a9c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003952:	2b00      	cmp	r3, #0
 8003954:	d105      	bne.n	8003962 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8095 	beq.w	8003a8c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	0e1b      	lsrs	r3, r3, #24
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800396c:	2201      	movs	r2, #1
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	409a      	lsls	r2, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003988:	68f9      	ldr	r1, [r7, #12]
 800398a:	6809      	ldr	r1, [r1, #0]
 800398c:	431a      	orrs	r2, r3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3318      	adds	r3, #24
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	440b      	add	r3, r1
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	e00f      	b.n	80039ba <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039aa:	68f9      	ldr	r1, [r7, #12]
 80039ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80039ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	3318      	adds	r3, #24
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	440b      	add	r3, r1
 80039b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6819      	ldr	r1, [r3, #0]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3318      	adds	r3, #24
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	440b      	add	r3, r1
 80039ca:	3304      	adds	r3, #4
 80039cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	7d1b      	ldrb	r3, [r3, #20]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d111      	bne.n	80039fa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	3318      	adds	r3, #24
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	4413      	add	r3, r2
 80039e2:	3304      	adds	r3, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	6811      	ldr	r1, [r2, #0]
 80039ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	3318      	adds	r3, #24
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	440b      	add	r3, r1
 80039f6:	3304      	adds	r3, #4
 80039f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3307      	adds	r3, #7
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	061a      	lsls	r2, r3, #24
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3306      	adds	r3, #6
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	041b      	lsls	r3, r3, #16
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3305      	adds	r3, #5
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	4313      	orrs	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	3204      	adds	r2, #4
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	6811      	ldr	r1, [r2, #0]
 8003a22:	ea43 0200 	orr.w	r2, r3, r0
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	440b      	add	r3, r1
 8003a2c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003a30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3303      	adds	r3, #3
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	061a      	lsls	r2, r3, #24
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3301      	adds	r3, #1
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	7812      	ldrb	r2, [r2, #0]
 8003a52:	4610      	mov	r0, r2
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	6811      	ldr	r1, [r2, #0]
 8003a58:	ea43 0200 	orr.w	r2, r3, r0
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	440b      	add	r3, r1
 8003a62:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003a66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	3318      	adds	r3, #24
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	4413      	add	r3, r2
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	6811      	ldr	r1, [r2, #0]
 8003a7a:	f043 0201 	orr.w	r2, r3, #1
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	3318      	adds	r3, #24
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	440b      	add	r3, r1
 8003a86:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e00e      	b.n	8003aaa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e006      	b.n	8003aaa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
  }
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3724      	adds	r7, #36	@ 0x24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b087      	sub	sp, #28
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d003      	beq.n	8003ada <HAL_CAN_GetRxMessage+0x24>
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	f040 8103 	bne.w	8003ce0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10e      	bne.n	8003afe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e0f7      	b.n	8003cee <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d107      	bne.n	8003b1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0e8      	b.n	8003cee <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	331b      	adds	r3, #27
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	4413      	add	r3, r2
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0204 	and.w	r2, r3, #4
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10c      	bne.n	8003b54 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	331b      	adds	r3, #27
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	4413      	add	r3, r2
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	0d5b      	lsrs	r3, r3, #21
 8003b4a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	e00b      	b.n	8003b6c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	331b      	adds	r3, #27
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	4413      	add	r3, r2
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	08db      	lsrs	r3, r3, #3
 8003b64:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	331b      	adds	r3, #27
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	4413      	add	r3, r2
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0202 	and.w	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	331b      	adds	r3, #27
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3304      	adds	r3, #4
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	611a      	str	r2, [r3, #16]
 8003ba0:	e00b      	b.n	8003bba <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	331b      	adds	r3, #27
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	4413      	add	r3, r2
 8003bae:	3304      	adds	r3, #4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 020f 	and.w	r2, r3, #15
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	331b      	adds	r3, #27
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	331b      	adds	r3, #27
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	4413      	add	r3, r2
 8003bde:	3304      	adds	r3, #4
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	0c1b      	lsrs	r3, r3, #16
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0a1a      	lsrs	r2, r3, #8
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	0c1a      	lsrs	r2, r3, #16
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	3302      	adds	r3, #2
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	0e1a      	lsrs	r2, r3, #24
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	3303      	adds	r3, #3
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	3304      	adds	r3, #4
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	0a1a      	lsrs	r2, r3, #8
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	3305      	adds	r3, #5
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	0c1a      	lsrs	r2, r3, #16
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	3306      	adds	r3, #6
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	0e1a      	lsrs	r2, r3, #24
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	3307      	adds	r3, #7
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d108      	bne.n	8003ccc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0220 	orr.w	r2, r2, #32
 8003cc8:	60da      	str	r2, [r3, #12]
 8003cca:	e007      	b.n	8003cdc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0220 	orr.w	r2, r2, #32
 8003cda:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e006      	b.n	8003cee <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d0a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d002      	beq.n	8003d18 <HAL_CAN_ActivateNotification+0x1e>
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d109      	bne.n	8003d2c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6959      	ldr	r1, [r3, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e006      	b.n	8003d3a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
  }
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b08a      	sub	sp, #40	@ 0x28
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d07c      	beq.n	8003e86 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d023      	beq.n	8003dde <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f983 	bl	80040b4 <HAL_CAN_TxMailbox0CompleteCallback>
 8003dae:	e016      	b.n	8003dde <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc2:	e00c      	b.n	8003dde <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd6:	e002      	b.n	8003dde <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f989 	bl	80040f0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d024      	beq.n	8003e32 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003df0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f963 	bl	80040c8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003e02:	e016      	b.n	8003e32 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e16:	e00c      	b.n	8003e32 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e2a:	e002      	b.n	8003e32 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f969 	bl	8004104 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d024      	beq.n	8003e86 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f943 	bl	80040dc <HAL_CAN_TxMailbox2CompleteCallback>
 8003e56:	e016      	b.n	8003e86 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d004      	beq.n	8003e6c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6a:	e00c      	b.n	8003e86 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e7e:	e002      	b.n	8003e86 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f949 	bl	8004118 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00c      	beq.n	8003eaa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2210      	movs	r2, #16
 8003ea8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00b      	beq.n	8003ecc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d006      	beq.n	8003ecc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f930 	bl	800412c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7fd fb87 	bl	80015f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00c      	beq.n	8003f0e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00b      	beq.n	8003f30 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d006      	beq.n	8003f30 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2208      	movs	r2, #8
 8003f28:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f912 	bl	8004154 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8f9 	bl	8004140 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d006      	beq.n	8003f70 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2210      	movs	r2, #16
 8003f68:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8fc 	bl	8004168 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d006      	beq.n	8003f92 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2208      	movs	r2, #8
 8003f8a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f8f5 	bl	800417c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d07b      	beq.n	8004094 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d072      	beq.n	800408c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004000:	2b00      	cmp	r3, #0
 8004002:	d043      	beq.n	800408c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800400a:	2b00      	cmp	r3, #0
 800400c:	d03e      	beq.n	800408c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004014:	2b60      	cmp	r3, #96	@ 0x60
 8004016:	d02b      	beq.n	8004070 <HAL_CAN_IRQHandler+0x32a>
 8004018:	2b60      	cmp	r3, #96	@ 0x60
 800401a:	d82e      	bhi.n	800407a <HAL_CAN_IRQHandler+0x334>
 800401c:	2b50      	cmp	r3, #80	@ 0x50
 800401e:	d022      	beq.n	8004066 <HAL_CAN_IRQHandler+0x320>
 8004020:	2b50      	cmp	r3, #80	@ 0x50
 8004022:	d82a      	bhi.n	800407a <HAL_CAN_IRQHandler+0x334>
 8004024:	2b40      	cmp	r3, #64	@ 0x40
 8004026:	d019      	beq.n	800405c <HAL_CAN_IRQHandler+0x316>
 8004028:	2b40      	cmp	r3, #64	@ 0x40
 800402a:	d826      	bhi.n	800407a <HAL_CAN_IRQHandler+0x334>
 800402c:	2b30      	cmp	r3, #48	@ 0x30
 800402e:	d010      	beq.n	8004052 <HAL_CAN_IRQHandler+0x30c>
 8004030:	2b30      	cmp	r3, #48	@ 0x30
 8004032:	d822      	bhi.n	800407a <HAL_CAN_IRQHandler+0x334>
 8004034:	2b10      	cmp	r3, #16
 8004036:	d002      	beq.n	800403e <HAL_CAN_IRQHandler+0x2f8>
 8004038:	2b20      	cmp	r3, #32
 800403a:	d005      	beq.n	8004048 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800403c:	e01d      	b.n	800407a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	f043 0308 	orr.w	r3, r3, #8
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004046:	e019      	b.n	800407c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	f043 0310 	orr.w	r3, r3, #16
 800404e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004050:	e014      	b.n	800407c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	f043 0320 	orr.w	r3, r3, #32
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800405a:	e00f      	b.n	800407c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004064:	e00a      	b.n	800407c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800406e:	e005      	b.n	800407c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004076:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004078:	e000      	b.n	800407c <HAL_CAN_IRQHandler+0x336>
            break;
 800407a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800408a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2204      	movs	r2, #4
 8004092:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f872 	bl	8004190 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80040ac:	bf00      	nop
 80040ae:	3728      	adds	r7, #40	@ 0x28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041b4:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <__NVIC_SetPriorityGrouping+0x44>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041c0:	4013      	ands	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041d6:	4a04      	ldr	r2, [pc, #16]	@ (80041e8 <__NVIC_SetPriorityGrouping+0x44>)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	60d3      	str	r3, [r2, #12]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f0:	4b04      	ldr	r3, [pc, #16]	@ (8004204 <__NVIC_GetPriorityGrouping+0x18>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	f003 0307 	and.w	r3, r3, #7
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	e000ed00 	.word	0xe000ed00

08004208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004216:	2b00      	cmp	r3, #0
 8004218:	db0b      	blt.n	8004232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800421a:	79fb      	ldrb	r3, [r7, #7]
 800421c:	f003 021f 	and.w	r2, r3, #31
 8004220:	4907      	ldr	r1, [pc, #28]	@ (8004240 <__NVIC_EnableIRQ+0x38>)
 8004222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2001      	movs	r0, #1
 800422a:	fa00 f202 	lsl.w	r2, r0, r2
 800422e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000e100 	.word	0xe000e100

08004244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	6039      	str	r1, [r7, #0]
 800424e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004254:	2b00      	cmp	r3, #0
 8004256:	db0a      	blt.n	800426e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	490c      	ldr	r1, [pc, #48]	@ (8004290 <__NVIC_SetPriority+0x4c>)
 800425e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004262:	0112      	lsls	r2, r2, #4
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	440b      	add	r3, r1
 8004268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800426c:	e00a      	b.n	8004284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4908      	ldr	r1, [pc, #32]	@ (8004294 <__NVIC_SetPriority+0x50>)
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	3b04      	subs	r3, #4
 800427c:	0112      	lsls	r2, r2, #4
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	440b      	add	r3, r1
 8004282:	761a      	strb	r2, [r3, #24]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000e100 	.word	0xe000e100
 8004294:	e000ed00 	.word	0xe000ed00

08004298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004298:	b480      	push	{r7}
 800429a:	b089      	sub	sp, #36	@ 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f1c3 0307 	rsb	r3, r3, #7
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	bf28      	it	cs
 80042b6:	2304      	movcs	r3, #4
 80042b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3304      	adds	r3, #4
 80042be:	2b06      	cmp	r3, #6
 80042c0:	d902      	bls.n	80042c8 <NVIC_EncodePriority+0x30>
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3b03      	subs	r3, #3
 80042c6:	e000      	b.n	80042ca <NVIC_EncodePriority+0x32>
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042cc:	f04f 32ff 	mov.w	r2, #4294967295
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43da      	mvns	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	401a      	ands	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e0:	f04f 31ff 	mov.w	r1, #4294967295
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ea:	43d9      	mvns	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f0:	4313      	orrs	r3, r2
         );
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3724      	adds	r7, #36	@ 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3b01      	subs	r3, #1
 800430c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004310:	d301      	bcc.n	8004316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004312:	2301      	movs	r3, #1
 8004314:	e00f      	b.n	8004336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004316:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <SysTick_Config+0x40>)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800431e:	210f      	movs	r1, #15
 8004320:	f04f 30ff 	mov.w	r0, #4294967295
 8004324:	f7ff ff8e 	bl	8004244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004328:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <SysTick_Config+0x40>)
 800432a:	2200      	movs	r2, #0
 800432c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800432e:	4b04      	ldr	r3, [pc, #16]	@ (8004340 <SysTick_Config+0x40>)
 8004330:	2207      	movs	r2, #7
 8004332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	e000e010 	.word	0xe000e010

08004344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ff29 	bl	80041a4 <__NVIC_SetPriorityGrouping>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b086      	sub	sp, #24
 800435e:	af00      	add	r7, sp, #0
 8004360:	4603      	mov	r3, r0
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800436c:	f7ff ff3e 	bl	80041ec <__NVIC_GetPriorityGrouping>
 8004370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	6978      	ldr	r0, [r7, #20]
 8004378:	f7ff ff8e 	bl	8004298 <NVIC_EncodePriority>
 800437c:	4602      	mov	r2, r0
 800437e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff ff5d 	bl	8004244 <__NVIC_SetPriority>
}
 800438a:	bf00      	nop
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	4603      	mov	r3, r0
 800439a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800439c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff31 	bl	8004208 <__NVIC_EnableIRQ>
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ffa2 	bl	8004300 <SysTick_Config>
 80043bc:	4603      	mov	r3, r0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e054      	b.n	8004484 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	7f5b      	ldrb	r3, [r3, #29]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd fc52 	bl	8001c94 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	791b      	ldrb	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10c      	bne.n	8004418 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a22      	ldr	r2, [pc, #136]	@ (800448c <HAL_CRC_Init+0xc4>)
 8004404:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0218 	bic.w	r2, r2, #24
 8004414:	609a      	str	r2, [r3, #8]
 8004416:	e00c      	b.n	8004432 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6899      	ldr	r1, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	461a      	mov	r2, r3
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f834 	bl	8004490 <HAL_CRCEx_Polynomial_Set>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e028      	b.n	8004484 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	795b      	ldrb	r3, [r3, #5]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d105      	bne.n	8004446 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f04f 32ff 	mov.w	r2, #4294967295
 8004442:	611a      	str	r2, [r3, #16]
 8004444:	e004      	b.n	8004450 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6912      	ldr	r2, [r2, #16]
 800444e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	04c11db7 	.word	0x04c11db7

08004490 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80044a0:	231f      	movs	r3, #31
 80044a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d102      	bne.n	80044b4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	75fb      	strb	r3, [r7, #23]
 80044b2:	e063      	b.n	800457c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80044b4:	bf00      	nop
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1e5a      	subs	r2, r3, #1
 80044ba:	613a      	str	r2, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <HAL_CRCEx_Polynomial_Set+0x44>
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b18      	cmp	r3, #24
 80044d8:	d846      	bhi.n	8004568 <HAL_CRCEx_Polynomial_Set+0xd8>
 80044da:	a201      	add	r2, pc, #4	@ (adr r2, 80044e0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	0800456f 	.word	0x0800456f
 80044e4:	08004569 	.word	0x08004569
 80044e8:	08004569 	.word	0x08004569
 80044ec:	08004569 	.word	0x08004569
 80044f0:	08004569 	.word	0x08004569
 80044f4:	08004569 	.word	0x08004569
 80044f8:	08004569 	.word	0x08004569
 80044fc:	08004569 	.word	0x08004569
 8004500:	0800455d 	.word	0x0800455d
 8004504:	08004569 	.word	0x08004569
 8004508:	08004569 	.word	0x08004569
 800450c:	08004569 	.word	0x08004569
 8004510:	08004569 	.word	0x08004569
 8004514:	08004569 	.word	0x08004569
 8004518:	08004569 	.word	0x08004569
 800451c:	08004569 	.word	0x08004569
 8004520:	08004551 	.word	0x08004551
 8004524:	08004569 	.word	0x08004569
 8004528:	08004569 	.word	0x08004569
 800452c:	08004569 	.word	0x08004569
 8004530:	08004569 	.word	0x08004569
 8004534:	08004569 	.word	0x08004569
 8004538:	08004569 	.word	0x08004569
 800453c:	08004569 	.word	0x08004569
 8004540:	08004545 	.word	0x08004545
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2b06      	cmp	r3, #6
 8004548:	d913      	bls.n	8004572 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800454e:	e010      	b.n	8004572 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b07      	cmp	r3, #7
 8004554:	d90f      	bls.n	8004576 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800455a:	e00c      	b.n	8004576 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	d90b      	bls.n	800457a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004566:	e008      	b.n	800457a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]
        break;
 800456c:	e006      	b.n	800457c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800456e:	bf00      	nop
 8004570:	e004      	b.n	800457c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004572:	bf00      	nop
 8004574:	e002      	b.n	800457c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004576:	bf00      	nop
 8004578:	e000      	b.n	800457c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800457a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10d      	bne.n	800459e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f023 0118 	bic.w	r1, r3, #24
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	430a      	orrs	r2, r1
 800459c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800459e:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ba:	e148      	b.n	800484e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	2101      	movs	r1, #1
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	4013      	ands	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 813a 	beq.w	8004848 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d005      	beq.n	80045ec <HAL_GPIO_Init+0x40>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d130      	bne.n	800464e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	2203      	movs	r2, #3
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004622:	2201      	movs	r2, #1
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 0201 	and.w	r2, r3, #1
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b03      	cmp	r3, #3
 8004658:	d017      	beq.n	800468a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	2203      	movs	r2, #3
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d123      	bne.n	80046de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	08da      	lsrs	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3208      	adds	r2, #8
 800469e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	220f      	movs	r2, #15
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43db      	mvns	r3, r3
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4013      	ands	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	08da      	lsrs	r2, r3, #3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3208      	adds	r2, #8
 80046d8:	6939      	ldr	r1, [r7, #16]
 80046da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	2203      	movs	r2, #3
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4013      	ands	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0203 	and.w	r2, r3, #3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 8094 	beq.w	8004848 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004720:	4b52      	ldr	r3, [pc, #328]	@ (800486c <HAL_GPIO_Init+0x2c0>)
 8004722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004724:	4a51      	ldr	r2, [pc, #324]	@ (800486c <HAL_GPIO_Init+0x2c0>)
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	6613      	str	r3, [r2, #96]	@ 0x60
 800472c:	4b4f      	ldr	r3, [pc, #316]	@ (800486c <HAL_GPIO_Init+0x2c0>)
 800472e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004738:	4a4d      	ldr	r2, [pc, #308]	@ (8004870 <HAL_GPIO_Init+0x2c4>)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	3302      	adds	r3, #2
 8004740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	220f      	movs	r2, #15
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004762:	d00d      	beq.n	8004780 <HAL_GPIO_Init+0x1d4>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a43      	ldr	r2, [pc, #268]	@ (8004874 <HAL_GPIO_Init+0x2c8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d007      	beq.n	800477c <HAL_GPIO_Init+0x1d0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a42      	ldr	r2, [pc, #264]	@ (8004878 <HAL_GPIO_Init+0x2cc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d101      	bne.n	8004778 <HAL_GPIO_Init+0x1cc>
 8004774:	2302      	movs	r3, #2
 8004776:	e004      	b.n	8004782 <HAL_GPIO_Init+0x1d6>
 8004778:	2307      	movs	r3, #7
 800477a:	e002      	b.n	8004782 <HAL_GPIO_Init+0x1d6>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_GPIO_Init+0x1d6>
 8004780:	2300      	movs	r3, #0
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	f002 0203 	and.w	r2, r2, #3
 8004788:	0092      	lsls	r2, r2, #2
 800478a:	4093      	lsls	r3, r2
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004792:	4937      	ldr	r1, [pc, #220]	@ (8004870 <HAL_GPIO_Init+0x2c4>)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047a0:	4b36      	ldr	r3, [pc, #216]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4013      	ands	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047c4:	4a2d      	ldr	r2, [pc, #180]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047ca:	4b2c      	ldr	r3, [pc, #176]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047ee:	4a23      	ldr	r2, [pc, #140]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047f4:	4b21      	ldr	r3, [pc, #132]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4013      	ands	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004818:	4a18      	ldr	r2, [pc, #96]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800481e:	4b17      	ldr	r3, [pc, #92]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	43db      	mvns	r3, r3
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004842:	4a0e      	ldr	r2, [pc, #56]	@ (800487c <HAL_GPIO_Init+0x2d0>)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	3301      	adds	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	f47f aeaf 	bne.w	80045bc <HAL_GPIO_Init+0x10>
  }
}
 800485e:	bf00      	nop
 8004860:	bf00      	nop
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	40021000 	.word	0x40021000
 8004870:	40010000 	.word	0x40010000
 8004874:	48000400 	.word	0x48000400
 8004878:	48000800 	.word	0x48000800
 800487c:	40010400 	.word	0x40010400

08004880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]
 800488c:	4613      	mov	r3, r2
 800488e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004890:	787b      	ldrb	r3, [r7, #1]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800489c:	e002      	b.n	80048a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e08d      	b.n	80049de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fd f9fc 	bl	8001cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2224      	movs	r2, #36	@ 0x24
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0201 	bic.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004900:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004910:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d107      	bne.n	800492a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	e006      	b.n	8004938 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004936:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d108      	bne.n	8004952 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800494e:	605a      	str	r2, [r3, #4]
 8004950:	e007      	b.n	8004962 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004960:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004974:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004984:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69d9      	ldr	r1, [r3, #28]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1a      	ldr	r2, [r3, #32]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	4608      	mov	r0, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	461a      	mov	r2, r3
 80049f6:	4603      	mov	r3, r0
 80049f8:	817b      	strh	r3, [r7, #10]
 80049fa:	460b      	mov	r3, r1
 80049fc:	813b      	strh	r3, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	f040 80f9 	bne.w	8004c02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_I2C_Mem_Write+0x34>
 8004a16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d105      	bne.n	8004a28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0ed      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_I2C_Mem_Write+0x4e>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e0e6      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a3e:	f7fd fa97 	bl	8001f70 <HAL_GetTick>
 8004a42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	2319      	movs	r3, #25
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fac3 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e0d1      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2221      	movs	r2, #33	@ 0x21
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2240      	movs	r2, #64	@ 0x40
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a3a      	ldr	r2, [r7, #32]
 8004a7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a88:	88f8      	ldrh	r0, [r7, #6]
 8004a8a:	893a      	ldrh	r2, [r7, #8]
 8004a8c:	8979      	ldrh	r1, [r7, #10]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	4603      	mov	r3, r0
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f9d3 	bl	8004e44 <I2C_RequestMemoryWrite>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0a9      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2bff      	cmp	r3, #255	@ 0xff
 8004ab8:	d90e      	bls.n	8004ad8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22ff      	movs	r2, #255	@ 0xff
 8004abe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	8979      	ldrh	r1, [r7, #10]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fc47 	bl	8005364 <I2C_TransferConfig>
 8004ad6:	e00f      	b.n	8004af8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	8979      	ldrh	r1, [r7, #10]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fc36 	bl	8005364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fac6 	bl	800508e <I2C_WaitOnTXISFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e07b      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d034      	beq.n	8004bb0 <HAL_I2C_Mem_Write+0x1c8>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d130      	bne.n	8004bb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b54:	2200      	movs	r2, #0
 8004b56:	2180      	movs	r1, #128	@ 0x80
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fa3f 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e04d      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2bff      	cmp	r3, #255	@ 0xff
 8004b70:	d90e      	bls.n	8004b90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	22ff      	movs	r2, #255	@ 0xff
 8004b76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	8979      	ldrh	r1, [r7, #10]
 8004b80:	2300      	movs	r3, #0
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 fbeb 	bl	8005364 <I2C_TransferConfig>
 8004b8e:	e00f      	b.n	8004bb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	8979      	ldrh	r1, [r7, #10]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 fbda 	bl	8005364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d19e      	bne.n	8004af8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 faac 	bl	800511c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e01a      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4b0a      	ldr	r3, [pc, #40]	@ (8004c0c <HAL_I2C_Mem_Write+0x224>)
 8004be2:	400b      	ands	r3, r1
 8004be4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e000      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	fe00e800 	.word	0xfe00e800

08004c10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	817b      	strh	r3, [r7, #10]
 8004c22:	460b      	mov	r3, r1
 8004c24:	813b      	strh	r3, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	f040 80fd 	bne.w	8004e32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_I2C_Mem_Read+0x34>
 8004c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0f1      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_I2C_Mem_Read+0x4e>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e0ea      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c66:	f7fd f983 	bl	8001f70 <HAL_GetTick>
 8004c6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	2319      	movs	r3, #25
 8004c72:	2201      	movs	r2, #1
 8004c74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f9af 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0d5      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2222      	movs	r2, #34	@ 0x22
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2240      	movs	r2, #64	@ 0x40
 8004c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a3a      	ldr	r2, [r7, #32]
 8004ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cb0:	88f8      	ldrh	r0, [r7, #6]
 8004cb2:	893a      	ldrh	r2, [r7, #8]
 8004cb4:	8979      	ldrh	r1, [r7, #10]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f913 	bl	8004eec <I2C_RequestMemoryRead>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0ad      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2bff      	cmp	r3, #255	@ 0xff
 8004ce0:	d90e      	bls.n	8004d00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	8979      	ldrh	r1, [r7, #10]
 8004cf0:	4b52      	ldr	r3, [pc, #328]	@ (8004e3c <HAL_I2C_Mem_Read+0x22c>)
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fb33 	bl	8005364 <I2C_TransferConfig>
 8004cfe:	e00f      	b.n	8004d20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	8979      	ldrh	r1, [r7, #10]
 8004d12:	4b4a      	ldr	r3, [pc, #296]	@ (8004e3c <HAL_I2C_Mem_Read+0x22c>)
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fb22 	bl	8005364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d26:	2200      	movs	r2, #0
 8004d28:	2104      	movs	r1, #4
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f956 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e07c      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d034      	beq.n	8004de0 <HAL_I2C_Mem_Read+0x1d0>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d130      	bne.n	8004de0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	2200      	movs	r2, #0
 8004d86:	2180      	movs	r1, #128	@ 0x80
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f927 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e04d      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2bff      	cmp	r3, #255	@ 0xff
 8004da0:	d90e      	bls.n	8004dc0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	8979      	ldrh	r1, [r7, #10]
 8004db0:	2300      	movs	r3, #0
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fad3 	bl	8005364 <I2C_TransferConfig>
 8004dbe:	e00f      	b.n	8004de0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	8979      	ldrh	r1, [r7, #10]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fac2 	bl	8005364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d19a      	bne.n	8004d20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f994 	bl	800511c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e01a      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2220      	movs	r2, #32
 8004e04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6859      	ldr	r1, [r3, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <HAL_I2C_Mem_Read+0x230>)
 8004e12:	400b      	ands	r3, r1
 8004e14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e000      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
  }
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	80002400 	.word	0x80002400
 8004e40:	fe00e800 	.word	0xfe00e800

08004e44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	461a      	mov	r2, r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	817b      	strh	r3, [r7, #10]
 8004e56:	460b      	mov	r3, r1
 8004e58:	813b      	strh	r3, [r7, #8]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	8979      	ldrh	r1, [r7, #10]
 8004e64:	4b20      	ldr	r3, [pc, #128]	@ (8004ee8 <I2C_RequestMemoryWrite+0xa4>)
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fa79 	bl	8005364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e72:	69fa      	ldr	r2, [r7, #28]
 8004e74:	69b9      	ldr	r1, [r7, #24]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f909 	bl	800508e <I2C_WaitOnTXISFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e02c      	b.n	8004ee0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d105      	bne.n	8004e98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e8c:	893b      	ldrh	r3, [r7, #8]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e96:	e015      	b.n	8004ec4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e98:	893b      	ldrh	r3, [r7, #8]
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	69b9      	ldr	r1, [r7, #24]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f8ef 	bl	800508e <I2C_WaitOnTXISFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e012      	b.n	8004ee0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004eba:	893b      	ldrh	r3, [r7, #8]
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2180      	movs	r1, #128	@ 0x80
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f884 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	80002000 	.word	0x80002000

08004eec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4603      	mov	r3, r0
 8004efc:	817b      	strh	r3, [r7, #10]
 8004efe:	460b      	mov	r3, r1
 8004f00:	813b      	strh	r3, [r7, #8]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	8979      	ldrh	r1, [r7, #10]
 8004f0c:	4b20      	ldr	r3, [pc, #128]	@ (8004f90 <I2C_RequestMemoryRead+0xa4>)
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	2300      	movs	r3, #0
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fa26 	bl	8005364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	69b9      	ldr	r1, [r7, #24]
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f8b6 	bl	800508e <I2C_WaitOnTXISFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e02c      	b.n	8004f86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f2c:	88fb      	ldrh	r3, [r7, #6]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d105      	bne.n	8004f3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f32:	893b      	ldrh	r3, [r7, #8]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f3c:	e015      	b.n	8004f6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f3e:	893b      	ldrh	r3, [r7, #8]
 8004f40:	0a1b      	lsrs	r3, r3, #8
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	69b9      	ldr	r1, [r7, #24]
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f89c 	bl	800508e <I2C_WaitOnTXISFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e012      	b.n	8004f86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f60:	893b      	ldrh	r3, [r7, #8]
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2200      	movs	r2, #0
 8004f72:	2140      	movs	r1, #64	@ 0x40
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f831 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	80002000 	.word	0x80002000

08004f94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d103      	bne.n	8004fb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d007      	beq.n	8004fd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	619a      	str	r2, [r3, #24]
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fec:	e03b      	b.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f8d6 	bl	80051a4 <I2C_IsErrorOccurred>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e041      	b.n	8005086 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d02d      	beq.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500a:	f7fc ffb1 	bl	8001f70 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d302      	bcc.n	8005020 <I2C_WaitOnFlagUntilTimeout+0x44>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d122      	bne.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4013      	ands	r3, r2
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	429a      	cmp	r2, r3
 800502e:	bf0c      	ite	eq
 8005030:	2301      	moveq	r3, #1
 8005032:	2300      	movne	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	429a      	cmp	r2, r3
 800503c:	d113      	bne.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e00f      	b.n	8005086 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699a      	ldr	r2, [r3, #24]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	429a      	cmp	r2, r3
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	429a      	cmp	r2, r3
 8005082:	d0b4      	beq.n	8004fee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800509a:	e033      	b.n	8005104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f87f 	bl	80051a4 <I2C_IsErrorOccurred>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e031      	b.n	8005114 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d025      	beq.n	8005104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b8:	f7fc ff5a 	bl	8001f70 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d302      	bcc.n	80050ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d11a      	bne.n	8005104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d013      	beq.n	8005104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e0:	f043 0220 	orr.w	r2, r3, #32
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e007      	b.n	8005114 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b02      	cmp	r3, #2
 8005110:	d1c4      	bne.n	800509c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005128:	e02f      	b.n	800518a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f838 	bl	80051a4 <I2C_IsErrorOccurred>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e02d      	b.n	800519a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513e:	f7fc ff17 	bl	8001f70 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d11a      	bne.n	800518a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b20      	cmp	r3, #32
 8005160:	d013      	beq.n	800518a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e007      	b.n	800519a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b20      	cmp	r3, #32
 8005196:	d1c8      	bne.n	800512a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	@ 0x28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d068      	beq.n	80052a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2210      	movs	r2, #16
 80051d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051d8:	e049      	b.n	800526e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d045      	beq.n	800526e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051e2:	f7fc fec5 	bl	8001f70 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <I2C_IsErrorOccurred+0x54>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d13a      	bne.n	800526e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005202:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800520a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800521a:	d121      	bne.n	8005260 <I2C_IsErrorOccurred+0xbc>
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005222:	d01d      	beq.n	8005260 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005224:	7cfb      	ldrb	r3, [r7, #19]
 8005226:	2b20      	cmp	r3, #32
 8005228:	d01a      	beq.n	8005260 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005238:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800523a:	f7fc fe99 	bl	8001f70 <HAL_GetTick>
 800523e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005240:	e00e      	b.n	8005260 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005242:	f7fc fe95 	bl	8001f70 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b19      	cmp	r3, #25
 800524e:	d907      	bls.n	8005260 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	f043 0320 	orr.w	r3, r3, #32
 8005256:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800525e:	e006      	b.n	800526e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b20      	cmp	r3, #32
 800526c:	d1e9      	bne.n	8005242 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b20      	cmp	r3, #32
 800527a:	d003      	beq.n	8005284 <I2C_IsErrorOccurred+0xe0>
 800527c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0aa      	beq.n	80051da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2220      	movs	r2, #32
 8005292:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	f043 0304 	orr.w	r3, r3, #4
 800529a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	f043 0308 	orr.w	r3, r3, #8
 80052dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	f043 0302 	orr.w	r3, r3, #2
 80052fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005308:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01c      	beq.n	8005352 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff fe3b 	bl	8004f94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b0d      	ldr	r3, [pc, #52]	@ (8005360 <I2C_IsErrorOccurred+0x1bc>)
 800532a:	400b      	ands	r3, r1
 800532c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	431a      	orrs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005352:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005356:	4618      	mov	r0, r3
 8005358:	3728      	adds	r7, #40	@ 0x28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	fe00e800 	.word	0xfe00e800

08005364 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	817b      	strh	r3, [r7, #10]
 8005372:	4613      	mov	r3, r2
 8005374:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005376:	897b      	ldrh	r3, [r7, #10]
 8005378:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800537c:	7a7b      	ldrb	r3, [r7, #9]
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005384:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	4313      	orrs	r3, r2
 800538e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005392:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	0d5b      	lsrs	r3, r3, #21
 800539e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80053a2:	4b08      	ldr	r3, [pc, #32]	@ (80053c4 <I2C_TransferConfig+0x60>)
 80053a4:	430b      	orrs	r3, r1
 80053a6:	43db      	mvns	r3, r3
 80053a8:	ea02 0103 	and.w	r1, r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	03ff63ff 	.word	0x03ff63ff

080053c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b20      	cmp	r3, #32
 80053dc:	d138      	bne.n	8005450 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e032      	b.n	8005452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2224      	movs	r2, #36	@ 0x24
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800541a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6819      	ldr	r1, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e000      	b.n	8005452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005450:	2302      	movs	r3, #2
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b20      	cmp	r3, #32
 8005472:	d139      	bne.n	80054e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800547e:	2302      	movs	r3, #2
 8005480:	e033      	b.n	80054ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2224      	movs	r2, #36	@ 0x24
 800548e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80054b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e000      	b.n	80054ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
  }
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80054fc:	4b04      	ldr	r3, [pc, #16]	@ (8005510 <HAL_PWREx_GetVoltageRange+0x18>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005504:	4618      	mov	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40007000 	.word	0x40007000

08005514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005522:	d130      	bne.n	8005586 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005524:	4b23      	ldr	r3, [pc, #140]	@ (80055b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800552c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005530:	d038      	beq.n	80055a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005532:	4b20      	ldr	r3, [pc, #128]	@ (80055b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800553a:	4a1e      	ldr	r2, [pc, #120]	@ (80055b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800553c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005540:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005542:	4b1d      	ldr	r3, [pc, #116]	@ (80055b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2232      	movs	r2, #50	@ 0x32
 8005548:	fb02 f303 	mul.w	r3, r2, r3
 800554c:	4a1b      	ldr	r2, [pc, #108]	@ (80055bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	0c9b      	lsrs	r3, r3, #18
 8005554:	3301      	adds	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005558:	e002      	b.n	8005560 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3b01      	subs	r3, #1
 800555e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005560:	4b14      	ldr	r3, [pc, #80]	@ (80055b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800556c:	d102      	bne.n	8005574 <HAL_PWREx_ControlVoltageScaling+0x60>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f2      	bne.n	800555a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005574:	4b0f      	ldr	r3, [pc, #60]	@ (80055b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800557c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005580:	d110      	bne.n	80055a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e00f      	b.n	80055a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800558e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005592:	d007      	beq.n	80055a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005594:	4b07      	ldr	r3, [pc, #28]	@ (80055b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800559c:	4a05      	ldr	r2, [pc, #20]	@ (80055b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800559e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40007000 	.word	0x40007000
 80055b8:	20000000 	.word	0x20000000
 80055bc:	431bde83 	.word	0x431bde83

080055c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	f000 bc02 	b.w	8005dd8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055d4:	4b96      	ldr	r3, [pc, #600]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 030c 	and.w	r3, r3, #12
 80055dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055de:	4b94      	ldr	r3, [pc, #592]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 80e4 	beq.w	80057be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <HAL_RCC_OscConfig+0x4c>
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2b0c      	cmp	r3, #12
 8005600:	f040 808b 	bne.w	800571a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2b01      	cmp	r3, #1
 8005608:	f040 8087 	bne.w	800571a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800560c:	4b88      	ldr	r3, [pc, #544]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_RCC_OscConfig+0x64>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e3d9      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1a      	ldr	r2, [r3, #32]
 8005628:	4b81      	ldr	r3, [pc, #516]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <HAL_RCC_OscConfig+0x7e>
 8005634:	4b7e      	ldr	r3, [pc, #504]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800563c:	e005      	b.n	800564a <HAL_RCC_OscConfig+0x8a>
 800563e:	4b7c      	ldr	r3, [pc, #496]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800564a:	4293      	cmp	r3, r2
 800564c:	d223      	bcs.n	8005696 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fd54 	bl	8006100 <RCC_SetFlashLatencyFromMSIRange>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e3ba      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005662:	4b73      	ldr	r3, [pc, #460]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a72      	ldr	r2, [pc, #456]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005668:	f043 0308 	orr.w	r3, r3, #8
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4b70      	ldr	r3, [pc, #448]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	496d      	ldr	r1, [pc, #436]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800567c:	4313      	orrs	r3, r2
 800567e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005680:	4b6b      	ldr	r3, [pc, #428]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	4968      	ldr	r1, [pc, #416]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005690:	4313      	orrs	r3, r2
 8005692:	604b      	str	r3, [r1, #4]
 8005694:	e025      	b.n	80056e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005696:	4b66      	ldr	r3, [pc, #408]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a65      	ldr	r2, [pc, #404]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800569c:	f043 0308 	orr.w	r3, r3, #8
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	4b63      	ldr	r3, [pc, #396]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	4960      	ldr	r1, [pc, #384]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	495b      	ldr	r1, [pc, #364]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fd14 	bl	8006100 <RCC_SetFlashLatencyFromMSIRange>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e37a      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056e2:	f000 fc81 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 80056e6:	4602      	mov	r2, r0
 80056e8:	4b51      	ldr	r3, [pc, #324]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	091b      	lsrs	r3, r3, #4
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	4950      	ldr	r1, [pc, #320]	@ (8005834 <HAL_RCC_OscConfig+0x274>)
 80056f4:	5ccb      	ldrb	r3, [r1, r3]
 80056f6:	f003 031f 	and.w	r3, r3, #31
 80056fa:	fa22 f303 	lsr.w	r3, r2, r3
 80056fe:	4a4e      	ldr	r2, [pc, #312]	@ (8005838 <HAL_RCC_OscConfig+0x278>)
 8005700:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005702:	4b4e      	ldr	r3, [pc, #312]	@ (800583c <HAL_RCC_OscConfig+0x27c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f7fc fbe2 	bl	8001ed0 <HAL_InitTick>
 800570c:	4603      	mov	r3, r0
 800570e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d052      	beq.n	80057bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	e35e      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d032      	beq.n	8005788 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005722:	4b43      	ldr	r3, [pc, #268]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a42      	ldr	r2, [pc, #264]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800572e:	f7fc fc1f 	bl	8001f70 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005736:	f7fc fc1b 	bl	8001f70 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e347      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005748:	4b39      	ldr	r3, [pc, #228]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005754:	4b36      	ldr	r3, [pc, #216]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a35      	ldr	r2, [pc, #212]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800575a:	f043 0308 	orr.w	r3, r3, #8
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	4b33      	ldr	r3, [pc, #204]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	4930      	ldr	r1, [pc, #192]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800576e:	4313      	orrs	r3, r2
 8005770:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005772:	4b2f      	ldr	r3, [pc, #188]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	492b      	ldr	r1, [pc, #172]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005782:	4313      	orrs	r3, r2
 8005784:	604b      	str	r3, [r1, #4]
 8005786:	e01a      	b.n	80057be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005788:	4b29      	ldr	r3, [pc, #164]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a28      	ldr	r2, [pc, #160]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005794:	f7fc fbec 	bl	8001f70 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800579c:	f7fc fbe8 	bl	8001f70 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e314      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057ae:	4b20      	ldr	r3, [pc, #128]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f0      	bne.n	800579c <HAL_RCC_OscConfig+0x1dc>
 80057ba:	e000      	b.n	80057be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d073      	beq.n	80058b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d005      	beq.n	80057dc <HAL_RCC_OscConfig+0x21c>
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2b0c      	cmp	r3, #12
 80057d4:	d10e      	bne.n	80057f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d10b      	bne.n	80057f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057dc:	4b14      	ldr	r3, [pc, #80]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d063      	beq.n	80058b0 <HAL_RCC_OscConfig+0x2f0>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d15f      	bne.n	80058b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e2f1      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057fc:	d106      	bne.n	800580c <HAL_RCC_OscConfig+0x24c>
 80057fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a0b      	ldr	r2, [pc, #44]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	e025      	b.n	8005858 <HAL_RCC_OscConfig+0x298>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005814:	d114      	bne.n	8005840 <HAL_RCC_OscConfig+0x280>
 8005816:	4b06      	ldr	r3, [pc, #24]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a05      	ldr	r2, [pc, #20]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800581c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	4b03      	ldr	r3, [pc, #12]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a02      	ldr	r2, [pc, #8]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	e013      	b.n	8005858 <HAL_RCC_OscConfig+0x298>
 8005830:	40021000 	.word	0x40021000
 8005834:	08006800 	.word	0x08006800
 8005838:	20000000 	.word	0x20000000
 800583c:	20000004 	.word	0x20000004
 8005840:	4ba0      	ldr	r3, [pc, #640]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a9f      	ldr	r2, [pc, #636]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	4b9d      	ldr	r3, [pc, #628]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a9c      	ldr	r2, [pc, #624]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d013      	beq.n	8005888 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7fc fb86 	bl	8001f70 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005868:	f7fc fb82 	bl	8001f70 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	@ 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e2ae      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800587a:	4b92      	ldr	r3, [pc, #584]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f0      	beq.n	8005868 <HAL_RCC_OscConfig+0x2a8>
 8005886:	e014      	b.n	80058b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fc fb72 	bl	8001f70 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005890:	f7fc fb6e 	bl	8001f70 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b64      	cmp	r3, #100	@ 0x64
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e29a      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058a2:	4b88      	ldr	r3, [pc, #544]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x2d0>
 80058ae:	e000      	b.n	80058b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d060      	beq.n	8005980 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d005      	beq.n	80058d0 <HAL_RCC_OscConfig+0x310>
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b0c      	cmp	r3, #12
 80058c8:	d119      	bne.n	80058fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d116      	bne.n	80058fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058d0:	4b7c      	ldr	r3, [pc, #496]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_OscConfig+0x328>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e277      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e8:	4b76      	ldr	r3, [pc, #472]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	4973      	ldr	r1, [pc, #460]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058fc:	e040      	b.n	8005980 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d023      	beq.n	800594e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005906:	4b6f      	ldr	r3, [pc, #444]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a6e      	ldr	r2, [pc, #440]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 800590c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005912:	f7fc fb2d 	bl	8001f70 <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800591a:	f7fc fb29 	bl	8001f70 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e255      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800592c:	4b65      	ldr	r3, [pc, #404]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005938:	4b62      	ldr	r3, [pc, #392]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	495f      	ldr	r1, [pc, #380]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005948:	4313      	orrs	r3, r2
 800594a:	604b      	str	r3, [r1, #4]
 800594c:	e018      	b.n	8005980 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800594e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a5c      	ldr	r2, [pc, #368]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595a:	f7fc fb09 	bl	8001f70 <HAL_GetTick>
 800595e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005960:	e008      	b.n	8005974 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005962:	f7fc fb05 	bl	8001f70 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e231      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005974:	4b53      	ldr	r3, [pc, #332]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f0      	bne.n	8005962 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b00      	cmp	r3, #0
 800598a:	d03c      	beq.n	8005a06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01c      	beq.n	80059ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005994:	4b4b      	ldr	r3, [pc, #300]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800599a:	4a4a      	ldr	r2, [pc, #296]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fc fae4 	bl	8001f70 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ac:	f7fc fae0 	bl	8001f70 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e20c      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059be:	4b41      	ldr	r3, [pc, #260]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80059c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0ef      	beq.n	80059ac <HAL_RCC_OscConfig+0x3ec>
 80059cc:	e01b      	b.n	8005a06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ce:	4b3d      	ldr	r3, [pc, #244]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80059d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059d4:	4a3b      	ldr	r2, [pc, #236]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059de:	f7fc fac7 	bl	8001f70 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e6:	f7fc fac3 	bl	8001f70 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e1ef      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059f8:	4b32      	ldr	r3, [pc, #200]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80059fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1ef      	bne.n	80059e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80a6 	beq.w	8005b60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a14:	2300      	movs	r3, #0
 8005a16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a18:	4b2a      	ldr	r3, [pc, #168]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10d      	bne.n	8005a40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a24:	4b27      	ldr	r3, [pc, #156]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a28:	4a26      	ldr	r2, [pc, #152]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a30:	4b24      	ldr	r3, [pc, #144]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a38:	60bb      	str	r3, [r7, #8]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a40:	4b21      	ldr	r3, [pc, #132]	@ (8005ac8 <HAL_RCC_OscConfig+0x508>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d118      	bne.n	8005a7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac8 <HAL_RCC_OscConfig+0x508>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac8 <HAL_RCC_OscConfig+0x508>)
 8005a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a58:	f7fc fa8a 	bl	8001f70 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a60:	f7fc fa86 	bl	8001f70 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e1b2      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a72:	4b15      	ldr	r3, [pc, #84]	@ (8005ac8 <HAL_RCC_OscConfig+0x508>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d108      	bne.n	8005a98 <HAL_RCC_OscConfig+0x4d8>
 8005a86:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a96:	e029      	b.n	8005aec <HAL_RCC_OscConfig+0x52c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b05      	cmp	r3, #5
 8005a9e:	d115      	bne.n	8005acc <HAL_RCC_OscConfig+0x50c>
 8005aa0:	4b08      	ldr	r3, [pc, #32]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa6:	4a07      	ldr	r2, [pc, #28]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005aa8:	f043 0304 	orr.w	r3, r3, #4
 8005aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ab0:	4b04      	ldr	r3, [pc, #16]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab6:	4a03      	ldr	r2, [pc, #12]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ac0:	e014      	b.n	8005aec <HAL_RCC_OscConfig+0x52c>
 8005ac2:	bf00      	nop
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	40007000 	.word	0x40007000
 8005acc:	4b9a      	ldr	r3, [pc, #616]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad2:	4a99      	ldr	r2, [pc, #612]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005adc:	4b96      	ldr	r3, [pc, #600]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae2:	4a95      	ldr	r2, [pc, #596]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005ae4:	f023 0304 	bic.w	r3, r3, #4
 8005ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d016      	beq.n	8005b22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af4:	f7fc fa3c 	bl	8001f70 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005afa:	e00a      	b.n	8005b12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afc:	f7fc fa38 	bl	8001f70 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e162      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b12:	4b89      	ldr	r3, [pc, #548]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ed      	beq.n	8005afc <HAL_RCC_OscConfig+0x53c>
 8005b20:	e015      	b.n	8005b4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b22:	f7fc fa25 	bl	8001f70 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b28:	e00a      	b.n	8005b40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b2a:	f7fc fa21 	bl	8001f70 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e14b      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b40:	4b7d      	ldr	r3, [pc, #500]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1ed      	bne.n	8005b2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b4e:	7ffb      	ldrb	r3, [r7, #31]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d105      	bne.n	8005b60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b54:	4b78      	ldr	r3, [pc, #480]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b58:	4a77      	ldr	r2, [pc, #476]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d03c      	beq.n	8005be6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01c      	beq.n	8005bae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b74:	4b70      	ldr	r3, [pc, #448]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b7a:	4a6f      	ldr	r2, [pc, #444]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005b7c:	f043 0301 	orr.w	r3, r3, #1
 8005b80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b84:	f7fc f9f4 	bl	8001f70 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b8c:	f7fc f9f0 	bl	8001f70 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e11c      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b9e:	4b66      	ldr	r3, [pc, #408]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0ef      	beq.n	8005b8c <HAL_RCC_OscConfig+0x5cc>
 8005bac:	e01b      	b.n	8005be6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005bae:	4b62      	ldr	r3, [pc, #392]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bb4:	4a60      	ldr	r2, [pc, #384]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005bb6:	f023 0301 	bic.w	r3, r3, #1
 8005bba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbe:	f7fc f9d7 	bl	8001f70 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bc6:	f7fc f9d3 	bl	8001f70 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e0ff      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bd8:	4b57      	ldr	r3, [pc, #348]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1ef      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 80f3 	beq.w	8005dd6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	f040 80c9 	bne.w	8005d8c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f003 0203 	and.w	r2, r3, #3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d12c      	bne.n	8005c68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d123      	bne.n	8005c68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d11b      	bne.n	8005c68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d113      	bne.n	8005c68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4a:	085b      	lsrs	r3, r3, #1
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d109      	bne.n	8005c68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	085b      	lsrs	r3, r3, #1
 8005c60:	3b01      	subs	r3, #1
 8005c62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d06b      	beq.n	8005d40 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b0c      	cmp	r3, #12
 8005c6c:	d062      	beq.n	8005d34 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c6e:	4b32      	ldr	r3, [pc, #200]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e0ac      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2d      	ldr	r2, [pc, #180]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005c84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c8a:	f7fc f971 	bl	8001f70 <HAL_GetTick>
 8005c8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c92:	f7fc f96d 	bl	8001f70 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e099      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ca4:	4b24      	ldr	r3, [pc, #144]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1f0      	bne.n	8005c92 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cb0:	4b21      	ldr	r3, [pc, #132]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	4b21      	ldr	r3, [pc, #132]	@ (8005d3c <HAL_RCC_OscConfig+0x77c>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005cc0:	3a01      	subs	r2, #1
 8005cc2:	0112      	lsls	r2, r2, #4
 8005cc4:	4311      	orrs	r1, r2
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cca:	0212      	lsls	r2, r2, #8
 8005ccc:	4311      	orrs	r1, r2
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005cd2:	0852      	lsrs	r2, r2, #1
 8005cd4:	3a01      	subs	r2, #1
 8005cd6:	0552      	lsls	r2, r2, #21
 8005cd8:	4311      	orrs	r1, r2
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005cde:	0852      	lsrs	r2, r2, #1
 8005ce0:	3a01      	subs	r2, #1
 8005ce2:	0652      	lsls	r2, r2, #25
 8005ce4:	4311      	orrs	r1, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005cea:	06d2      	lsls	r2, r2, #27
 8005cec:	430a      	orrs	r2, r1
 8005cee:	4912      	ldr	r1, [pc, #72]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005cf4:	4b10      	ldr	r3, [pc, #64]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d00:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	4a0c      	ldr	r2, [pc, #48]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d0c:	f7fc f930 	bl	8001f70 <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d14:	f7fc f92c 	bl	8001f70 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e058      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d26:	4b04      	ldr	r3, [pc, #16]	@ (8005d38 <HAL_RCC_OscConfig+0x778>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f0      	beq.n	8005d14 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d32:	e050      	b.n	8005dd6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e04f      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d40:	4b27      	ldr	r3, [pc, #156]	@ (8005de0 <HAL_RCC_OscConfig+0x820>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d144      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d4c:	4b24      	ldr	r3, [pc, #144]	@ (8005de0 <HAL_RCC_OscConfig+0x820>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a23      	ldr	r2, [pc, #140]	@ (8005de0 <HAL_RCC_OscConfig+0x820>)
 8005d52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d58:	4b21      	ldr	r3, [pc, #132]	@ (8005de0 <HAL_RCC_OscConfig+0x820>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4a20      	ldr	r2, [pc, #128]	@ (8005de0 <HAL_RCC_OscConfig+0x820>)
 8005d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d64:	f7fc f904 	bl	8001f70 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6c:	f7fc f900 	bl	8001f70 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e02c      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d7e:	4b18      	ldr	r3, [pc, #96]	@ (8005de0 <HAL_RCC_OscConfig+0x820>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f0      	beq.n	8005d6c <HAL_RCC_OscConfig+0x7ac>
 8005d8a:	e024      	b.n	8005dd6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b0c      	cmp	r3, #12
 8005d90:	d01f      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d92:	4b13      	ldr	r3, [pc, #76]	@ (8005de0 <HAL_RCC_OscConfig+0x820>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a12      	ldr	r2, [pc, #72]	@ (8005de0 <HAL_RCC_OscConfig+0x820>)
 8005d98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9e:	f7fc f8e7 	bl	8001f70 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da6:	f7fc f8e3 	bl	8001f70 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e00f      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db8:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <HAL_RCC_OscConfig+0x820>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1f0      	bne.n	8005da6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005dc4:	4b06      	ldr	r3, [pc, #24]	@ (8005de0 <HAL_RCC_OscConfig+0x820>)
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	4905      	ldr	r1, [pc, #20]	@ (8005de0 <HAL_RCC_OscConfig+0x820>)
 8005dca:	4b06      	ldr	r3, [pc, #24]	@ (8005de4 <HAL_RCC_OscConfig+0x824>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60cb      	str	r3, [r1, #12]
 8005dd0:	e001      	b.n	8005dd6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3720      	adds	r7, #32
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40021000 	.word	0x40021000
 8005de4:	feeefffc 	.word	0xfeeefffc

08005de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0e7      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b75      	ldr	r3, [pc, #468]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d910      	bls.n	8005e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b72      	ldr	r3, [pc, #456]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 0207 	bic.w	r2, r3, #7
 8005e12:	4970      	ldr	r1, [pc, #448]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b6e      	ldr	r3, [pc, #440]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0cf      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d010      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	4b66      	ldr	r3, [pc, #408]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d908      	bls.n	8005e5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e48:	4b63      	ldr	r3, [pc, #396]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	4960      	ldr	r1, [pc, #384]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d04c      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e6e:	4b5a      	ldr	r3, [pc, #360]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d121      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e0a6      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d107      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e86:	4b54      	ldr	r3, [pc, #336]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d115      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e09a      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d107      	bne.n	8005eae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e08e      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eae:	4b4a      	ldr	r3, [pc, #296]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e086      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ebe:	4b46      	ldr	r3, [pc, #280]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f023 0203 	bic.w	r2, r3, #3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	4943      	ldr	r1, [pc, #268]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed0:	f7fc f84e 	bl	8001f70 <HAL_GetTick>
 8005ed4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed6:	e00a      	b.n	8005eee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed8:	f7fc f84a 	bl	8001f70 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e06e      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eee:	4b3a      	ldr	r3, [pc, #232]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 020c 	and.w	r2, r3, #12
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d1eb      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d010      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	4b31      	ldr	r3, [pc, #196]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d208      	bcs.n	8005f2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	492b      	ldr	r1, [pc, #172]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f2e:	4b29      	ldr	r3, [pc, #164]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d210      	bcs.n	8005f5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3c:	4b25      	ldr	r3, [pc, #148]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f023 0207 	bic.w	r2, r3, #7
 8005f44:	4923      	ldr	r1, [pc, #140]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4c:	4b21      	ldr	r3, [pc, #132]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d001      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e036      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	4918      	ldr	r1, [pc, #96]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d009      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f88:	4b13      	ldr	r3, [pc, #76]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	4910      	ldr	r1, [pc, #64]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f9c:	f000 f824 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	091b      	lsrs	r3, r3, #4
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	490b      	ldr	r1, [pc, #44]	@ (8005fdc <HAL_RCC_ClockConfig+0x1f4>)
 8005fae:	5ccb      	ldrb	r3, [r1, r3]
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb8:	4a09      	ldr	r2, [pc, #36]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8005fba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005fbc:	4b09      	ldr	r3, [pc, #36]	@ (8005fe4 <HAL_RCC_ClockConfig+0x1fc>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fb ff85 	bl	8001ed0 <HAL_InitTick>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8005fca:	7afb      	ldrb	r3, [r7, #11]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40022000 	.word	0x40022000
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	08006800 	.word	0x08006800
 8005fe0:	20000000 	.word	0x20000000
 8005fe4:	20000004 	.word	0x20000004

08005fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b089      	sub	sp, #36	@ 0x24
 8005fec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 030c 	and.w	r3, r3, #12
 8005ffe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006000:	4b3b      	ldr	r3, [pc, #236]	@ (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x34>
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b0c      	cmp	r3, #12
 8006014:	d121      	bne.n	800605a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d11e      	bne.n	800605a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800601c:	4b34      	ldr	r3, [pc, #208]	@ (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d107      	bne.n	8006038 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006028:	4b31      	ldr	r3, [pc, #196]	@ (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800602a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800602e:	0a1b      	lsrs	r3, r3, #8
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	e005      	b.n	8006044 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006038:	4b2d      	ldr	r3, [pc, #180]	@ (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	091b      	lsrs	r3, r3, #4
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006044:	4a2b      	ldr	r2, [pc, #172]	@ (80060f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10d      	bne.n	8006070 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006058:	e00a      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b04      	cmp	r3, #4
 800605e:	d102      	bne.n	8006066 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006060:	4b25      	ldr	r3, [pc, #148]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006062:	61bb      	str	r3, [r7, #24]
 8006064:	e004      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d101      	bne.n	8006070 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800606c:	4b23      	ldr	r3, [pc, #140]	@ (80060fc <HAL_RCC_GetSysClockFreq+0x114>)
 800606e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b0c      	cmp	r3, #12
 8006074:	d134      	bne.n	80060e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006076:	4b1e      	ldr	r3, [pc, #120]	@ (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d003      	beq.n	800608e <HAL_RCC_GetSysClockFreq+0xa6>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d003      	beq.n	8006094 <HAL_RCC_GetSysClockFreq+0xac>
 800608c:	e005      	b.n	800609a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800608e:	4b1a      	ldr	r3, [pc, #104]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006090:	617b      	str	r3, [r7, #20]
      break;
 8006092:	e005      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006094:	4b19      	ldr	r3, [pc, #100]	@ (80060fc <HAL_RCC_GetSysClockFreq+0x114>)
 8006096:	617b      	str	r3, [r7, #20]
      break;
 8006098:	e002      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	617b      	str	r3, [r7, #20]
      break;
 800609e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060a0:	4b13      	ldr	r3, [pc, #76]	@ (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	3301      	adds	r3, #1
 80060ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80060ae:	4b10      	ldr	r3, [pc, #64]	@ (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	0a1b      	lsrs	r3, r3, #8
 80060b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	fb03 f202 	mul.w	r2, r3, r2
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060c6:	4b0a      	ldr	r3, [pc, #40]	@ (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	0e5b      	lsrs	r3, r3, #25
 80060cc:	f003 0303 	and.w	r3, r3, #3
 80060d0:	3301      	adds	r3, #1
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80060e0:	69bb      	ldr	r3, [r7, #24]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3724      	adds	r7, #36	@ 0x24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40021000 	.word	0x40021000
 80060f4:	08006810 	.word	0x08006810
 80060f8:	00f42400 	.word	0x00f42400
 80060fc:	007a1200 	.word	0x007a1200

08006100 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800610c:	4b2a      	ldr	r3, [pc, #168]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800610e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006118:	f7ff f9ee 	bl	80054f8 <HAL_PWREx_GetVoltageRange>
 800611c:	6178      	str	r0, [r7, #20]
 800611e:	e014      	b.n	800614a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006120:	4b25      	ldr	r3, [pc, #148]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006124:	4a24      	ldr	r2, [pc, #144]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800612a:	6593      	str	r3, [r2, #88]	@ 0x58
 800612c:	4b22      	ldr	r3, [pc, #136]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800612e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006138:	f7ff f9de 	bl	80054f8 <HAL_PWREx_GetVoltageRange>
 800613c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800613e:	4b1e      	ldr	r3, [pc, #120]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006142:	4a1d      	ldr	r2, [pc, #116]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006148:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006150:	d10b      	bne.n	800616a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b80      	cmp	r3, #128	@ 0x80
 8006156:	d919      	bls.n	800618c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2ba0      	cmp	r3, #160	@ 0xa0
 800615c:	d902      	bls.n	8006164 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800615e:	2302      	movs	r3, #2
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	e013      	b.n	800618c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006164:	2301      	movs	r3, #1
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	e010      	b.n	800618c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b80      	cmp	r3, #128	@ 0x80
 800616e:	d902      	bls.n	8006176 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006170:	2303      	movs	r3, #3
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	e00a      	b.n	800618c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b80      	cmp	r3, #128	@ 0x80
 800617a:	d102      	bne.n	8006182 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800617c:	2302      	movs	r3, #2
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	e004      	b.n	800618c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b70      	cmp	r3, #112	@ 0x70
 8006186:	d101      	bne.n	800618c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006188:	2301      	movs	r3, #1
 800618a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800618c:	4b0b      	ldr	r3, [pc, #44]	@ (80061bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f023 0207 	bic.w	r2, r3, #7
 8006194:	4909      	ldr	r1, [pc, #36]	@ (80061bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800619c:	4b07      	ldr	r3, [pc, #28]	@ (80061bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d001      	beq.n	80061ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40021000 	.word	0x40021000
 80061bc:	40022000 	.word	0x40022000

080061c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061c8:	2300      	movs	r3, #0
 80061ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061cc:	2300      	movs	r3, #0
 80061ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d031      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061e4:	d01a      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80061e6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061ea:	d814      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d009      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061f4:	d10f      	bne.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80061f6:	4b5d      	ldr	r3, [pc, #372]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	4a5c      	ldr	r2, [pc, #368]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006200:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006202:	e00c      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3304      	adds	r3, #4
 8006208:	2100      	movs	r1, #0
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f9ce 	bl	80065ac <RCCEx_PLLSAI1_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006214:	e003      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	74fb      	strb	r3, [r7, #19]
      break;
 800621a:	e000      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800621c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800621e:	7cfb      	ldrb	r3, [r7, #19]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006224:	4b51      	ldr	r3, [pc, #324]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006232:	494e      	ldr	r1, [pc, #312]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006234:	4313      	orrs	r3, r2
 8006236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800623a:	e001      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623c:	7cfb      	ldrb	r3, [r7, #19]
 800623e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 809e 	beq.w	800638a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800624e:	2300      	movs	r3, #0
 8006250:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006252:	4b46      	ldr	r3, [pc, #280]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00d      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006268:	4b40      	ldr	r3, [pc, #256]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800626a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626c:	4a3f      	ldr	r2, [pc, #252]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800626e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006272:	6593      	str	r3, [r2, #88]	@ 0x58
 8006274:	4b3d      	ldr	r3, [pc, #244]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006280:	2301      	movs	r3, #1
 8006282:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006284:	4b3a      	ldr	r3, [pc, #232]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a39      	ldr	r2, [pc, #228]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800628a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800628e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006290:	f7fb fe6e 	bl	8001f70 <HAL_GetTick>
 8006294:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006296:	e009      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006298:	f7fb fe6a 	bl	8001f70 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d902      	bls.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	74fb      	strb	r3, [r7, #19]
        break;
 80062aa:	e005      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062ac:	4b30      	ldr	r3, [pc, #192]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0ef      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80062b8:	7cfb      	ldrb	r3, [r7, #19]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d15a      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062be:	4b2b      	ldr	r3, [pc, #172]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01e      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d019      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062da:	4b24      	ldr	r3, [pc, #144]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062e6:	4b21      	ldr	r3, [pc, #132]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ec:	4a1f      	ldr	r2, [pc, #124]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062f6:	4b1d      	ldr	r3, [pc, #116]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062fc:	4a1b      	ldr	r2, [pc, #108]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006302:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006306:	4a19      	ldr	r2, [pc, #100]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d016      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006318:	f7fb fe2a 	bl	8001f70 <HAL_GetTick>
 800631c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800631e:	e00b      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006320:	f7fb fe26 	bl	8001f70 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800632e:	4293      	cmp	r3, r2
 8006330:	d902      	bls.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	74fb      	strb	r3, [r7, #19]
            break;
 8006336:	e006      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006338:	4b0c      	ldr	r3, [pc, #48]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0ec      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006346:	7cfb      	ldrb	r3, [r7, #19]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10b      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800634c:	4b07      	ldr	r3, [pc, #28]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006352:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800635a:	4904      	ldr	r1, [pc, #16]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006362:	e009      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006364:	7cfb      	ldrb	r3, [r7, #19]
 8006366:	74bb      	strb	r3, [r7, #18]
 8006368:	e006      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800636a:	bf00      	nop
 800636c:	40021000 	.word	0x40021000
 8006370:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006374:	7cfb      	ldrb	r3, [r7, #19]
 8006376:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006378:	7c7b      	ldrb	r3, [r7, #17]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d105      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800637e:	4b8a      	ldr	r3, [pc, #552]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006382:	4a89      	ldr	r2, [pc, #548]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006388:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006396:	4b84      	ldr	r3, [pc, #528]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639c:	f023 0203 	bic.w	r2, r3, #3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	4980      	ldr	r1, [pc, #512]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063b8:	4b7b      	ldr	r3, [pc, #492]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063be:	f023 020c 	bic.w	r2, r3, #12
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	4978      	ldr	r1, [pc, #480]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063da:	4b73      	ldr	r3, [pc, #460]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e8:	496f      	ldr	r1, [pc, #444]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063fc:	4b6a      	ldr	r3, [pc, #424]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006402:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640a:	4967      	ldr	r1, [pc, #412]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800641e:	4b62      	ldr	r3, [pc, #392]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006424:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642c:	495e      	ldr	r1, [pc, #376]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006440:	4b59      	ldr	r3, [pc, #356]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006446:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644e:	4956      	ldr	r1, [pc, #344]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006462:	4b51      	ldr	r3, [pc, #324]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006468:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006470:	494d      	ldr	r1, [pc, #308]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d028      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006484:	4b48      	ldr	r3, [pc, #288]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	4945      	ldr	r1, [pc, #276]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064a2:	d106      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064a4:	4b40      	ldr	r3, [pc, #256]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4a3f      	ldr	r2, [pc, #252]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064ae:	60d3      	str	r3, [r2, #12]
 80064b0:	e011      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064ba:	d10c      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	2101      	movs	r1, #1
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f872 	bl	80065ac <RCCEx_PLLSAI1_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80064cc:	7cfb      	ldrb	r3, [r7, #19]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80064d2:	7cfb      	ldrb	r3, [r7, #19]
 80064d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d028      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064e2:	4b31      	ldr	r3, [pc, #196]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f0:	492d      	ldr	r1, [pc, #180]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006500:	d106      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006502:	4b29      	ldr	r3, [pc, #164]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	4a28      	ldr	r2, [pc, #160]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006508:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800650c:	60d3      	str	r3, [r2, #12]
 800650e:	e011      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006518:	d10c      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3304      	adds	r3, #4
 800651e:	2101      	movs	r1, #1
 8006520:	4618      	mov	r0, r3
 8006522:	f000 f843 	bl	80065ac <RCCEx_PLLSAI1_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800652a:	7cfb      	ldrb	r3, [r7, #19]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006530:	7cfb      	ldrb	r3, [r7, #19]
 8006532:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01c      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006540:	4b19      	ldr	r3, [pc, #100]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006546:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800654e:	4916      	ldr	r1, [pc, #88]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800655a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800655e:	d10c      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3304      	adds	r3, #4
 8006564:	2102      	movs	r1, #2
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f820 	bl	80065ac <RCCEx_PLLSAI1_Config>
 800656c:	4603      	mov	r3, r0
 800656e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006570:	7cfb      	ldrb	r3, [r7, #19]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006576:	7cfb      	ldrb	r3, [r7, #19]
 8006578:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006586:	4b08      	ldr	r3, [pc, #32]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006594:	4904      	ldr	r1, [pc, #16]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800659c:	7cbb      	ldrb	r3, [r7, #18]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40021000 	.word	0x40021000

080065ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065ba:	4b74      	ldr	r3, [pc, #464]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d018      	beq.n	80065f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065c6:	4b71      	ldr	r3, [pc, #452]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0203 	and.w	r2, r3, #3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d10d      	bne.n	80065f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
       ||
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80065de:	4b6b      	ldr	r3, [pc, #428]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	091b      	lsrs	r3, r3, #4
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
       ||
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d047      	beq.n	8006682 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	73fb      	strb	r3, [r7, #15]
 80065f6:	e044      	b.n	8006682 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d018      	beq.n	8006632 <RCCEx_PLLSAI1_Config+0x86>
 8006600:	2b03      	cmp	r3, #3
 8006602:	d825      	bhi.n	8006650 <RCCEx_PLLSAI1_Config+0xa4>
 8006604:	2b01      	cmp	r3, #1
 8006606:	d002      	beq.n	800660e <RCCEx_PLLSAI1_Config+0x62>
 8006608:	2b02      	cmp	r3, #2
 800660a:	d009      	beq.n	8006620 <RCCEx_PLLSAI1_Config+0x74>
 800660c:	e020      	b.n	8006650 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800660e:	4b5f      	ldr	r3, [pc, #380]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d11d      	bne.n	8006656 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800661e:	e01a      	b.n	8006656 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006620:	4b5a      	ldr	r3, [pc, #360]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006628:	2b00      	cmp	r3, #0
 800662a:	d116      	bne.n	800665a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006630:	e013      	b.n	800665a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006632:	4b56      	ldr	r3, [pc, #344]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10f      	bne.n	800665e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800663e:	4b53      	ldr	r3, [pc, #332]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d109      	bne.n	800665e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800664e:	e006      	b.n	800665e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]
      break;
 8006654:	e004      	b.n	8006660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006656:	bf00      	nop
 8006658:	e002      	b.n	8006660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800665a:	bf00      	nop
 800665c:	e000      	b.n	8006660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800665e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10d      	bne.n	8006682 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006666:	4b49      	ldr	r3, [pc, #292]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	3b01      	subs	r3, #1
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	430b      	orrs	r3, r1
 800667c:	4943      	ldr	r1, [pc, #268]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 800667e:	4313      	orrs	r3, r2
 8006680:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d17c      	bne.n	8006782 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006688:	4b40      	ldr	r3, [pc, #256]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a3f      	ldr	r2, [pc, #252]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 800668e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006694:	f7fb fc6c 	bl	8001f70 <HAL_GetTick>
 8006698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800669a:	e009      	b.n	80066b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800669c:	f7fb fc68 	bl	8001f70 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d902      	bls.n	80066b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	73fb      	strb	r3, [r7, #15]
        break;
 80066ae:	e005      	b.n	80066bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066b0:	4b36      	ldr	r3, [pc, #216]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1ef      	bne.n	800669c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d15f      	bne.n	8006782 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d110      	bne.n	80066ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066c8:	4b30      	ldr	r3, [pc, #192]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80066d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6892      	ldr	r2, [r2, #8]
 80066d8:	0211      	lsls	r1, r2, #8
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68d2      	ldr	r2, [r2, #12]
 80066de:	06d2      	lsls	r2, r2, #27
 80066e0:	430a      	orrs	r2, r1
 80066e2:	492a      	ldr	r1, [pc, #168]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	610b      	str	r3, [r1, #16]
 80066e8:	e027      	b.n	800673a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d112      	bne.n	8006716 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066f0:	4b26      	ldr	r3, [pc, #152]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80066f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6892      	ldr	r2, [r2, #8]
 8006700:	0211      	lsls	r1, r2, #8
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6912      	ldr	r2, [r2, #16]
 8006706:	0852      	lsrs	r2, r2, #1
 8006708:	3a01      	subs	r2, #1
 800670a:	0552      	lsls	r2, r2, #21
 800670c:	430a      	orrs	r2, r1
 800670e:	491f      	ldr	r1, [pc, #124]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006710:	4313      	orrs	r3, r2
 8006712:	610b      	str	r3, [r1, #16]
 8006714:	e011      	b.n	800673a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006716:	4b1d      	ldr	r3, [pc, #116]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800671e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6892      	ldr	r2, [r2, #8]
 8006726:	0211      	lsls	r1, r2, #8
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6952      	ldr	r2, [r2, #20]
 800672c:	0852      	lsrs	r2, r2, #1
 800672e:	3a01      	subs	r2, #1
 8006730:	0652      	lsls	r2, r2, #25
 8006732:	430a      	orrs	r2, r1
 8006734:	4915      	ldr	r1, [pc, #84]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006736:	4313      	orrs	r3, r2
 8006738:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800673a:	4b14      	ldr	r3, [pc, #80]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a13      	ldr	r2, [pc, #76]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006740:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006744:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006746:	f7fb fc13 	bl	8001f70 <HAL_GetTick>
 800674a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800674c:	e009      	b.n	8006762 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800674e:	f7fb fc0f 	bl	8001f70 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d902      	bls.n	8006762 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	73fb      	strb	r3, [r7, #15]
          break;
 8006760:	e005      	b.n	800676e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006762:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0ef      	beq.n	800674e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800676e:	7bfb      	ldrb	r3, [r7, #15]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d106      	bne.n	8006782 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006774:	4b05      	ldr	r3, [pc, #20]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	4903      	ldr	r1, [pc, #12]	@ (800678c <RCCEx_PLLSAI1_Config+0x1e0>)
 800677e:	4313      	orrs	r3, r2
 8006780:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006782:	7bfb      	ldrb	r3, [r7, #15]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	40021000 	.word	0x40021000

08006790 <memset>:
 8006790:	4402      	add	r2, r0
 8006792:	4603      	mov	r3, r0
 8006794:	4293      	cmp	r3, r2
 8006796:	d100      	bne.n	800679a <memset+0xa>
 8006798:	4770      	bx	lr
 800679a:	f803 1b01 	strb.w	r1, [r3], #1
 800679e:	e7f9      	b.n	8006794 <memset+0x4>

080067a0 <__libc_init_array>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	4d0d      	ldr	r5, [pc, #52]	@ (80067d8 <__libc_init_array+0x38>)
 80067a4:	4c0d      	ldr	r4, [pc, #52]	@ (80067dc <__libc_init_array+0x3c>)
 80067a6:	1b64      	subs	r4, r4, r5
 80067a8:	10a4      	asrs	r4, r4, #2
 80067aa:	2600      	movs	r6, #0
 80067ac:	42a6      	cmp	r6, r4
 80067ae:	d109      	bne.n	80067c4 <__libc_init_array+0x24>
 80067b0:	4d0b      	ldr	r5, [pc, #44]	@ (80067e0 <__libc_init_array+0x40>)
 80067b2:	4c0c      	ldr	r4, [pc, #48]	@ (80067e4 <__libc_init_array+0x44>)
 80067b4:	f000 f818 	bl	80067e8 <_init>
 80067b8:	1b64      	subs	r4, r4, r5
 80067ba:	10a4      	asrs	r4, r4, #2
 80067bc:	2600      	movs	r6, #0
 80067be:	42a6      	cmp	r6, r4
 80067c0:	d105      	bne.n	80067ce <__libc_init_array+0x2e>
 80067c2:	bd70      	pop	{r4, r5, r6, pc}
 80067c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c8:	4798      	blx	r3
 80067ca:	3601      	adds	r6, #1
 80067cc:	e7ee      	b.n	80067ac <__libc_init_array+0xc>
 80067ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d2:	4798      	blx	r3
 80067d4:	3601      	adds	r6, #1
 80067d6:	e7f2      	b.n	80067be <__libc_init_array+0x1e>
 80067d8:	08006840 	.word	0x08006840
 80067dc:	08006840 	.word	0x08006840
 80067e0:	08006840 	.word	0x08006840
 80067e4:	08006844 	.word	0x08006844

080067e8 <_init>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr

080067f4 <_fini>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr
